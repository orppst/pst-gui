/**
 * Generated by @openapi-codegen
 *
 * @version 0.1
 */
import type * as Fetcher from "./proposalToolFetcher";
import { proposalToolFetch } from "./proposalToolFetcher";
import type * as Schemas from "./proposalToolSchemas";

export type GetObservatoriesQueryParams = {
  name?: string;
};

export type GetObservatoriesError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoriesResponse = Schemas.ObjectIdentifier[];

export type GetObservatoriesVariables = {
  queryParams?: GetObservatoriesQueryParams;
};

export const getObservatories = (
  variables: GetObservatoriesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetObservatoriesResponse,
    GetObservatoriesError,
    undefined,
    {},
    GetObservatoriesQueryParams,
    {}
  >({ url: "/pst/api/observatories", method: "get", ...variables, signal });

export type CreateObservatoryError = Fetcher.ErrorWrapper<undefined>;

export type CreateObservatoryVariables = {
  body?: Schemas.Observatory;
};

export const createObservatory = (
  variables: CreateObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateObservatoryError,
    Schemas.Observatory,
    {},
    {},
    {}
  >({ url: "/pst/api/observatories", method: "post", ...variables, signal });

export type GetObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetObservatoryError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoryVariables = {
  pathParams: GetObservatoryPathParams;
};

export const getObservatory = (
  variables: GetObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observatory,
    GetObservatoryError,
    undefined,
    {},
    {},
    GetObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteObservatoryError = Fetcher.ErrorWrapper<undefined>;

export type DeleteObservatoryVariables = {
  pathParams: DeleteObservatoryPathParams;
};

export const deleteObservatory = (
  variables: DeleteObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteObservatoryError,
    undefined,
    {},
    {},
    DeleteObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type UpdateAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateAddressError = Fetcher.ErrorWrapper<undefined>;

export type UpdateAddressVariables = {
  pathParams: UpdateAddressPathParams;
};

export const updateAddress = (
  variables: UpdateAddressVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateAddressError,
    undefined,
    {},
    {},
    UpdateAddressPathParams
  >({
    url: "/pst/api/observatories/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export type AddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddArrayError = Fetcher.ErrorWrapper<undefined>;

export type AddArrayVariables = {
  pathParams: AddArrayPathParams;
};

export const addArray = (variables: AddArrayVariables, signal?: AbortSignal) =>
  proposalToolFetch<
    undefined,
    AddArrayError,
    undefined,
    {},
    {},
    AddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "put",
    ...variables,
    signal,
  });

export type CreateAndAddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddArrayError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddArrayVariables = {
  body?: Schemas.TelescopeArray;
  pathParams: CreateAndAddArrayPathParams;
};

export const createAndAddArray = (
  variables: CreateAndAddArrayVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddArrayError,
    Schemas.TelescopeArray,
    {},
    {},
    CreateAndAddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "post",
    ...variables,
    signal,
  });

export type GetObservatoryBackendsPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetObservatoryBackendsError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoryBackendsResponse = Schemas.Backend[];

export type GetObservatoryBackendsVariables = {
  pathParams: GetObservatoryBackendsPathParams;
};

export const getObservatoryBackends = (
  variables: GetObservatoryBackendsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetObservatoryBackendsResponse,
    GetObservatoryBackendsError,
    undefined,
    {},
    {},
    GetObservatoryBackendsPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "get",
    ...variables,
    signal,
  });

export type AddBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddBackendError = Fetcher.ErrorWrapper<undefined>;

export type AddBackendVariables = {
  pathParams: AddBackendPathParams;
};

export const addBackend = (
  variables: AddBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddBackendError,
    undefined,
    {},
    {},
    AddBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "put",
    ...variables,
    signal,
  });

export type CreateAndAddBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddBackendError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddBackendVariables = {
  body?: Schemas.Backend;
  pathParams: CreateAndAddBackendPathParams;
};

export const createAndAddBackend = (
  variables: CreateAndAddBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddBackendError,
    Schemas.Backend,
    {},
    {},
    CreateAndAddBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "post",
    ...variables,
    signal,
  });

export type GetObservatoryBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type GetObservatoryBackendError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoryBackendVariables = {
  pathParams: GetObservatoryBackendPathParams;
};

export const getObservatoryBackend = (
  variables: GetObservatoryBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Backend,
    GetObservatoryBackendError,
    undefined,
    {},
    {},
    GetObservatoryBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}",
    method: "get",
    ...variables,
    signal,
  });

export type ReplaceBackendNamePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceBackendNameError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceBackendNameVariables = {
  pathParams: ReplaceBackendNamePathParams;
};

export const replaceBackendName = (
  variables: ReplaceBackendNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceBackendNameError,
    undefined,
    {},
    {},
    ReplaceBackendNamePathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}/name",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateBackendParallelPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type UpdateBackendParallelError = Fetcher.ErrorWrapper<undefined>;

export type UpdateBackendParallelVariables = {
  body?: boolean;
  pathParams: UpdateBackendParallelPathParams;
};

export const updateBackendParallel = (
  variables: UpdateBackendParallelVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateBackendParallelError,
    boolean,
    {},
    {},
    UpdateBackendParallelPathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}/parallel",
    method: "put",
    ...variables,
    signal,
  });

export type AddInstrumentPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddInstrumentError = Fetcher.ErrorWrapper<undefined>;

export type AddInstrumentVariables = {
  pathParams: AddInstrumentPathParams;
};

export const addInstrument = (
  variables: AddInstrumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddInstrumentError,
    undefined,
    {},
    {},
    AddInstrumentPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument",
    method: "put",
    ...variables,
    signal,
  });

export type CreateAndAddInstrumentPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddInstrumentError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddInstrumentVariables = {
  body?: Schemas.Instrument;
  pathParams: CreateAndAddInstrumentPathParams;
};

export const createAndAddInstrument = (
  variables: CreateAndAddInstrumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddInstrumentError,
    Schemas.Instrument,
    {},
    {},
    CreateAndAddInstrumentPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument",
    method: "post",
    ...variables,
    signal,
  });

export type ReplaceInstrumentDescriptionPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentDescriptionError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentDescriptionVariables = {
  pathParams: ReplaceInstrumentDescriptionPathParams;
};

export const replaceInstrumentDescription = (
  variables: ReplaceInstrumentDescriptionVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentDescriptionError,
    undefined,
    {},
    {},
    ReplaceInstrumentDescriptionPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/description",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceInstrumentFrequencyCoveragePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentFrequencyCoverageError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentFrequencyCoverageVariables = {
  body?: Schemas.SpectralWindowSetup;
  pathParams: ReplaceInstrumentFrequencyCoveragePathParams;
};

export const replaceInstrumentFrequencyCoverage = (
  variables: ReplaceInstrumentFrequencyCoverageVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentFrequencyCoverageError,
    Schemas.SpectralWindowSetup,
    {},
    {},
    ReplaceInstrumentFrequencyCoveragePathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/frequencyCoverage",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceInstrumentKindPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentKindError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentKindVariables = {
  pathParams: ReplaceInstrumentKindPathParams;
};

export const replaceInstrumentKind = (
  variables: ReplaceInstrumentKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentKindError,
    undefined,
    {},
    {},
    ReplaceInstrumentKindPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceInstrumentNamePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentNameError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentNameVariables = {
  pathParams: ReplaceInstrumentNamePathParams;
};

export const replaceInstrumentName = (
  variables: ReplaceInstrumentNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentNameError,
    undefined,
    {},
    {},
    ReplaceInstrumentNamePathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/name",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceInstrumentReferencePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentReferenceError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentReferenceVariables = {
  pathParams: ReplaceInstrumentReferencePathParams;
};

export const replaceInstrumentReference = (
  variables: ReplaceInstrumentReferenceVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentReferenceError,
    undefined,
    {},
    {},
    ReplaceInstrumentReferencePathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/reference",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceInstrumentWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentWikiIdVariables = {
  pathParams: ReplaceInstrumentWikiIdPathParams;
};

export const replaceInstrumentWikiId = (
  variables: ReplaceInstrumentWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentWikiIdError,
    undefined,
    {},
    {},
    ReplaceInstrumentWikiIdPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateObservatoryIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateObservatoryIvoIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateObservatoryIvoIdVariables = {
  pathParams: UpdateObservatoryIvoIdPathParams;
};

export const updateObservatoryIvoId = (
  variables: UpdateObservatoryIvoIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateObservatoryIvoIdError,
    undefined,
    {},
    {},
    UpdateObservatoryIvoIdPathParams
  >({
    url: "/pst/api/observatories/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateObservatoryNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateObservatoryNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateObservatoryNameVariables = {
  pathParams: UpdateObservatoryNamePathParams;
};

export const updateObservatoryName = (
  variables: UpdateObservatoryNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateObservatoryNameError,
    undefined,
    {},
    {},
    UpdateObservatoryNamePathParams
  >({
    url: "/pst/api/observatories/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export type AddTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type AddTelescopeVariables = {
  pathParams: AddTelescopePathParams;
};

export const addTelescope = (
  variables: AddTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddTelescopeError,
    undefined,
    {},
    {},
    AddTelescopePathParams
  >({
    url: "/pst/api/observatories/{id}/telescope",
    method: "put",
    ...variables,
    signal,
  });

export type CreateAndAddTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddTelescopeVariables = {
  body?: Schemas.Telescope;
  pathParams: CreateAndAddTelescopePathParams;
};

export const createAndAddTelescope = (
  variables: CreateAndAddTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddTelescopeError,
    Schemas.Telescope,
    {},
    {},
    CreateAndAddTelescopePathParams
  >({
    url: "/pst/api/observatories/{id}/telescope",
    method: "post",
    ...variables,
    signal,
  });

export type ReplaceTelescopeXPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeXError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeXVariables = {
  pathParams: ReplaceTelescopeXPathParams;
};

export const replaceTelescopeX = (
  variables: ReplaceTelescopeXVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeXError,
    undefined,
    {},
    {},
    ReplaceTelescopeXPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/x",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTelescopeXYZPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeXYZError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeXYZVariables = {
  pathParams: ReplaceTelescopeXYZPathParams;
};

export const replaceTelescopeXYZ = (
  variables: ReplaceTelescopeXYZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeXYZError,
    undefined,
    {},
    {},
    ReplaceTelescopeXYZPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/xyz",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTelescopeYPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeYError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeYVariables = {
  pathParams: ReplaceTelescopeYPathParams;
};

export const replaceTelescopeY = (
  variables: ReplaceTelescopeYVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeYError,
    undefined,
    {},
    {},
    ReplaceTelescopeYPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/y",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTelescopeZPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeZError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeZVariables = {
  pathParams: ReplaceTelescopeZPathParams;
};

export const replaceTelescopeZ = (
  variables: ReplaceTelescopeZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeZError,
    undefined,
    {},
    {},
    ReplaceTelescopeZPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/z",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTelescopeNamePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeNameError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeNameVariables = {
  pathParams: ReplaceTelescopeNamePathParams;
};

export const replaceTelescopeName = (
  variables: ReplaceTelescopeNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeNameError,
    undefined,
    {},
    {},
    ReplaceTelescopeNamePathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/name",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateObservatoryWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateObservatoryWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateObservatoryWikiIdVariables = {
  pathParams: UpdateObservatoryWikiIdPathParams;
};

export const updateObservatoryWikiId = (
  variables: UpdateObservatoryWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateObservatoryWikiIdError,
    undefined,
    {},
    {},
    UpdateObservatoryWikiIdPathParams
  >({
    url: "/pst/api/observatories/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export type GetOrganizationsError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganizationsResponse = Schemas.ObjectIdentifier[];

export const getOrganizations = (signal?: AbortSignal) =>
  proposalToolFetch<
    GetOrganizationsResponse,
    GetOrganizationsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "get", signal });

export type CreateOrganizationError = Fetcher.ErrorWrapper<undefined>;

export type CreateOrganizationVariables = {
  body?: Schemas.Organization;
};

export const createOrganization = (
  variables: CreateOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateOrganizationError,
    Schemas.Organization,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "post", ...variables, signal });

export type GetOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetOrganizationError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganizationVariables = {
  pathParams: GetOrganizationPathParams;
};

export const getOrganization = (
  variables: GetOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Organization,
    GetOrganizationError,
    undefined,
    {},
    {},
    GetOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteOrganizationError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganizationVariables = {
  pathParams: DeleteOrganizationPathParams;
};

export const deleteOrganization = (
  variables: DeleteOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteOrganizationError,
    undefined,
    {},
    {},
    DeleteOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type UpdateOrganisationAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationAddressError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationAddressVariables = {
  pathParams: UpdateOrganisationAddressPathParams;
};

export const updateOrganisationAddress = (
  variables: UpdateOrganisationAddressVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationAddressError,
    undefined,
    {},
    {},
    UpdateOrganisationAddressPathParams
  >({
    url: "/pst/api/organizations/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateOrganisationIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationIvoIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationIvoIdVariables = {
  pathParams: UpdateOrganisationIvoIdPathParams;
};

export const updateOrganisationIvoId = (
  variables: UpdateOrganisationIvoIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationIvoIdError,
    undefined,
    {},
    {},
    UpdateOrganisationIvoIdPathParams
  >({
    url: "/pst/api/organizations/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateOrganisationNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationNameVariables = {
  pathParams: UpdateOrganisationNamePathParams;
};

export const updateOrganisationName = (
  variables: UpdateOrganisationNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationNameError,
    undefined,
    {},
    {},
    UpdateOrganisationNamePathParams
  >({
    url: "/pst/api/organizations/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateOrganisationWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationWikiIdVariables = {
  pathParams: UpdateOrganisationWikiIdPathParams;
};

export const updateOrganisationWikiId = (
  variables: UpdateOrganisationWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationWikiIdError,
    undefined,
    {},
    {},
    UpdateOrganisationWikiIdPathParams
  >({
    url: "/pst/api/organizations/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export type GetPeopleQueryParams = {
  name?: string;
};

export type GetPeopleError = Fetcher.ErrorWrapper<undefined>;

export type GetPeopleResponse = Schemas.ObjectIdentifier[];

export type GetPeopleVariables = {
  queryParams?: GetPeopleQueryParams;
};

export const getPeople = (
  variables: GetPeopleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetPeopleResponse,
    GetPeopleError,
    undefined,
    {},
    GetPeopleQueryParams,
    {}
  >({ url: "/pst/api/people", method: "get", ...variables, signal });

export type CreatePersonError = Fetcher.ErrorWrapper<undefined>;

export type CreatePersonVariables = {
  body?: Schemas.Person;
};

export const createPerson = (
  variables: CreatePersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<undefined, CreatePersonError, Schemas.Person, {}, {}, {}>({
    url: "/pst/api/people",
    method: "post",
    ...variables,
    signal,
  });

export type GetPersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetPersonError = Fetcher.ErrorWrapper<undefined>;

export type GetPersonVariables = {
  pathParams: GetPersonPathParams;
};

export const getPerson = (
  variables: GetPersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Person,
    GetPersonError,
    undefined,
    {},
    {},
    GetPersonPathParams
  >({ url: "/pst/api/people/{id}", method: "get", ...variables, signal });

export type DeletePersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeletePersonError = Fetcher.ErrorWrapper<undefined>;

export type DeletePersonVariables = {
  pathParams: DeletePersonPathParams;
};

export const deletePerson = (
  variables: DeletePersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeletePersonError,
    undefined,
    {},
    {},
    DeletePersonPathParams
  >({ url: "/pst/api/people/{id}", method: "delete", ...variables, signal });

export type UpdateEMailPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateEMailError = Fetcher.ErrorWrapper<undefined>;

export type UpdateEMailVariables = {
  pathParams: UpdateEMailPathParams;
};

export const updateEMail = (
  variables: UpdateEMailVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateEMailError,
    undefined,
    {},
    {},
    UpdateEMailPathParams
  >({ url: "/pst/api/people/{id}/eMail", method: "put", ...variables, signal });

export type UpdateFullNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateFullNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateFullNameVariables = {
  pathParams: UpdateFullNamePathParams;
};

export const updateFullName = (
  variables: UpdateFullNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateFullNameError,
    undefined,
    {},
    {},
    UpdateFullNamePathParams
  >({
    url: "/pst/api/people/{id}/fullName",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateOrcidIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrcidIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrcidIdVariables = {
  pathParams: UpdateOrcidIdPathParams;
};

export const updateOrcidId = (
  variables: UpdateOrcidIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrcidIdError,
    undefined,
    {},
    {},
    UpdateOrcidIdPathParams
  >({
    url: "/pst/api/people/{id}/orcidId",
    method: "put",
    ...variables,
    signal,
  });

export type GetProposalCyclessQueryParams = {
  includeClosed?: boolean;
};

export type GetProposalCyclessError = Fetcher.ErrorWrapper<undefined>;

export type GetProposalCyclessResponse = Schemas.ObjectIdentifier[];

export type GetProposalCyclessVariables = {
  queryParams?: GetProposalCyclessQueryParams;
};

export const getProposalCycless = (
  variables: GetProposalCyclessVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetProposalCyclessResponse,
    GetProposalCyclessError,
    undefined,
    {},
    GetProposalCyclessQueryParams,
    {}
  >({ url: "/pst/api/proposalCycles", method: "get", ...variables, signal });

export type GetProposalCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetProposalCycleError = Fetcher.ErrorWrapper<undefined>;

export type GetProposalCycleVariables = {
  pathParams: GetProposalCyclePathParams;
};

export const getProposalCycle = (
  variables: GetProposalCycleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ProposalCycle,
    GetProposalCycleError,
    undefined,
    {},
    {},
    GetProposalCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}",
    method: "get",
    ...variables,
    signal,
  });

export type GetTACPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetTACError = Fetcher.ErrorWrapper<undefined>;

export type GetTACVariables = {
  pathParams: GetTACPathParams;
};

export const getTAC = (variables: GetTACVariables, signal?: AbortSignal) =>
  proposalToolFetch<
    Schemas.Tac,
    GetTACError,
    undefined,
    {},
    {},
    GetTACPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC",
    method: "get",
    ...variables,
    signal,
  });

export type GetReviewedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetReviewedProposalsQueryParams = {
  title?: string;
};

export type GetReviewedProposalsError = Fetcher.ErrorWrapper<undefined>;

export type GetReviewedProposalsResponse = Schemas.ObjectIdentifier[];

export type GetReviewedProposalsVariables = {
  pathParams: GetReviewedProposalsPathParams;
  queryParams?: GetReviewedProposalsQueryParams;
};

export const getReviewedProposals = (
  variables: GetReviewedProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetReviewedProposalsResponse,
    GetReviewedProposalsError,
    undefined,
    {},
    GetReviewedProposalsQueryParams,
    GetReviewedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
    method: "get",
    ...variables,
    signal,
  });

export type SubmitProposalForReviewPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmitProposalForReviewError = Fetcher.ErrorWrapper<undefined>;

export type SubmitProposalForReviewVariables = {
  body?: Schemas.ReviewedProposal;
  pathParams: SubmitProposalForReviewPathParams;
};

export const submitProposalForReview = (
  variables: SubmitProposalForReviewVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SubmitProposalForReviewError,
    Schemas.ReviewedProposal,
    {},
    {},
    SubmitProposalForReviewPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
    method: "put",
    ...variables,
    signal,
  });

export type GetReviewedProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewCode: number;
};

export type GetReviewedProposalError = Fetcher.ErrorWrapper<undefined>;

export type GetReviewedProposalVariables = {
  pathParams: GetReviewedProposalPathParams;
};

export const getReviewedProposal = (
  variables: GetReviewedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ReviewedProposal,
    GetReviewedProposalError,
    undefined,
    {},
    {},
    GetReviewedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}",
    method: "get",
    ...variables,
    signal,
  });

export type SubmitReviewOfProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewCode: number;
};

export type SubmitReviewOfProposalError = Fetcher.ErrorWrapper<undefined>;

export type SubmitReviewOfProposalVariables = {
  body?: Schemas.ProposalReview;
  pathParams: SubmitReviewOfProposalPathParams;
};

export const submitReviewOfProposal = (
  variables: SubmitReviewOfProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SubmitReviewOfProposalError,
    Schemas.ProposalReview,
    {},
    {},
    SubmitReviewOfProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}/reviews",
    method: "post",
    ...variables,
    signal,
  });

export type GetSubmittedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetSubmittedProposalsQueryParams = {
  title?: string;
};

export type GetSubmittedProposalsError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmittedProposalsResponse = Schemas.ObjectIdentifier[];

export type GetSubmittedProposalsVariables = {
  pathParams: GetSubmittedProposalsPathParams;
  queryParams?: GetSubmittedProposalsQueryParams;
};

export const getSubmittedProposals = (
  variables: GetSubmittedProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetSubmittedProposalsResponse,
    GetSubmittedProposalsError,
    undefined,
    {},
    GetSubmittedProposalsQueryParams,
    GetSubmittedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "get",
    ...variables,
    signal,
  });

export type SubmitProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmitProposalError = Fetcher.ErrorWrapper<undefined>;

export type SubmitProposalVariables = {
  pathParams: SubmitProposalPathParams;
};

export const submitProposal = (
  variables: SubmitProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SubmitProposalError,
    undefined,
    {},
    {},
    SubmitProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "put",
    ...variables,
    signal,
  });

export type GetProposalsQueryParams = {
  title?: string;
};

export type GetProposalsError = Fetcher.ErrorWrapper<undefined>;

export type GetProposalsResponse = Schemas.ObjectIdentifier[];

export type GetProposalsVariables = {
  queryParams?: GetProposalsQueryParams;
};

export const getProposals = (
  variables: GetProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetProposalsResponse,
    GetProposalsError,
    undefined,
    {},
    GetProposalsQueryParams,
    {}
  >({ url: "/pst/api/proposals", method: "get", ...variables, signal });

export type CreateObservingProposalError = Fetcher.ErrorWrapper<undefined>;

export type CreateObservingProposalVariables = {
  body?: Schemas.ObservingProposal;
};

export const createObservingProposal = (
  variables: CreateObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateObservingProposalError,
    Schemas.ObservingProposal,
    {},
    {},
    {}
  >({ url: "/pst/api/proposals", method: "post", ...variables, signal });

export type GetObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetObservingProposalError = Fetcher.ErrorWrapper<undefined>;

export type GetObservingProposalVariables = {
  pathParams: GetObservingProposalPathParams;
};

export const getObservingProposal = (
  variables: GetObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    GetObservingProposalError,
    undefined,
    {},
    {},
    GetObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type DeleteObservingProposalError = Fetcher.ErrorWrapper<undefined>;

export type DeleteObservingProposalVariables = {
  pathParams: DeleteObservingProposalPathParams;
};

export const deleteObservingProposal = (
  variables: DeleteObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteObservingProposalError,
    undefined,
    {},
    {},
    DeleteObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetInvestigatorsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetInvestigatorsQueryParams = {
  fullName?: string;
};

export type GetInvestigatorsError = Fetcher.ErrorWrapper<undefined>;

export type GetInvestigatorsResponse = Schemas.ObjectIdentifier[];

export type GetInvestigatorsVariables = {
  pathParams: GetInvestigatorsPathParams;
  queryParams?: GetInvestigatorsQueryParams;
};

export const getInvestigators = (
  variables: GetInvestigatorsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetInvestigatorsResponse,
    GetInvestigatorsError,
    undefined,
    {},
    GetInvestigatorsQueryParams,
    GetInvestigatorsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "get",
    ...variables,
    signal,
  });

export type AddPersonAsInvestigatorPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddPersonAsInvestigatorError = Fetcher.ErrorWrapper<undefined>;

export type AddPersonAsInvestigatorVariables = {
  body?: Schemas.Investigator;
  pathParams: AddPersonAsInvestigatorPathParams;
};

export const addPersonAsInvestigator = (
  variables: AddPersonAsInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Investigator,
    AddPersonAsInvestigatorError,
    Schemas.Investigator,
    {},
    {},
    AddPersonAsInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "post",
    ...variables,
    signal,
  });

export type GetInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetInvestigatorError = Fetcher.ErrorWrapper<undefined>;

export type GetInvestigatorVariables = {
  pathParams: GetInvestigatorPathParams;
};

export const getInvestigator = (
  variables: GetInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Investigator,
    GetInvestigatorError,
    undefined,
    {},
    {},
    GetInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "get",
    ...variables,
    signal,
  });

export type RemoveInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveInvestigatorError = Fetcher.ErrorWrapper<undefined>;

export type RemoveInvestigatorVariables = {
  pathParams: RemoveInvestigatorPathParams;
};

export const removeInvestigator = (
  variables: RemoveInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveInvestigatorError,
    undefined,
    {},
    {},
    RemoveInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "delete",
    ...variables,
    signal,
  });

export type ChangeInvestigatorForPhDPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ChangeInvestigatorForPhDError = Fetcher.ErrorWrapper<undefined>;

export type ChangeInvestigatorForPhDVariables = {
  body?: boolean;
  pathParams: ChangeInvestigatorForPhDPathParams;
};

export const changeInvestigatorForPhD = (
  variables: ChangeInvestigatorForPhDVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ChangeInvestigatorForPhDError,
    boolean,
    {},
    {},
    ChangeInvestigatorForPhDPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/forPhD",
    method: "put",
    ...variables,
    signal,
  });

export type ChangeInvestigatorKindPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ChangeInvestigatorKindError = Fetcher.ErrorWrapper<undefined>;

export type ChangeInvestigatorKindVariables = {
  body?: Schemas.InvestigatorKind;
  pathParams: ChangeInvestigatorKindPathParams;
};

export const changeInvestigatorKind = (
  variables: ChangeInvestigatorKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ChangeInvestigatorKindError,
    Schemas.InvestigatorKind,
    {},
    {},
    ChangeInvestigatorKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export type GetJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type GetJustificationError = Fetcher.ErrorWrapper<undefined>;

export type GetJustificationVariables = {
  pathParams: GetJustificationPathParams;
};

export const getJustification = (
  variables: GetJustificationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Justification,
    GetJustificationError,
    undefined,
    {},
    {},
    GetJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "get",
    ...variables,
    signal,
  });

export type UpdateJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type UpdateJustificationError = Fetcher.ErrorWrapper<undefined>;

export type UpdateJustificationVariables = {
  body?: Schemas.Justification;
  pathParams: UpdateJustificationPathParams;
};

export const updateJustification = (
  variables: UpdateJustificationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateJustificationError,
    Schemas.Justification,
    {},
    {},
    UpdateJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "put",
    ...variables,
    signal,
  });

export type ChangeKindPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ChangeKindError = Fetcher.ErrorWrapper<undefined>;

export type ChangeKindVariables = {
  pathParams: ChangeKindPathParams;
};

export const changeKind = (
  variables: ChangeKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ChangeKindError,
    undefined,
    {},
    {},
    ChangeKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/kind",
    method: "put",
    ...variables,
    signal,
  });

export type GetObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetObservationsQueryParams = {
  fieldName?: string;
};

export type GetObservationsError = Fetcher.ErrorWrapper<undefined>;

export type GetObservationsResponse = Schemas.ObjectIdentifier[];

export type GetObservationsVariables = {
  pathParams: GetObservationsPathParams;
  queryParams?: GetObservationsQueryParams;
};

export const getObservations = (
  variables: GetObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetObservationsResponse,
    GetObservationsError,
    undefined,
    {},
    GetObservationsQueryParams,
    GetObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "get",
    ...variables,
    signal,
  });

export type AddObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddObservationError = Fetcher.ErrorWrapper<undefined>;

export type AddObservationVariables = {
  pathParams: AddObservationPathParams;
};

export const addObservation = (
  variables: AddObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddObservationError,
    undefined,
    {},
    {},
    AddObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "put",
    ...variables,
    signal,
  });

export type AddNewObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewObservationError = Fetcher.ErrorWrapper<undefined>;

export type AddNewObservationVariables = {
  body?: Schemas.Observation;
  pathParams: AddNewObservationPathParams;
};

export const addNewObservation = (
  variables: AddNewObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observation,
    AddNewObservationError,
    Schemas.Observation,
    {},
    {},
    AddNewObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "post",
    ...variables,
    signal,
  });

export type GetCalibrationObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetCalibrationObservationsError = Fetcher.ErrorWrapper<undefined>;

export type GetCalibrationObservationsResponse = Schemas.ObjectIdentifier[];

export type GetCalibrationObservationsVariables = {
  pathParams: GetCalibrationObservationsPathParams;
};

export const getCalibrationObservations = (
  variables: GetCalibrationObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetCalibrationObservationsResponse,
    GetCalibrationObservationsError,
    undefined,
    {},
    {},
    GetCalibrationObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/calibrationObservations",
    method: "get",
    ...variables,
    signal,
  });

export type GetFieldsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetFieldsQueryParams = {
  fieldName?: string;
};

export type GetFieldsError = Fetcher.ErrorWrapper<undefined>;

export type GetFieldsResponse = Schemas.ObjectIdentifier[];

export type GetFieldsVariables = {
  pathParams: GetFieldsPathParams;
  queryParams?: GetFieldsQueryParams;
};

export const getFields = (
  variables: GetFieldsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetFieldsResponse,
    GetFieldsError,
    undefined,
    {},
    GetFieldsQueryParams,
    GetFieldsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/fields",
    method: "get",
    ...variables,
    signal,
  });

export type AddNewFieldPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewFieldError = Fetcher.ErrorWrapper<undefined>;

export type AddNewFieldVariables = {
  body?: Schemas.Field;
  pathParams: AddNewFieldPathParams;
};

export const addNewField = (
  variables: AddNewFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Field,
    AddNewFieldError,
    Schemas.Field,
    {},
    {},
    AddNewFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/fields",
    method: "post",
    ...variables,
    signal,
  });

export type RemoveFieldPathParams = {
  /**
   * @format int64
   */
  fieldId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveFieldError = Fetcher.ErrorWrapper<undefined>;

export type RemoveFieldVariables = {
  pathParams: RemoveFieldPathParams;
};

export const removeField = (
  variables: RemoveFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveFieldError,
    undefined,
    {},
    {},
    RemoveFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/fields/{fieldId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetTargetObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetTargetObservationsError = Fetcher.ErrorWrapper<undefined>;

export type GetTargetObservationsResponse = Schemas.ObjectIdentifier[];

export type GetTargetObservationsVariables = {
  pathParams: GetTargetObservationsPathParams;
};

export const getTargetObservations = (
  variables: GetTargetObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTargetObservationsResponse,
    GetTargetObservationsError,
    undefined,
    {},
    {},
    GetTargetObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targetObservations",
    method: "get",
    ...variables,
    signal,
  });

export type GetTargetsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetTargetsQueryParams = {
  sourceName?: string;
};

export type GetTargetsError = Fetcher.ErrorWrapper<undefined>;

export type GetTargetsResponse = Schemas.ObjectIdentifier[];

export type GetTargetsVariables = {
  pathParams: GetTargetsPathParams;
  queryParams?: GetTargetsQueryParams;
};

export const getTargets = (
  variables: GetTargetsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTargetsResponse,
    GetTargetsError,
    undefined,
    {},
    GetTargetsQueryParams,
    GetTargetsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targets",
    method: "get",
    ...variables,
    signal,
  });

export type AddNewTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewTargetError = Fetcher.ErrorWrapper<undefined>;

export type AddNewTargetVariables = {
  body?: Schemas.Target;
  pathParams: AddNewTargetPathParams;
};

export const addNewTarget = (
  variables: AddNewTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Target,
    AddNewTargetError,
    Schemas.Target,
    {},
    {},
    AddNewTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targets",
    method: "post",
    ...variables,
    signal,
  });

export type RemoveTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  targetId: number;
};

export type RemoveTargetError = Fetcher.ErrorWrapper<undefined>;

export type RemoveTargetVariables = {
  pathParams: RemoveTargetPathParams;
};

export const removeTarget = (
  variables: RemoveTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveTargetError,
    undefined,
    {},
    {},
    RemoveTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targets/{targetId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetTechGoalsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetTechGoalsError = Fetcher.ErrorWrapper<undefined>;

export type GetTechGoalsResponse = Schemas.TechnicalGoal[];

export type GetTechGoalsVariables = {
  pathParams: GetTechGoalsPathParams;
};

export const getTechGoals = (
  variables: GetTechGoalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTechGoalsResponse,
    GetTechGoalsError,
    undefined,
    {},
    {},
    GetTechGoalsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/technicalGoals",
    method: "get",
    ...variables,
    signal,
  });

export type AddNewTechGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewTechGoalError = Fetcher.ErrorWrapper<undefined>;

export type AddNewTechGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: AddNewTechGoalPathParams;
};

export const addNewTechGoal = (
  variables: AddNewTechGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.TechnicalGoal,
    AddNewTechGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    AddNewTechGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/technicalGoals",
    method: "post",
    ...variables,
    signal,
  });

export type RemoveTechGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  techGoalId: number;
};

export type RemoveTechGoalError = Fetcher.ErrorWrapper<undefined>;

export type RemoveTechGoalVariables = {
  pathParams: RemoveTechGoalPathParams;
};

export const removeTechGoal = (
  variables: RemoveTechGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveTechGoalError,
    undefined,
    {},
    {},
    RemoveTechGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/technicalGoals/{techGoalId}",
    method: "delete",
    ...variables,
    signal,
  });

export type RemoveObservationPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveObservationError = Fetcher.ErrorWrapper<undefined>;

export type RemoveObservationVariables = {
  pathParams: RemoveObservationPathParams;
};

export const removeObservation = (
  variables: RemoveObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveObservationError,
    undefined,
    {},
    {},
    RemoveObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetConstraintsPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetConstraintsError = Fetcher.ErrorWrapper<undefined>;

export type GetConstraintsResponse = Schemas.Constraint[];

export type GetConstraintsVariables = {
  pathParams: GetConstraintsPathParams;
};

export const getConstraints = (
  variables: GetConstraintsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetConstraintsResponse,
    GetConstraintsError,
    undefined,
    {},
    {},
    GetConstraintsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "get",
    ...variables,
    signal,
  });

export type AddNewConstraintPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewConstraintError = Fetcher.ErrorWrapper<undefined>;

export type AddNewConstraintVariables = {
  body?: Schemas.Constraint;
  pathParams: AddNewConstraintPathParams;
};

export const addNewConstraint = (
  variables: AddNewConstraintVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddNewConstraintError,
    Schemas.Constraint,
    {},
    {},
    AddNewConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "post",
    ...variables,
    signal,
  });

export type RemoveConstraintPathParams = {
  /**
   * @format int64
   */
  constraintId: number;
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveConstraintError = Fetcher.ErrorWrapper<undefined>;

export type RemoveConstraintVariables = {
  pathParams: RemoveConstraintPathParams;
};

export const removeConstraint = (
  variables: RemoveConstraintVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveConstraintError,
    undefined,
    {},
    {},
    RemoveConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}",
    method: "delete",
    ...variables,
    signal,
  });

export type ReplaceFieldPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceFieldError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceFieldVariables = {
  body?: Schemas.Field;
  pathParams: ReplaceFieldPathParams;
};

export const replaceField = (
  variables: ReplaceFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceFieldError,
    Schemas.Field,
    {},
    {},
    ReplaceFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/field",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTargetPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceTargetError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTargetVariables = {
  body?: Schemas.Target;
  pathParams: ReplaceTargetPathParams;
};

export const replaceTarget = (
  variables: ReplaceTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTargetError,
    Schemas.Target,
    {},
    {},
    ReplaceTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/target",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceTechnicalGoalError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTechnicalGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: ReplaceTechnicalGoalPathParams;
};

export const replaceTechnicalGoal = (
  variables: ReplaceTechnicalGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTechnicalGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    ReplaceTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/technicalGoal",
    method: "put",
    ...variables,
    signal,
  });

export type AddRelatedProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddRelatedProposalError = Fetcher.ErrorWrapper<undefined>;

export type AddRelatedProposalVariables = {
  pathParams: AddRelatedProposalPathParams;
};

export const addRelatedProposal = (
  variables: AddRelatedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddRelatedProposalError,
    undefined,
    {},
    {},
    AddRelatedProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/relatedProposals",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceSummaryPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceSummaryError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceSummaryVariables = {
  pathParams: ReplaceSummaryPathParams;
};

export const replaceSummary = (
  variables: ReplaceSummaryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceSummaryError,
    undefined,
    {},
    {},
    ReplaceSummaryPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/summary",
    method: "put",
    ...variables,
    signal,
  });

export type GetSupportingDocumentsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetSupportingDocumentsQueryParams = {
  title?: string;
};

export type GetSupportingDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type GetSupportingDocumentsResponse = Schemas.ObjectIdentifier[];

export type GetSupportingDocumentsVariables = {
  pathParams: GetSupportingDocumentsPathParams;
  queryParams?: GetSupportingDocumentsQueryParams;
};

export const getSupportingDocuments = (
  variables: GetSupportingDocumentsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetSupportingDocumentsResponse,
    GetSupportingDocumentsError,
    undefined,
    {},
    GetSupportingDocumentsQueryParams,
    GetSupportingDocumentsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "get",
    ...variables,
    signal,
  });

export type AddNewSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewSupportingDocumentError = Fetcher.ErrorWrapper<undefined>;

export type AddNewSupportingDocumentVariables = {
  body?: Schemas.SupportingDocument;
  pathParams: AddNewSupportingDocumentPathParams;
};

export const addNewSupportingDocument = (
  variables: AddNewSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddNewSupportingDocumentError,
    Schemas.SupportingDocument,
    {},
    {},
    AddNewSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "post",
    ...variables,
    signal,
  });

export type GetSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetSupportingDocumentError = Fetcher.ErrorWrapper<undefined>;

export type GetSupportingDocumentVariables = {
  pathParams: GetSupportingDocumentPathParams;
};

export const getSupportingDocument = (
  variables: GetSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SupportingDocument,
    GetSupportingDocumentError,
    undefined,
    {},
    {},
    GetSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "get",
    ...variables,
    signal,
  });

export type RemoveSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveSupportingDocumentError = Fetcher.ErrorWrapper<undefined>;

export type RemoveSupportingDocumentVariables = {
  pathParams: RemoveSupportingDocumentPathParams;
};

export const removeSupportingDocument = (
  variables: RemoveSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveSupportingDocumentError,
    undefined,
    {},
    {},
    RemoveSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type ReplaceSupportingDocumentLocationPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceSupportingDocumentLocationError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceSupportingDocumentLocationVariables = {
  pathParams: ReplaceSupportingDocumentLocationPathParams;
};

export const replaceSupportingDocumentLocation = (
  variables: ReplaceSupportingDocumentLocationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceSupportingDocumentLocationError,
    undefined,
    {},
    {},
    ReplaceSupportingDocumentLocationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/location",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceSupportingDocumentTitlePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceSupportingDocumentTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceSupportingDocumentTitleVariables = {
  pathParams: ReplaceSupportingDocumentTitlePathParams;
};

export const replaceSupportingDocumentTitle = (
  variables: ReplaceSupportingDocumentTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceSupportingDocumentTitleError,
    undefined,
    {},
    {},
    ReplaceSupportingDocumentTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/title",
    method: "put",
    ...variables,
    signal,
  });

export type ReplaceTitlePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceTitleError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTitleVariables = {
  pathParams: ReplaceTitlePathParams;
};

export const replaceTitle = (
  variables: ReplaceTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTitleError,
    undefined,
    {},
    {},
    ReplaceTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/title",
    method: "put",
    ...variables,
    signal,
  });

export type GetSpaceFramePathParams = {
  frameCode: string;
};

export type GetSpaceFrameError = Fetcher.ErrorWrapper<undefined>;

export type GetSpaceFrameVariables = {
  pathParams: GetSpaceFramePathParams;
};

export const getSpaceFrame = (
  variables: GetSpaceFrameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SpaceFrame,
    GetSpaceFrameError,
    undefined,
    {},
    {},
    GetSpaceFramePathParams
  >({
    url: "/pst/api/spaceFrames/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export type GetSpaceSystemPathParams = {
  frameCode: string;
};

export type GetSpaceSystemError = Fetcher.ErrorWrapper<undefined>;

export type GetSpaceSystemVariables = {
  pathParams: GetSpaceSystemPathParams;
};

export const getSpaceSystem = (
  variables: GetSpaceSystemVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SpaceSys,
    GetSpaceSystemError,
    undefined,
    {},
    {},
    GetSpaceSystemPathParams
  >({
    url: "/pst/api/spaceSystems/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export type SubjectMapPathParams = {
  id: string;
};

export type SubjectMapError = Fetcher.ErrorWrapper<undefined>;

export type SubjectMapVariables = {
  pathParams: SubjectMapPathParams;
};

export const subjectMap = (
  variables: SubjectMapVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SubjectMap,
    SubjectMapError,
    undefined,
    {},
    {},
    SubjectMapPathParams
  >({ url: "/pst/api/subjectMap/{id}", method: "get", ...variables, signal });

export type GetTelescopesQueryParams = {
  name?: string;
};

export type GetTelescopesError = Fetcher.ErrorWrapper<undefined>;

export type GetTelescopesResponse = Schemas.ObjectIdentifier[];

export type GetTelescopesVariables = {
  queryParams?: GetTelescopesQueryParams;
};

export const getTelescopes = (
  variables: GetTelescopesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTelescopesResponse,
    GetTelescopesError,
    undefined,
    {},
    GetTelescopesQueryParams,
    {}
  >({ url: "/pst/api/telescopes", method: "get", ...variables, signal });

export type CreateTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type CreateTelescopeVariables = {
  body?: Schemas.Telescope;
};

export const createTelescope = (
  variables: CreateTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateTelescopeError,
    Schemas.Telescope,
    {},
    {},
    {}
  >({ url: "/pst/api/telescopes", method: "post", ...variables, signal });

export type GetTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type GetTelescopeVariables = {
  pathParams: GetTelescopePathParams;
};

export const getTelescope = (
  variables: GetTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Telescope,
    GetTelescopeError,
    undefined,
    {},
    {},
    GetTelescopePathParams
  >({ url: "/pst/api/telescopes/{id}", method: "get", ...variables, signal });

export type DeleteTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTelescopeVariables = {
  pathParams: DeleteTelescopePathParams;
};

export const deleteTelescope = (
  variables: DeleteTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteTelescopeError,
    undefined,
    {},
    {},
    DeleteTelescopePathParams
  >({
    url: "/pst/api/telescopes/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export type UpdateLocationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationVariables = {
  body?: Schemas.GeocentricPoint;
  pathParams: UpdateLocationPathParams;
};

export const updateLocation = (
  variables: UpdateLocationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationError,
    Schemas.GeocentricPoint,
    {},
    {},
    UpdateLocationPathParams
  >({
    url: "/pst/api/telescopes/{id}/location",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateLocationCoordinateSystemPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationCoordinateSystemError =
  Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationCoordinateSystemVariables = {
  pathParams: UpdateLocationCoordinateSystemPathParams;
};

export const updateLocationCoordinateSystem = (
  variables: UpdateLocationCoordinateSystemVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationCoordinateSystemError,
    undefined,
    {},
    {},
    UpdateLocationCoordinateSystemPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/coordinateSystem",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateLocationXPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationXError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationXVariables = {
  body?: Schemas.RealQuantity;
  pathParams: UpdateLocationXPathParams;
};

export const updateLocationX = (
  variables: UpdateLocationXVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationXError,
    Schemas.RealQuantity,
    {},
    {},
    UpdateLocationXPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/x",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateLocationXYZPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationXYZError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationXYZRequestBody = Schemas.RealQuantity[];

export type UpdateLocationXYZVariables = {
  body?: UpdateLocationXYZRequestBody;
  pathParams: UpdateLocationXYZPathParams;
};

export const updateLocationXYZ = (
  variables: UpdateLocationXYZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationXYZError,
    UpdateLocationXYZRequestBody,
    {},
    {},
    UpdateLocationXYZPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/xyz",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateLocationYPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationYError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationYVariables = {
  body?: Schemas.RealQuantity;
  pathParams: UpdateLocationYPathParams;
};

export const updateLocationY = (
  variables: UpdateLocationYVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationYError,
    Schemas.RealQuantity,
    {},
    {},
    UpdateLocationYPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/y",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateLocationZPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationZError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationZVariables = {
  body?: Schemas.RealQuantity;
  pathParams: UpdateLocationZPathParams;
};

export const updateLocationZ = (
  variables: UpdateLocationZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationZError,
    Schemas.RealQuantity,
    {},
    {},
    UpdateLocationZPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/z",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateTelescopeNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateTelescopeNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateTelescopeNameVariables = {
  pathParams: UpdateTelescopeNamePathParams;
};

export const updateTelescopeName = (
  variables: UpdateTelescopeNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateTelescopeNameError,
    undefined,
    {},
    {},
    UpdateTelescopeNamePathParams
  >({
    url: "/pst/api/telescopes/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export type UpdateTelescopeWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateTelescopeWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateTelescopeWikiIdVariables = {
  pathParams: UpdateTelescopeWikiIdPathParams;
};

export const updateTelescopeWikiId = (
  variables: UpdateTelescopeWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateTelescopeWikiIdError,
    undefined,
    {},
    {},
    UpdateTelescopeWikiIdPathParams
  >({
    url: "/pst/api/telescopes/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const operationsByTag = {
  observatories: {
    getObservatories,
    createObservatory,
    getObservatory,
    deleteObservatory,
    updateAddress,
    addArray,
    createAndAddArray,
    getObservatoryBackends,
    addBackend,
    createAndAddBackend,
    getObservatoryBackend,
    replaceBackendName,
    updateBackendParallel,
    addInstrument,
    createAndAddInstrument,
    replaceInstrumentDescription,
    replaceInstrumentFrequencyCoverage,
    replaceInstrumentKind,
    replaceInstrumentName,
    replaceInstrumentReference,
    replaceInstrumentWikiId,
    updateObservatoryIvoId,
    updateObservatoryName,
    addTelescope,
    createAndAddTelescope,
    replaceTelescopeX,
    replaceTelescopeXYZ,
    replaceTelescopeY,
    replaceTelescopeZ,
    replaceTelescopeName,
    updateObservatoryWikiId,
  },
  organizations: {
    getOrganizations,
    createOrganization,
    getOrganization,
    deleteOrganization,
    updateOrganisationAddress,
    updateOrganisationIvoId,
    updateOrganisationName,
    updateOrganisationWikiId,
  },
  people: {
    getPeople,
    createPerson,
    getPerson,
    deletePerson,
    updateEMail,
    updateFullName,
    updateOrcidId,
  },
  proposalCycles: {
    getProposalCycless,
    getProposalCycle,
    getTAC,
    getReviewedProposals,
    submitProposalForReview,
    getReviewedProposal,
    submitReviewOfProposal,
    getSubmittedProposals,
    submitProposal,
  },
  proposals: {
    getProposals,
    createObservingProposal,
    getObservingProposal,
    deleteObservingProposal,
    getJustification,
    updateJustification,
    changeKind,
    addRelatedProposal,
    replaceSummary,
    replaceTitle,
  },
  proposalsInvestigators: {
    getInvestigators,
    addPersonAsInvestigator,
    getInvestigator,
    removeInvestigator,
    changeInvestigatorForPhD,
    changeInvestigatorKind,
  },
  proposalsObservations: {
    getObservations,
    addObservation,
    addNewObservation,
    getCalibrationObservations,
    getFields,
    addNewField,
    removeField,
    getTargetObservations,
    getTargets,
    addNewTarget,
    removeTarget,
    getTechGoals,
    addNewTechGoal,
    removeTechGoal,
    removeObservation,
    getConstraints,
    addNewConstraint,
    removeConstraint,
    replaceField,
    replaceTarget,
    replaceTechnicalGoal,
  },
  proposalsSupportingDocuments: {
    getSupportingDocuments,
    addNewSupportingDocument,
    getSupportingDocument,
    removeSupportingDocument,
    replaceSupportingDocumentLocation,
    replaceSupportingDocumentTitle,
  },
  standardSpaceFrames: { getSpaceFrame },
  standardSpaceCoordinateSystems: { getSpaceSystem },
  mappingBetweenAAIUserIdsAndPeople: { subjectMap },
  telescopes: {
    getTelescopes,
    createTelescope,
    getTelescope,
    deleteTelescope,
    updateLocation,
    updateLocationCoordinateSystem,
    updateLocationX,
    updateLocationXYZ,
    updateLocationY,
    updateLocationZ,
    updateTelescopeName,
    updateTelescopeWikiId,
  },
};
