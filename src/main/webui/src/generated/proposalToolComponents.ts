/**
 * Generated by @openapi-codegen
 *
 * @version 0.7
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useProposalToolContext,
  ProposalToolContext,
} from "./proposalToolContext";
import type * as Fetcher from "./proposalToolFetcher";
import { proposalToolFetch } from "./proposalToolFetcher";
import type * as Schemas from "./proposalToolSchemas";

export type KeycloakResourceGetRolesError = Fetcher.ErrorWrapper<undefined>;

export type KeycloakResourceGetRolesResponse = Schemas.RoleRepresentation[];

export type KeycloakResourceGetRolesVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchKeycloakResourceGetRoles = (
  variables: KeycloakResourceGetRolesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    KeycloakResourceGetRolesResponse,
    KeycloakResourceGetRolesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/admin/roles", method: "get", ...variables, signal });

export const useKeycloakResourceGetRoles = <
  TData = KeycloakResourceGetRolesResponse,
>(
  variables: KeycloakResourceGetRolesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      KeycloakResourceGetRolesResponse,
      KeycloakResourceGetRolesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    KeycloakResourceGetRolesResponse,
    KeycloakResourceGetRolesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/admin/roles",
      operationId: "keycloakResourceGetRoles",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchKeycloakResourceGetRoles(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type KeycloakResourceGetUserRepresentationError =
  Fetcher.ErrorWrapper<undefined>;

export type KeycloakResourceGetUserRepresentationResponse =
  Schemas.UserRepresentation[];

export type KeycloakResourceGetUserRepresentationVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchKeycloakResourceGetUserRepresentation = (
  variables: KeycloakResourceGetUserRepresentationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    KeycloakResourceGetUserRepresentationResponse,
    KeycloakResourceGetUserRepresentationError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/pst/api/admin/userRepresentations",
    method: "get",
    ...variables,
    signal,
  });

export const useKeycloakResourceGetUserRepresentation = <
  TData = KeycloakResourceGetUserRepresentationResponse,
>(
  variables: KeycloakResourceGetUserRepresentationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      KeycloakResourceGetUserRepresentationResponse,
      KeycloakResourceGetUserRepresentationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    KeycloakResourceGetUserRepresentationResponse,
    KeycloakResourceGetUserRepresentationError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/admin/userRepresentations",
      operationId: "keycloakResourceGetUserRepresentation",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchKeycloakResourceGetUserRepresentation(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservatoryResourceGetObservatoriesQueryParams = {
  name?: string;
};

export type ObservatoryResourceGetObservatoriesError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetObservatoriesResponse =
  Schemas.ObjectIdentifier[];

export type ObservatoryResourceGetObservatoriesVariables = {
  queryParams?: ObservatoryResourceGetObservatoriesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetObservatories = (
  variables: ObservatoryResourceGetObservatoriesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservatoryResourceGetObservatoriesResponse,
    ObservatoryResourceGetObservatoriesError,
    undefined,
    {},
    ObservatoryResourceGetObservatoriesQueryParams,
    {}
  >({ url: "/pst/api/observatories", method: "get", ...variables, signal });

export const useObservatoryResourceGetObservatories = <
  TData = ObservatoryResourceGetObservatoriesResponse,
>(
  variables: ObservatoryResourceGetObservatoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservatoryResourceGetObservatoriesResponse,
      ObservatoryResourceGetObservatoriesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservatoryResourceGetObservatoriesResponse,
    ObservatoryResourceGetObservatoriesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories",
      operationId: "observatoryResourceGetObservatories",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservatoryResourceGetObservatories(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservatoryResourceCreateObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceCreateObservatoryVariables = {
  body?: Schemas.Observatory;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceCreateObservatory = (
  variables: ObservatoryResourceCreateObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Observatory,
    ObservatoryResourceCreateObservatoryError,
    Schemas.Observatory,
    {},
    {},
    {}
  >({ url: "/pst/api/observatories", method: "post", ...variables, signal });

export const useObservatoryResourceCreateObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Observatory,
      ObservatoryResourceCreateObservatoryError,
      ObservatoryResourceCreateObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Observatory,
    ObservatoryResourceCreateObservatoryError,
    ObservatoryResourceCreateObservatoryVariables
  >({
    mutationFn: (variables: ObservatoryResourceCreateObservatoryVariables) =>
      fetchObservatoryResourceCreateObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceGetObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceGetObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetObservatoryVariables = {
  pathParams: ObservatoryResourceGetObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetObservatory = (
  variables: ObservatoryResourceGetObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Observatory,
    ObservatoryResourceGetObservatoryError,
    undefined,
    {},
    {},
    ObservatoryResourceGetObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservatoryResourceGetObservatory = <
  TData = Schemas.Observatory,
>(
  variables: ObservatoryResourceGetObservatoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Observatory,
      ObservatoryResourceGetObservatoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Observatory,
    ObservatoryResourceGetObservatoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{id}",
      operationId: "observatoryResourceGetObservatory",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservatoryResourceGetObservatory(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservatoryResourceDeleteObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceDeleteObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceDeleteObservatoryVariables = {
  pathParams: ObservatoryResourceDeleteObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceDeleteObservatory = (
  variables: ObservatoryResourceDeleteObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceDeleteObservatoryError,
    undefined,
    {},
    {},
    ObservatoryResourceDeleteObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useObservatoryResourceDeleteObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceDeleteObservatoryError,
      ObservatoryResourceDeleteObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceDeleteObservatoryError,
    ObservatoryResourceDeleteObservatoryVariables
  >({
    mutationFn: (variables: ObservatoryResourceDeleteObservatoryVariables) =>
      fetchObservatoryResourceDeleteObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceUpdateAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateAddressError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateAddressVariables = {
  pathParams: ObservatoryResourceUpdateAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateAddress = (
  variables: ObservatoryResourceUpdateAddressVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateAddressError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateAddressPathParams
  >({
    url: "/pst/api/observatories/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateAddressError,
      ObservatoryResourceUpdateAddressVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateAddressError,
    ObservatoryResourceUpdateAddressVariables
  >({
    mutationFn: (variables: ObservatoryResourceUpdateAddressVariables) =>
      fetchObservatoryResourceUpdateAddress({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceAddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceAddArrayError = Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceAddArrayVariables = {
  pathParams: ObservatoryResourceAddArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceAddArray = (
  variables: ObservatoryResourceAddArrayVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceAddArrayError,
    undefined,
    {},
    {},
    ObservatoryResourceAddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceAddArray = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceAddArrayError,
      ObservatoryResourceAddArrayVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceAddArrayError,
    ObservatoryResourceAddArrayVariables
  >({
    mutationFn: (variables: ObservatoryResourceAddArrayVariables) =>
      fetchObservatoryResourceAddArray({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ObservatoryResourceCreateAndAddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceCreateAndAddArrayError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceCreateAndAddArrayVariables = {
  body?: Schemas.TelescopeArray;
  pathParams: ObservatoryResourceCreateAndAddArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceCreateAndAddArray = (
  variables: ObservatoryResourceCreateAndAddArrayVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.TelescopeArray,
    ObservatoryResourceCreateAndAddArrayError,
    Schemas.TelescopeArray,
    {},
    {},
    ObservatoryResourceCreateAndAddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "post",
    ...variables,
    signal,
  });

export const useObservatoryResourceCreateAndAddArray = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TelescopeArray,
      ObservatoryResourceCreateAndAddArrayError,
      ObservatoryResourceCreateAndAddArrayVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.TelescopeArray,
    ObservatoryResourceCreateAndAddArrayError,
    ObservatoryResourceCreateAndAddArrayVariables
  >({
    mutationFn: (variables: ObservatoryResourceCreateAndAddArrayVariables) =>
      fetchObservatoryResourceCreateAndAddArray({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceUpdateObservatoryIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateObservatoryIvoIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateObservatoryIvoIdVariables = {
  pathParams: ObservatoryResourceUpdateObservatoryIvoIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateObservatoryIvoId = (
  variables: ObservatoryResourceUpdateObservatoryIvoIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateObservatoryIvoIdError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateObservatoryIvoIdPathParams
  >({
    url: "/pst/api/observatories/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateObservatoryIvoId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateObservatoryIvoIdError,
      ObservatoryResourceUpdateObservatoryIvoIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateObservatoryIvoIdError,
    ObservatoryResourceUpdateObservatoryIvoIdVariables
  >({
    mutationFn: (
      variables: ObservatoryResourceUpdateObservatoryIvoIdVariables,
    ) =>
      fetchObservatoryResourceUpdateObservatoryIvoId({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceUpdateObservatoryNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateObservatoryNameError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateObservatoryNameVariables = {
  pathParams: ObservatoryResourceUpdateObservatoryNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateObservatoryName = (
  variables: ObservatoryResourceUpdateObservatoryNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateObservatoryNameError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateObservatoryNamePathParams
  >({
    url: "/pst/api/observatories/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateObservatoryName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateObservatoryNameError,
      ObservatoryResourceUpdateObservatoryNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateObservatoryNameError,
    ObservatoryResourceUpdateObservatoryNameVariables
  >({
    mutationFn: (
      variables: ObservatoryResourceUpdateObservatoryNameVariables,
    ) =>
      fetchObservatoryResourceUpdateObservatoryName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceUpdateObservatoryWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateObservatoryWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateObservatoryWikiIdVariables = {
  pathParams: ObservatoryResourceUpdateObservatoryWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateObservatoryWikiId = (
  variables: ObservatoryResourceUpdateObservatoryWikiIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateObservatoryWikiIdError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateObservatoryWikiIdPathParams
  >({
    url: "/pst/api/observatories/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateObservatoryWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateObservatoryWikiIdError,
      ObservatoryResourceUpdateObservatoryWikiIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateObservatoryWikiIdError,
    ObservatoryResourceUpdateObservatoryWikiIdVariables
  >({
    mutationFn: (
      variables: ObservatoryResourceUpdateObservatoryWikiIdVariables,
    ) =>
      fetchObservatoryResourceUpdateObservatoryWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservatoryResourceGetTelescopeArraysPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type ObservatoryResourceGetTelescopeArraysError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetTelescopeArraysResponse =
  Schemas.ObjectIdentifier[];

export type ObservatoryResourceGetTelescopeArraysVariables = {
  pathParams: ObservatoryResourceGetTelescopeArraysPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetTelescopeArrays = (
  variables: ObservatoryResourceGetTelescopeArraysVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservatoryResourceGetTelescopeArraysResponse,
    ObservatoryResourceGetTelescopeArraysError,
    undefined,
    {},
    {},
    ObservatoryResourceGetTelescopeArraysPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/array",
    method: "get",
    ...variables,
    signal,
  });

export const useObservatoryResourceGetTelescopeArrays = <
  TData = ObservatoryResourceGetTelescopeArraysResponse,
>(
  variables: ObservatoryResourceGetTelescopeArraysVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservatoryResourceGetTelescopeArraysResponse,
      ObservatoryResourceGetTelescopeArraysError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservatoryResourceGetTelescopeArraysResponse,
    ObservatoryResourceGetTelescopeArraysError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/array",
      operationId: "observatoryResourceGetTelescopeArrays",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservatoryResourceGetTelescopeArrays(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservatoryResourceGetTelescopeArrayPathParams = {
  /**
   * @format int64
   */
  arrayId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type ObservatoryResourceGetTelescopeArrayError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetTelescopeArrayVariables = {
  pathParams: ObservatoryResourceGetTelescopeArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetTelescopeArray = (
  variables: ObservatoryResourceGetTelescopeArrayVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.TelescopeArray,
    ObservatoryResourceGetTelescopeArrayError,
    undefined,
    {},
    {},
    ObservatoryResourceGetTelescopeArrayPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/array/{arrayId}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservatoryResourceGetTelescopeArray = <
  TData = Schemas.TelescopeArray,
>(
  variables: ObservatoryResourceGetTelescopeArrayVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TelescopeArray,
      ObservatoryResourceGetTelescopeArrayError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.TelescopeArray,
    ObservatoryResourceGetTelescopeArrayError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/array/{arrayId}",
      operationId: "observatoryResourceGetTelescopeArray",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservatoryResourceGetTelescopeArray(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type BackendResourceGetObservatoryBackendsPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type BackendResourceGetObservatoryBackendsQueryParams = {
  name?: string;
};

export type BackendResourceGetObservatoryBackendsError =
  Fetcher.ErrorWrapper<undefined>;

export type BackendResourceGetObservatoryBackendsResponse =
  Schemas.ObjectIdentifier[];

export type BackendResourceGetObservatoryBackendsVariables = {
  pathParams: BackendResourceGetObservatoryBackendsPathParams;
  queryParams?: BackendResourceGetObservatoryBackendsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchBackendResourceGetObservatoryBackends = (
  variables: BackendResourceGetObservatoryBackendsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    BackendResourceGetObservatoryBackendsResponse,
    BackendResourceGetObservatoryBackendsError,
    undefined,
    {},
    BackendResourceGetObservatoryBackendsQueryParams,
    BackendResourceGetObservatoryBackendsPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backends",
    method: "get",
    ...variables,
    signal,
  });

export const useBackendResourceGetObservatoryBackends = <
  TData = BackendResourceGetObservatoryBackendsResponse,
>(
  variables: BackendResourceGetObservatoryBackendsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      BackendResourceGetObservatoryBackendsResponse,
      BackendResourceGetObservatoryBackendsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    BackendResourceGetObservatoryBackendsResponse,
    BackendResourceGetObservatoryBackendsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/backends",
      operationId: "backendResourceGetObservatoryBackends",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchBackendResourceGetObservatoryBackends(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type BackendResourceAddBackendPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type BackendResourceAddBackendError = Fetcher.ErrorWrapper<undefined>;

export type BackendResourceAddBackendVariables = {
  pathParams: BackendResourceAddBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchBackendResourceAddBackend = (
  variables: BackendResourceAddBackendVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    BackendResourceAddBackendError,
    undefined,
    {},
    {},
    BackendResourceAddBackendPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backends",
    method: "put",
    ...variables,
    signal,
  });

export const useBackendResourceAddBackend = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      BackendResourceAddBackendError,
      BackendResourceAddBackendVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    BackendResourceAddBackendError,
    BackendResourceAddBackendVariables
  >({
    mutationFn: (variables: BackendResourceAddBackendVariables) =>
      fetchBackendResourceAddBackend({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type BackendResourceCreateAndAddBackendPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type BackendResourceCreateAndAddBackendError =
  Fetcher.ErrorWrapper<undefined>;

export type BackendResourceCreateAndAddBackendVariables = {
  body?: Schemas.Backend;
  pathParams: BackendResourceCreateAndAddBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchBackendResourceCreateAndAddBackend = (
  variables: BackendResourceCreateAndAddBackendVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Backend,
    BackendResourceCreateAndAddBackendError,
    Schemas.Backend,
    {},
    {},
    BackendResourceCreateAndAddBackendPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backends",
    method: "post",
    ...variables,
    signal,
  });

export const useBackendResourceCreateAndAddBackend = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Backend,
      BackendResourceCreateAndAddBackendError,
      BackendResourceCreateAndAddBackendVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Backend,
    BackendResourceCreateAndAddBackendError,
    BackendResourceCreateAndAddBackendVariables
  >({
    mutationFn: (variables: BackendResourceCreateAndAddBackendVariables) =>
      fetchBackendResourceCreateAndAddBackend({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type BackendResourceGetObservatoryBackendPathParams = {
  /**
   * @format int64
   */
  backendId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type BackendResourceGetObservatoryBackendError =
  Fetcher.ErrorWrapper<undefined>;

export type BackendResourceGetObservatoryBackendVariables = {
  pathParams: BackendResourceGetObservatoryBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchBackendResourceGetObservatoryBackend = (
  variables: BackendResourceGetObservatoryBackendVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Backend,
    BackendResourceGetObservatoryBackendError,
    undefined,
    {},
    {},
    BackendResourceGetObservatoryBackendPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backends/{backendId}",
    method: "get",
    ...variables,
    signal,
  });

export const useBackendResourceGetObservatoryBackend = <
  TData = Schemas.Backend,
>(
  variables: BackendResourceGetObservatoryBackendVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Backend,
      BackendResourceGetObservatoryBackendError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Backend,
    BackendResourceGetObservatoryBackendError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/backends/{backendId}",
      operationId: "backendResourceGetObservatoryBackend",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchBackendResourceGetObservatoryBackend(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type BackendResourceReplaceBackendNamePathParams = {
  /**
   * @format int64
   */
  backendId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type BackendResourceReplaceBackendNameError =
  Fetcher.ErrorWrapper<undefined>;

export type BackendResourceReplaceBackendNameVariables = {
  pathParams: BackendResourceReplaceBackendNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchBackendResourceReplaceBackendName = (
  variables: BackendResourceReplaceBackendNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    BackendResourceReplaceBackendNameError,
    undefined,
    {},
    {},
    BackendResourceReplaceBackendNamePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backends/{backendId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useBackendResourceReplaceBackendName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      BackendResourceReplaceBackendNameError,
      BackendResourceReplaceBackendNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    BackendResourceReplaceBackendNameError,
    BackendResourceReplaceBackendNameVariables
  >({
    mutationFn: (variables: BackendResourceReplaceBackendNameVariables) =>
      fetchBackendResourceReplaceBackendName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type BackendResourceUpdateBackendParallelPathParams = {
  /**
   * @format int64
   */
  backendId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type BackendResourceUpdateBackendParallelError =
  Fetcher.ErrorWrapper<undefined>;

export type BackendResourceUpdateBackendParallelVariables = {
  body?: boolean;
  pathParams: BackendResourceUpdateBackendParallelPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchBackendResourceUpdateBackendParallel = (
  variables: BackendResourceUpdateBackendParallelVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    BackendResourceUpdateBackendParallelError,
    boolean,
    {},
    {},
    BackendResourceUpdateBackendParallelPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backends/{backendId}/parallel",
    method: "put",
    ...variables,
    signal,
  });

export const useBackendResourceUpdateBackendParallel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      BackendResourceUpdateBackendParallelError,
      BackendResourceUpdateBackendParallelVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    BackendResourceUpdateBackendParallelError,
    BackendResourceUpdateBackendParallelVariables
  >({
    mutationFn: (variables: BackendResourceUpdateBackendParallelVariables) =>
      fetchBackendResourceUpdateBackendParallel({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceGetObservatoryInstrumentsPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceGetObservatoryInstrumentsQueryParams = {
  name?: string;
};

export type InstrumentResourceGetObservatoryInstrumentsError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceGetObservatoryInstrumentsResponse =
  Schemas.ObjectIdentifier[];

export type InstrumentResourceGetObservatoryInstrumentsVariables = {
  pathParams: InstrumentResourceGetObservatoryInstrumentsPathParams;
  queryParams?: InstrumentResourceGetObservatoryInstrumentsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceGetObservatoryInstruments = (
  variables: InstrumentResourceGetObservatoryInstrumentsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    InstrumentResourceGetObservatoryInstrumentsResponse,
    InstrumentResourceGetObservatoryInstrumentsError,
    undefined,
    {},
    InstrumentResourceGetObservatoryInstrumentsQueryParams,
    InstrumentResourceGetObservatoryInstrumentsPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments",
    method: "get",
    ...variables,
    signal,
  });

export const useInstrumentResourceGetObservatoryInstruments = <
  TData = InstrumentResourceGetObservatoryInstrumentsResponse,
>(
  variables: InstrumentResourceGetObservatoryInstrumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      InstrumentResourceGetObservatoryInstrumentsResponse,
      InstrumentResourceGetObservatoryInstrumentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    InstrumentResourceGetObservatoryInstrumentsResponse,
    InstrumentResourceGetObservatoryInstrumentsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/instruments",
      operationId: "instrumentResourceGetObservatoryInstruments",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchInstrumentResourceGetObservatoryInstruments(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type InstrumentResourceCreateAndAddInstrumentToObservatoryPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceCreateAndAddInstrumentToObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceCreateAndAddInstrumentToObservatoryVariables = {
  body?: Schemas.Instrument;
  pathParams: InstrumentResourceCreateAndAddInstrumentToObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceCreateAndAddInstrumentToObservatory = (
  variables: InstrumentResourceCreateAndAddInstrumentToObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Instrument,
    InstrumentResourceCreateAndAddInstrumentToObservatoryError,
    Schemas.Instrument,
    {},
    {},
    InstrumentResourceCreateAndAddInstrumentToObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments",
    method: "post",
    ...variables,
    signal,
  });

export const useInstrumentResourceCreateAndAddInstrumentToObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Instrument,
      InstrumentResourceCreateAndAddInstrumentToObservatoryError,
      InstrumentResourceCreateAndAddInstrumentToObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Instrument,
    InstrumentResourceCreateAndAddInstrumentToObservatoryError,
    InstrumentResourceCreateAndAddInstrumentToObservatoryVariables
  >({
    mutationFn: (
      variables: InstrumentResourceCreateAndAddInstrumentToObservatoryVariables,
    ) =>
      fetchInstrumentResourceCreateAndAddInstrumentToObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceRemoveInstrumentFromObservatoryPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceRemoveInstrumentFromObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceRemoveInstrumentFromObservatoryVariables = {
  pathParams: InstrumentResourceRemoveInstrumentFromObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceRemoveInstrumentFromObservatory = (
  variables: InstrumentResourceRemoveInstrumentFromObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceRemoveInstrumentFromObservatoryError,
    undefined,
    {},
    {},
    InstrumentResourceRemoveInstrumentFromObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useInstrumentResourceRemoveInstrumentFromObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceRemoveInstrumentFromObservatoryError,
      InstrumentResourceRemoveInstrumentFromObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceRemoveInstrumentFromObservatoryError,
    InstrumentResourceRemoveInstrumentFromObservatoryVariables
  >({
    mutationFn: (
      variables: InstrumentResourceRemoveInstrumentFromObservatoryVariables,
    ) =>
      fetchInstrumentResourceRemoveInstrumentFromObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceReplaceInstrumentDescriptionPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentDescriptionError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentDescriptionVariables = {
  pathParams: InstrumentResourceReplaceInstrumentDescriptionPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentDescription = (
  variables: InstrumentResourceReplaceInstrumentDescriptionVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentDescriptionError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentDescriptionPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/description",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentDescription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentDescriptionError,
      InstrumentResourceReplaceInstrumentDescriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentDescriptionError,
    InstrumentResourceReplaceInstrumentDescriptionVariables
  >({
    mutationFn: (
      variables: InstrumentResourceReplaceInstrumentDescriptionVariables,
    ) =>
      fetchInstrumentResourceReplaceInstrumentDescription({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceReplaceInstrumentKindPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentKindError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentKindVariables = {
  pathParams: InstrumentResourceReplaceInstrumentKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentKind = (
  variables: InstrumentResourceReplaceInstrumentKindVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentKindError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentKindPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentKindError,
      InstrumentResourceReplaceInstrumentKindVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentKindError,
    InstrumentResourceReplaceInstrumentKindVariables
  >({
    mutationFn: (variables: InstrumentResourceReplaceInstrumentKindVariables) =>
      fetchInstrumentResourceReplaceInstrumentKind({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceReplaceInstrumentNamePathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentNameError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentNameVariables = {
  pathParams: InstrumentResourceReplaceInstrumentNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentName = (
  variables: InstrumentResourceReplaceInstrumentNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentNameError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentNamePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentNameError,
      InstrumentResourceReplaceInstrumentNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentNameError,
    InstrumentResourceReplaceInstrumentNameVariables
  >({
    mutationFn: (variables: InstrumentResourceReplaceInstrumentNameVariables) =>
      fetchInstrumentResourceReplaceInstrumentName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceReplaceInstrumentReferencePathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentReferenceError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentReferenceVariables = {
  pathParams: InstrumentResourceReplaceInstrumentReferencePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentReference = (
  variables: InstrumentResourceReplaceInstrumentReferenceVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentReferenceError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentReferencePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/reference",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentReference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentReferenceError,
      InstrumentResourceReplaceInstrumentReferenceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentReferenceError,
    InstrumentResourceReplaceInstrumentReferenceVariables
  >({
    mutationFn: (
      variables: InstrumentResourceReplaceInstrumentReferenceVariables,
    ) =>
      fetchInstrumentResourceReplaceInstrumentReference({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InstrumentResourceReplaceInstrumentWikiIdPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentWikiIdVariables = {
  pathParams: InstrumentResourceReplaceInstrumentWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentWikiId = (
  variables: InstrumentResourceReplaceInstrumentWikiIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentWikiIdError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentWikiIdPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentWikiIdError,
      InstrumentResourceReplaceInstrumentWikiIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentWikiIdError,
    InstrumentResourceReplaceInstrumentWikiIdVariables
  >({
    mutationFn: (
      variables: InstrumentResourceReplaceInstrumentWikiIdVariables,
    ) =>
      fetchInstrumentResourceReplaceInstrumentWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceGetObservatoryTelescopesPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type TelescopeResourceGetObservatoryTelescopesQueryParams = {
  name?: string;
};

export type TelescopeResourceGetObservatoryTelescopesError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceGetObservatoryTelescopesResponse =
  Schemas.ObjectIdentifier[];

export type TelescopeResourceGetObservatoryTelescopesVariables = {
  pathParams: TelescopeResourceGetObservatoryTelescopesPathParams;
  queryParams?: TelescopeResourceGetObservatoryTelescopesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceGetObservatoryTelescopes = (
  variables: TelescopeResourceGetObservatoryTelescopesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    TelescopeResourceGetObservatoryTelescopesResponse,
    TelescopeResourceGetObservatoryTelescopesError,
    undefined,
    {},
    TelescopeResourceGetObservatoryTelescopesQueryParams,
    TelescopeResourceGetObservatoryTelescopesPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes",
    method: "get",
    ...variables,
    signal,
  });

export const useTelescopeResourceGetObservatoryTelescopes = <
  TData = TelescopeResourceGetObservatoryTelescopesResponse,
>(
  variables: TelescopeResourceGetObservatoryTelescopesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TelescopeResourceGetObservatoryTelescopesResponse,
      TelescopeResourceGetObservatoryTelescopesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    TelescopeResourceGetObservatoryTelescopesResponse,
    TelescopeResourceGetObservatoryTelescopesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/telescopes",
      operationId: "telescopeResourceGetObservatoryTelescopes",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTelescopeResourceGetObservatoryTelescopes(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TelescopeResourceCreateAndAddTelescopeToObservatoryPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type TelescopeResourceCreateAndAddTelescopeToObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceCreateAndAddTelescopeToObservatoryVariables = {
  body?: Schemas.Telescope;
  pathParams: TelescopeResourceCreateAndAddTelescopeToObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceCreateAndAddTelescopeToObservatory = (
  variables: TelescopeResourceCreateAndAddTelescopeToObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Telescope,
    TelescopeResourceCreateAndAddTelescopeToObservatoryError,
    Schemas.Telescope,
    {},
    {},
    TelescopeResourceCreateAndAddTelescopeToObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes",
    method: "post",
    ...variables,
    signal,
  });

export const useTelescopeResourceCreateAndAddTelescopeToObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Telescope,
      TelescopeResourceCreateAndAddTelescopeToObservatoryError,
      TelescopeResourceCreateAndAddTelescopeToObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Telescope,
    TelescopeResourceCreateAndAddTelescopeToObservatoryError,
    TelescopeResourceCreateAndAddTelescopeToObservatoryVariables
  >({
    mutationFn: (
      variables: TelescopeResourceCreateAndAddTelescopeToObservatoryVariables,
    ) =>
      fetchTelescopeResourceCreateAndAddTelescopeToObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceGetTelescopePathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceGetTelescopeError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceGetTelescopeVariables = {
  pathParams: TelescopeResourceGetTelescopePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceGetTelescope = (
  variables: TelescopeResourceGetTelescopeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Telescope,
    TelescopeResourceGetTelescopeError,
    undefined,
    {},
    {},
    TelescopeResourceGetTelescopePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useTelescopeResourceGetTelescope = <TData = Schemas.Telescope,>(
  variables: TelescopeResourceGetTelescopeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Telescope,
      TelescopeResourceGetTelescopeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Telescope,
    TelescopeResourceGetTelescopeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}",
      operationId: "telescopeResourceGetTelescope",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTelescopeResourceGetTelescope(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TelescopeResourceRemoveTelescopeFromObservatoryPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceRemoveTelescopeFromObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceRemoveTelescopeFromObservatoryVariables = {
  pathParams: TelescopeResourceRemoveTelescopeFromObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceRemoveTelescopeFromObservatory = (
  variables: TelescopeResourceRemoveTelescopeFromObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceRemoveTelescopeFromObservatoryError,
    undefined,
    {},
    {},
    TelescopeResourceRemoveTelescopeFromObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useTelescopeResourceRemoveTelescopeFromObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceRemoveTelescopeFromObservatoryError,
      TelescopeResourceRemoveTelescopeFromObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceRemoveTelescopeFromObservatoryError,
    TelescopeResourceRemoveTelescopeFromObservatoryVariables
  >({
    mutationFn: (
      variables: TelescopeResourceRemoveTelescopeFromObservatoryVariables,
    ) =>
      fetchTelescopeResourceRemoveTelescopeFromObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeLocationPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationVariables = {
  body?: Schemas.CartesianPoint;
  pathParams: TelescopeResourceUpdateTelescopeLocationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocation = (
  variables: TelescopeResourceUpdateTelescopeLocationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationError,
    Schemas.CartesianPoint,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationError,
      TelescopeResourceUpdateTelescopeLocationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationError,
    TelescopeResourceUpdateTelescopeLocationVariables
  >({
    mutationFn: (
      variables: TelescopeResourceUpdateTelescopeLocationVariables,
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocation({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeLocationCoordinateSystemPathParams =
  {
    /**
     * @format int64
     */
    observatoryId: number;
    /**
     * @format int64
     */
    telescopeId: number;
  };

export type TelescopeResourceUpdateTelescopeLocationCoordinateSystemError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables =
  {
    pathParams: TelescopeResourceUpdateTelescopeLocationCoordinateSystemPathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationCoordinateSystem = (
  variables: TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemError,
    undefined,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/coordinateSystem",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationCoordinateSystem = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationCoordinateSystemError,
      TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemError,
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables
  >({
    mutationFn: (
      variables: TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables,
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocationCoordinateSystem({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeLocationXPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationXError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationXVariables = {
  body?: Schemas.RealQuantity;
  pathParams: TelescopeResourceUpdateTelescopeLocationXPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationX = (
  variables: TelescopeResourceUpdateTelescopeLocationXVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXError,
    Schemas.RealQuantity,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationXPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/x",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationX = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationXError,
      TelescopeResourceUpdateTelescopeLocationXVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXError,
    TelescopeResourceUpdateTelescopeLocationXVariables
  >({
    mutationFn: (
      variables: TelescopeResourceUpdateTelescopeLocationXVariables,
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocationX({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeLocationXYZPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationXYZError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationXYZRequestBody =
  Schemas.RealQuantity[];

export type TelescopeResourceUpdateTelescopeLocationXYZVariables = {
  body?: TelescopeResourceUpdateTelescopeLocationXYZRequestBody;
  pathParams: TelescopeResourceUpdateTelescopeLocationXYZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationXYZ = (
  variables: TelescopeResourceUpdateTelescopeLocationXYZVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXYZError,
    TelescopeResourceUpdateTelescopeLocationXYZRequestBody,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationXYZPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/xyz",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationXYZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationXYZError,
      TelescopeResourceUpdateTelescopeLocationXYZVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXYZError,
    TelescopeResourceUpdateTelescopeLocationXYZVariables
  >({
    mutationFn: (
      variables: TelescopeResourceUpdateTelescopeLocationXYZVariables,
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocationXYZ({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeLocationYPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationYError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationYVariables = {
  body?: Schemas.RealQuantity;
  pathParams: TelescopeResourceUpdateTelescopeLocationYPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationY = (
  variables: TelescopeResourceUpdateTelescopeLocationYVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationYError,
    Schemas.RealQuantity,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationYPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/y",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationY = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationYError,
      TelescopeResourceUpdateTelescopeLocationYVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationYError,
    TelescopeResourceUpdateTelescopeLocationYVariables
  >({
    mutationFn: (
      variables: TelescopeResourceUpdateTelescopeLocationYVariables,
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocationY({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeLocationZPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationZError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationZVariables = {
  body?: Schemas.RealQuantity;
  pathParams: TelescopeResourceUpdateTelescopeLocationZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationZ = (
  variables: TelescopeResourceUpdateTelescopeLocationZVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationZError,
    Schemas.RealQuantity,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationZPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/z",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationZError,
      TelescopeResourceUpdateTelescopeLocationZVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationZError,
    TelescopeResourceUpdateTelescopeLocationZVariables
  >({
    mutationFn: (
      variables: TelescopeResourceUpdateTelescopeLocationZVariables,
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocationZ({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeNamePathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeNameError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeNameVariables = {
  pathParams: TelescopeResourceUpdateTelescopeNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeName = (
  variables: TelescopeResourceUpdateTelescopeNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeNameError,
    undefined,
    {},
    {},
    TelescopeResourceUpdateTelescopeNamePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeNameError,
      TelescopeResourceUpdateTelescopeNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeNameError,
    TelescopeResourceUpdateTelescopeNameVariables
  >({
    mutationFn: (variables: TelescopeResourceUpdateTelescopeNameVariables) =>
      fetchTelescopeResourceUpdateTelescopeName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TelescopeResourceUpdateTelescopeWikiIdPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeWikiIdVariables = {
  pathParams: TelescopeResourceUpdateTelescopeWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeWikiId = (
  variables: TelescopeResourceUpdateTelescopeWikiIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeWikiIdError,
    undefined,
    {},
    {},
    TelescopeResourceUpdateTelescopeWikiIdPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeWikiIdError,
      TelescopeResourceUpdateTelescopeWikiIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeWikiIdError,
    TelescopeResourceUpdateTelescopeWikiIdVariables
  >({
    mutationFn: (variables: TelescopeResourceUpdateTelescopeWikiIdVariables) =>
      fetchTelescopeResourceUpdateTelescopeWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrganizationResourceGetOrganizationsError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceGetOrganizationsResponse =
  Schemas.ObjectIdentifier[];

export type OrganizationResourceGetOrganizationsVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceGetOrganizations = (
  variables: OrganizationResourceGetOrganizationsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    OrganizationResourceGetOrganizationsResponse,
    OrganizationResourceGetOrganizationsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "get", ...variables, signal });

export const useOrganizationResourceGetOrganizations = <
  TData = OrganizationResourceGetOrganizationsResponse,
>(
  variables: OrganizationResourceGetOrganizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrganizationResourceGetOrganizationsResponse,
      OrganizationResourceGetOrganizationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    OrganizationResourceGetOrganizationsResponse,
    OrganizationResourceGetOrganizationsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/organizations",
      operationId: "organizationResourceGetOrganizations",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchOrganizationResourceGetOrganizations(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type OrganizationResourceCreateOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceCreateOrganizationVariables = {
  body?: Schemas.Organization;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceCreateOrganization = (
  variables: OrganizationResourceCreateOrganizationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Organization,
    OrganizationResourceCreateOrganizationError,
    Schemas.Organization,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "post", ...variables, signal });

export const useOrganizationResourceCreateOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Organization,
      OrganizationResourceCreateOrganizationError,
      OrganizationResourceCreateOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Organization,
    OrganizationResourceCreateOrganizationError,
    OrganizationResourceCreateOrganizationVariables
  >({
    mutationFn: (variables: OrganizationResourceCreateOrganizationVariables) =>
      fetchOrganizationResourceCreateOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrganizationResourceGetOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceGetOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceGetOrganizationVariables = {
  pathParams: OrganizationResourceGetOrganizationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceGetOrganization = (
  variables: OrganizationResourceGetOrganizationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Organization,
    OrganizationResourceGetOrganizationError,
    undefined,
    {},
    {},
    OrganizationResourceGetOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useOrganizationResourceGetOrganization = <
  TData = Schemas.Organization,
>(
  variables: OrganizationResourceGetOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Organization,
      OrganizationResourceGetOrganizationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Organization,
    OrganizationResourceGetOrganizationError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/organizations/{id}",
      operationId: "organizationResourceGetOrganization",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchOrganizationResourceGetOrganization(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type OrganizationResourceDeleteOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceDeleteOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceDeleteOrganizationVariables = {
  pathParams: OrganizationResourceDeleteOrganizationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceDeleteOrganization = (
  variables: OrganizationResourceDeleteOrganizationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceDeleteOrganizationError,
    undefined,
    {},
    {},
    OrganizationResourceDeleteOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useOrganizationResourceDeleteOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceDeleteOrganizationError,
      OrganizationResourceDeleteOrganizationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceDeleteOrganizationError,
    OrganizationResourceDeleteOrganizationVariables
  >({
    mutationFn: (variables: OrganizationResourceDeleteOrganizationVariables) =>
      fetchOrganizationResourceDeleteOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrganizationResourceUpdateOrganisationAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationAddressError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationAddressVariables = {
  pathParams: OrganizationResourceUpdateOrganisationAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationAddress = (
  variables: OrganizationResourceUpdateOrganisationAddressVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationAddressError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationAddressPathParams
  >({
    url: "/pst/api/organizations/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationAddressError,
      OrganizationResourceUpdateOrganisationAddressVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationAddressError,
    OrganizationResourceUpdateOrganisationAddressVariables
  >({
    mutationFn: (
      variables: OrganizationResourceUpdateOrganisationAddressVariables,
    ) =>
      fetchOrganizationResourceUpdateOrganisationAddress({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrganizationResourceUpdateOrganisationIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationIvoIdError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationIvoIdVariables = {
  pathParams: OrganizationResourceUpdateOrganisationIvoIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationIvoId = (
  variables: OrganizationResourceUpdateOrganisationIvoIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationIvoIdError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationIvoIdPathParams
  >({
    url: "/pst/api/organizations/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationIvoId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationIvoIdError,
      OrganizationResourceUpdateOrganisationIvoIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationIvoIdError,
    OrganizationResourceUpdateOrganisationIvoIdVariables
  >({
    mutationFn: (
      variables: OrganizationResourceUpdateOrganisationIvoIdVariables,
    ) =>
      fetchOrganizationResourceUpdateOrganisationIvoId({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrganizationResourceUpdateOrganisationNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationNameError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationNameVariables = {
  pathParams: OrganizationResourceUpdateOrganisationNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationName = (
  variables: OrganizationResourceUpdateOrganisationNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationNameError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationNamePathParams
  >({
    url: "/pst/api/organizations/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationNameError,
      OrganizationResourceUpdateOrganisationNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationNameError,
    OrganizationResourceUpdateOrganisationNameVariables
  >({
    mutationFn: (
      variables: OrganizationResourceUpdateOrganisationNameVariables,
    ) =>
      fetchOrganizationResourceUpdateOrganisationName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type OrganizationResourceUpdateOrganisationWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationWikiIdVariables = {
  pathParams: OrganizationResourceUpdateOrganisationWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationWikiId = (
  variables: OrganizationResourceUpdateOrganisationWikiIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationWikiIdError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationWikiIdPathParams
  >({
    url: "/pst/api/organizations/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationWikiIdError,
      OrganizationResourceUpdateOrganisationWikiIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationWikiIdError,
    OrganizationResourceUpdateOrganisationWikiIdVariables
  >({
    mutationFn: (
      variables: OrganizationResourceUpdateOrganisationWikiIdVariables,
    ) =>
      fetchOrganizationResourceUpdateOrganisationWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PersonResourceGetPeopleQueryParams = {
  name?: string;
};

export type PersonResourceGetPeopleError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceGetPeopleResponse = Schemas.ObjectIdentifier[];

export type PersonResourceGetPeopleVariables = {
  queryParams?: PersonResourceGetPeopleQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceGetPeople = (
  variables: PersonResourceGetPeopleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    PersonResourceGetPeopleResponse,
    PersonResourceGetPeopleError,
    undefined,
    {},
    PersonResourceGetPeopleQueryParams,
    {}
  >({ url: "/pst/api/people", method: "get", ...variables, signal });

export const usePersonResourceGetPeople = <
  TData = PersonResourceGetPeopleResponse,
>(
  variables: PersonResourceGetPeopleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PersonResourceGetPeopleResponse,
      PersonResourceGetPeopleError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    PersonResourceGetPeopleResponse,
    PersonResourceGetPeopleError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/people",
      operationId: "personResourceGetPeople",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchPersonResourceGetPeople({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type PersonResourceCreatePersonError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceCreatePersonVariables = {
  body?: Schemas.Person;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceCreatePerson = (
  variables: PersonResourceCreatePersonVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Person,
    PersonResourceCreatePersonError,
    Schemas.Person,
    {},
    {},
    {}
  >({ url: "/pst/api/people", method: "post", ...variables, signal });

export const usePersonResourceCreatePerson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Person,
      PersonResourceCreatePersonError,
      PersonResourceCreatePersonVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Person,
    PersonResourceCreatePersonError,
    PersonResourceCreatePersonVariables
  >({
    mutationFn: (variables: PersonResourceCreatePersonVariables) =>
      fetchPersonResourceCreatePerson({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PersonResourceGetPersonByEmailQueryParams = {
  email?: string;
};

export type PersonResourceGetPersonByEmailError =
  Fetcher.ErrorWrapper<undefined>;

export type PersonResourceGetPersonByEmailVariables = {
  queryParams?: PersonResourceGetPersonByEmailQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceGetPersonByEmail = (
  variables: PersonResourceGetPersonByEmailVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObjectIdentifier,
    PersonResourceGetPersonByEmailError,
    undefined,
    {},
    PersonResourceGetPersonByEmailQueryParams,
    {}
  >({
    url: "/pst/api/people/email/{email}",
    method: "get",
    ...variables,
    signal,
  });

export const usePersonResourceGetPersonByEmail = <
  TData = Schemas.ObjectIdentifier,
>(
  variables: PersonResourceGetPersonByEmailVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObjectIdentifier,
      PersonResourceGetPersonByEmailError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObjectIdentifier,
    PersonResourceGetPersonByEmailError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/people/email/{email}",
      operationId: "personResourceGetPersonByEmail",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchPersonResourceGetPersonByEmail(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type PersonResourceGetPersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceGetPersonError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceGetPersonVariables = {
  pathParams: PersonResourceGetPersonPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceGetPerson = (
  variables: PersonResourceGetPersonVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Person,
    PersonResourceGetPersonError,
    undefined,
    {},
    {},
    PersonResourceGetPersonPathParams
  >({ url: "/pst/api/people/{id}", method: "get", ...variables, signal });

export const usePersonResourceGetPerson = <TData = Schemas.Person,>(
  variables: PersonResourceGetPersonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Person,
      PersonResourceGetPersonError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Person,
    PersonResourceGetPersonError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/people/{id}",
      operationId: "personResourceGetPerson",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchPersonResourceGetPerson({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type PersonResourceDeletePersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceDeletePersonError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceDeletePersonVariables = {
  pathParams: PersonResourceDeletePersonPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceDeletePerson = (
  variables: PersonResourceDeletePersonVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    PersonResourceDeletePersonError,
    undefined,
    {},
    {},
    PersonResourceDeletePersonPathParams
  >({ url: "/pst/api/people/{id}", method: "delete", ...variables, signal });

export const usePersonResourceDeletePerson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceDeletePersonError,
      PersonResourceDeletePersonVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceDeletePersonError,
    PersonResourceDeletePersonVariables
  >({
    mutationFn: (variables: PersonResourceDeletePersonVariables) =>
      fetchPersonResourceDeletePerson({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PersonResourceUpdateEMailPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateEMailError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateEMailVariables = {
  pathParams: PersonResourceUpdateEMailPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateEMail = (
  variables: PersonResourceUpdateEMailVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateEMailError,
    undefined,
    {},
    {},
    PersonResourceUpdateEMailPathParams
  >({ url: "/pst/api/people/{id}/eMail", method: "put", ...variables, signal });

export const usePersonResourceUpdateEMail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateEMailError,
      PersonResourceUpdateEMailVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateEMailError,
    PersonResourceUpdateEMailVariables
  >({
    mutationFn: (variables: PersonResourceUpdateEMailVariables) =>
      fetchPersonResourceUpdateEMail({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PersonResourceUpdateFullNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateFullNameError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateFullNameVariables = {
  pathParams: PersonResourceUpdateFullNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateFullName = (
  variables: PersonResourceUpdateFullNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateFullNameError,
    undefined,
    {},
    {},
    PersonResourceUpdateFullNamePathParams
  >({
    url: "/pst/api/people/{id}/fullName",
    method: "put",
    ...variables,
    signal,
  });

export const usePersonResourceUpdateFullName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateFullNameError,
      PersonResourceUpdateFullNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateFullNameError,
    PersonResourceUpdateFullNameVariables
  >({
    mutationFn: (variables: PersonResourceUpdateFullNameVariables) =>
      fetchPersonResourceUpdateFullName({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PersonResourceUpdateHomeInstitutePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateHomeInstituteError =
  Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateHomeInstituteVariables = {
  body?: Schemas.Organization;
  pathParams: PersonResourceUpdateHomeInstitutePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateHomeInstitute = (
  variables: PersonResourceUpdateHomeInstituteVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateHomeInstituteError,
    Schemas.Organization,
    {},
    {},
    PersonResourceUpdateHomeInstitutePathParams
  >({
    url: "/pst/api/people/{id}/homeInstitute",
    method: "put",
    ...variables,
    signal,
  });

export const usePersonResourceUpdateHomeInstitute = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateHomeInstituteError,
      PersonResourceUpdateHomeInstituteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateHomeInstituteError,
    PersonResourceUpdateHomeInstituteVariables
  >({
    mutationFn: (variables: PersonResourceUpdateHomeInstituteVariables) =>
      fetchPersonResourceUpdateHomeInstitute({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type PersonResourceUpdateOrcidIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateOrcidIdError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateOrcidIdVariables = {
  pathParams: PersonResourceUpdateOrcidIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateOrcidId = (
  variables: PersonResourceUpdateOrcidIdVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateOrcidIdError,
    undefined,
    {},
    {},
    PersonResourceUpdateOrcidIdPathParams
  >({
    url: "/pst/api/people/{id}/orcidId",
    method: "put",
    ...variables,
    signal,
  });

export const usePersonResourceUpdateOrcidId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateOrcidIdError,
      PersonResourceUpdateOrcidIdVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateOrcidIdError,
    PersonResourceUpdateOrcidIdVariables
  >({
    mutationFn: (variables: PersonResourceUpdateOrcidIdVariables) =>
      fetchPersonResourceUpdateOrcidId({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PersonResourceCreatePersonFromKeycloakPathParams = {
  keycloakUid: string;
};

export type PersonResourceCreatePersonFromKeycloakError =
  Fetcher.ErrorWrapper<undefined>;

export type PersonResourceCreatePersonFromKeycloakVariables = {
  body?: Schemas.Person;
  pathParams: PersonResourceCreatePersonFromKeycloakPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceCreatePersonFromKeycloak = (
  variables: PersonResourceCreatePersonFromKeycloakVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Person,
    PersonResourceCreatePersonFromKeycloakError,
    Schemas.Person,
    {},
    {},
    PersonResourceCreatePersonFromKeycloakPathParams
  >({
    url: "/pst/api/people/{keycloakUid}",
    method: "post",
    ...variables,
    signal,
  });

export const usePersonResourceCreatePersonFromKeycloak = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Person,
      PersonResourceCreatePersonFromKeycloakError,
      PersonResourceCreatePersonFromKeycloakVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Person,
    PersonResourceCreatePersonFromKeycloakError,
    PersonResourceCreatePersonFromKeycloakVariables
  >({
    mutationFn: (variables: PersonResourceCreatePersonFromKeycloakVariables) =>
      fetchPersonResourceCreatePersonFromKeycloak({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetProposalCyclesQueryParams = {
  includeClosed?: boolean;
  /**
   * @format int64
   */
  observatoryId?: number;
};

export type ProposalCyclesResourceGetProposalCyclesError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCyclesResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetProposalCyclesVariables = {
  queryParams?: ProposalCyclesResourceGetProposalCyclesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycles = (
  variables: ProposalCyclesResourceGetProposalCyclesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetProposalCyclesResponse,
    ProposalCyclesResourceGetProposalCyclesError,
    undefined,
    {},
    ProposalCyclesResourceGetProposalCyclesQueryParams,
    {}
  >({ url: "/pst/api/proposalCycles", method: "get", ...variables, signal });

export const useProposalCyclesResourceGetProposalCycles = <
  TData = ProposalCyclesResourceGetProposalCyclesResponse,
>(
  variables: ProposalCyclesResourceGetProposalCyclesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetProposalCyclesResponse,
      ProposalCyclesResourceGetProposalCyclesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetProposalCyclesResponse,
    ProposalCyclesResourceGetProposalCyclesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles",
      operationId: "proposalCyclesResourceGetProposalCycles",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycles(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceCreateProposalCycleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceCreateProposalCycleVariables = {
  body?: Schemas.ProposalCycle;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceCreateProposalCycle = (
  variables: ProposalCyclesResourceCreateProposalCycleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalCycle,
    ProposalCyclesResourceCreateProposalCycleError,
    Schemas.ProposalCycle,
    {},
    {},
    {}
  >({ url: "/pst/api/proposalCycles", method: "post", ...variables, signal });

export const useProposalCyclesResourceCreateProposalCycle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalCycle,
      ProposalCyclesResourceCreateProposalCycleError,
      ProposalCyclesResourceCreateProposalCycleVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalCycle,
    ProposalCyclesResourceCreateProposalCycleError,
    ProposalCyclesResourceCreateProposalCycleVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceCreateProposalCycleVariables,
    ) =>
      fetchProposalCyclesResourceCreateProposalCycle({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetMyTACMemberProposalCyclesQueryParams = {
  includeClosed?: boolean;
  /**
   * @format int64
   */
  observatoryId?: number;
};

export type ProposalCyclesResourceGetMyTACMemberProposalCyclesError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetMyTACMemberProposalCyclesResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetMyTACMemberProposalCyclesVariables = {
  queryParams?: ProposalCyclesResourceGetMyTACMemberProposalCyclesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetMyTACMemberProposalCycles = (
  variables: ProposalCyclesResourceGetMyTACMemberProposalCyclesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetMyTACMemberProposalCyclesResponse,
    ProposalCyclesResourceGetMyTACMemberProposalCyclesError,
    undefined,
    {},
    ProposalCyclesResourceGetMyTACMemberProposalCyclesQueryParams,
    {}
  >({
    url: "/pst/api/proposalCycles/MyTACCycles",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetMyTACMemberProposalCycles = <
  TData = ProposalCyclesResourceGetMyTACMemberProposalCyclesResponse,
>(
  variables: ProposalCyclesResourceGetMyTACMemberProposalCyclesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetMyTACMemberProposalCyclesResponse,
      ProposalCyclesResourceGetMyTACMemberProposalCyclesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetMyTACMemberProposalCyclesResponse,
    ProposalCyclesResourceGetMyTACMemberProposalCyclesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/MyTACCycles",
      operationId: "proposalCyclesResourceGetMyTACMemberProposalCycles",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetMyTACMemberProposalCycles(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceGetProposalCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetProposalCycleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCycleVariables = {
  pathParams: ProposalCyclesResourceGetProposalCyclePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycle = (
  variables: ProposalCyclesResourceGetProposalCycleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalCycle,
    ProposalCyclesResourceGetProposalCycleError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetProposalCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetProposalCycle = <
  TData = Schemas.ProposalCycle,
>(
  variables: ProposalCyclesResourceGetProposalCycleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalCycle,
      ProposalCyclesResourceGetProposalCycleError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalCycle,
    ProposalCyclesResourceGetProposalCycleError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}",
      operationId: "proposalCyclesResourceGetProposalCycle",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycle(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TACResourceGetTACPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type TACResourceGetTACError = Fetcher.ErrorWrapper<undefined>;

export type TACResourceGetTACVariables = {
  pathParams: TACResourceGetTACPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTACResourceGetTAC = (
  variables: TACResourceGetTACVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Tac,
    TACResourceGetTACError,
    undefined,
    {},
    {},
    TACResourceGetTACPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC",
    method: "get",
    ...variables,
    signal,
  });

export const useTACResourceGetTAC = <TData = Schemas.Tac,>(
  variables: TACResourceGetTACVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Tac, TACResourceGetTACError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Tac, TACResourceGetTACError, TData>({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/TAC",
      operationId: "tACResourceGetTAC",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTACResourceGetTAC({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type TACResourceGetCommitteeMembersPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type TACResourceGetCommitteeMembersQueryParams = {
  memberRole?: Schemas.TacRole;
  personName?: string;
};

export type TACResourceGetCommitteeMembersError =
  Fetcher.ErrorWrapper<undefined>;

export type TACResourceGetCommitteeMembersResponse = Schemas.ObjectIdentifier[];

export type TACResourceGetCommitteeMembersVariables = {
  pathParams: TACResourceGetCommitteeMembersPathParams;
  queryParams?: TACResourceGetCommitteeMembersQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTACResourceGetCommitteeMembers = (
  variables: TACResourceGetCommitteeMembersVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    TACResourceGetCommitteeMembersResponse,
    TACResourceGetCommitteeMembersError,
    undefined,
    {},
    TACResourceGetCommitteeMembersQueryParams,
    TACResourceGetCommitteeMembersPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC/members",
    method: "get",
    ...variables,
    signal,
  });

export const useTACResourceGetCommitteeMembers = <
  TData = TACResourceGetCommitteeMembersResponse,
>(
  variables: TACResourceGetCommitteeMembersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TACResourceGetCommitteeMembersResponse,
      TACResourceGetCommitteeMembersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    TACResourceGetCommitteeMembersResponse,
    TACResourceGetCommitteeMembersError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/TAC/members",
      operationId: "tACResourceGetCommitteeMembers",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTACResourceGetCommitteeMembers(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TACResourceAddCommitteeMemberPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type TACResourceAddCommitteeMemberError =
  Fetcher.ErrorWrapper<undefined>;

export type TACResourceAddCommitteeMemberVariables = {
  body?: Schemas.CommitteeMember;
  pathParams: TACResourceAddCommitteeMemberPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTACResourceAddCommitteeMember = (
  variables: TACResourceAddCommitteeMemberVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.CommitteeMember,
    TACResourceAddCommitteeMemberError,
    Schemas.CommitteeMember,
    {},
    {},
    TACResourceAddCommitteeMemberPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC/members",
    method: "post",
    ...variables,
    signal,
  });

export const useTACResourceAddCommitteeMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitteeMember,
      TACResourceAddCommitteeMemberError,
      TACResourceAddCommitteeMemberVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.CommitteeMember,
    TACResourceAddCommitteeMemberError,
    TACResourceAddCommitteeMemberVariables
  >({
    mutationFn: (variables: TACResourceAddCommitteeMemberVariables) =>
      fetchTACResourceAddCommitteeMember({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TACResourceGetCommitteeMemberPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  memberId: number;
};

export type TACResourceGetCommitteeMemberError =
  Fetcher.ErrorWrapper<undefined>;

export type TACResourceGetCommitteeMemberVariables = {
  pathParams: TACResourceGetCommitteeMemberPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTACResourceGetCommitteeMember = (
  variables: TACResourceGetCommitteeMemberVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.CommitteeMember,
    TACResourceGetCommitteeMemberError,
    undefined,
    {},
    {},
    TACResourceGetCommitteeMemberPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC/members/{memberId}",
    method: "get",
    ...variables,
    signal,
  });

export const useTACResourceGetCommitteeMember = <
  TData = Schemas.CommitteeMember,
>(
  variables: TACResourceGetCommitteeMemberVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CommitteeMember,
      TACResourceGetCommitteeMemberError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.CommitteeMember,
    TACResourceGetCommitteeMemberError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/TAC/members/{memberId}",
      operationId: "tACResourceGetCommitteeMember",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTACResourceGetCommitteeMember(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TACResourceRemoveCommitteeMemberPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  memberId: number;
};

export type TACResourceRemoveCommitteeMemberError =
  Fetcher.ErrorWrapper<undefined>;

export type TACResourceRemoveCommitteeMemberVariables = {
  pathParams: TACResourceRemoveCommitteeMemberPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTACResourceRemoveCommitteeMember = (
  variables: TACResourceRemoveCommitteeMemberVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TACResourceRemoveCommitteeMemberError,
    undefined,
    {},
    {},
    TACResourceRemoveCommitteeMemberPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC/members/{memberId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useTACResourceRemoveCommitteeMember = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TACResourceRemoveCommitteeMemberError,
      TACResourceRemoveCommitteeMemberVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TACResourceRemoveCommitteeMemberError,
    TACResourceRemoveCommitteeMemberVariables
  >({
    mutationFn: (variables: TACResourceRemoveCommitteeMemberVariables) =>
      fetchTACResourceRemoveCommitteeMember({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TACResourceReplaceRolePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  memberId: number;
};

export type TACResourceReplaceRoleError = Fetcher.ErrorWrapper<undefined>;

export type TACResourceReplaceRoleVariables = {
  body?: Schemas.TacRole;
  pathParams: TACResourceReplaceRolePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTACResourceReplaceRole = (
  variables: TACResourceReplaceRoleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.CommitteeMember,
    TACResourceReplaceRoleError,
    Schemas.TacRole,
    {},
    {},
    TACResourceReplaceRolePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC/members/{memberId}/role",
    method: "put",
    ...variables,
    signal,
  });

export const useTACResourceReplaceRole = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CommitteeMember,
      TACResourceReplaceRoleError,
      TACResourceReplaceRoleVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.CommitteeMember,
    TACResourceReplaceRoleError,
    TACResourceReplaceRoleVariables
  >({
    mutationFn: (variables: TACResourceReplaceRoleVariables) =>
      fetchTACResourceReplaceRole({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AllocatedProposalResourceGetAllocatedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedProposalResourceGetAllocatedProposalsQueryParams = {
  title?: string;
};

export type AllocatedProposalResourceGetAllocatedProposalsError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedProposalResourceGetAllocatedProposalsResponse =
  Schemas.ObjectIdentifier[];

export type AllocatedProposalResourceGetAllocatedProposalsVariables = {
  pathParams: AllocatedProposalResourceGetAllocatedProposalsPathParams;
  queryParams?: AllocatedProposalResourceGetAllocatedProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedProposalResourceGetAllocatedProposals = (
  variables: AllocatedProposalResourceGetAllocatedProposalsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    AllocatedProposalResourceGetAllocatedProposalsResponse,
    AllocatedProposalResourceGetAllocatedProposalsError,
    undefined,
    {},
    AllocatedProposalResourceGetAllocatedProposalsQueryParams,
    AllocatedProposalResourceGetAllocatedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals",
    method: "get",
    ...variables,
    signal,
  });

export const useAllocatedProposalResourceGetAllocatedProposals = <
  TData = AllocatedProposalResourceGetAllocatedProposalsResponse,
>(
  variables: AllocatedProposalResourceGetAllocatedProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AllocatedProposalResourceGetAllocatedProposalsResponse,
      AllocatedProposalResourceGetAllocatedProposalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    AllocatedProposalResourceGetAllocatedProposalsResponse,
    AllocatedProposalResourceGetAllocatedProposalsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals",
      operationId: "allocatedProposalResourceGetAllocatedProposals",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAllocatedProposalResourceGetAllocatedProposals(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AllocatedProposalResourceAllocateProposalToCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedProposalResourceAllocateProposalToCycleError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedProposalResourceAllocateProposalToCycleVariables = {
  pathParams: AllocatedProposalResourceAllocateProposalToCyclePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedProposalResourceAllocateProposalToCycle = (
  variables: AllocatedProposalResourceAllocateProposalToCycleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalSynopsis,
    AllocatedProposalResourceAllocateProposalToCycleError,
    undefined,
    {},
    {},
    AllocatedProposalResourceAllocateProposalToCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useAllocatedProposalResourceAllocateProposalToCycle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalSynopsis,
      AllocatedProposalResourceAllocateProposalToCycleError,
      AllocatedProposalResourceAllocateProposalToCycleVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalSynopsis,
    AllocatedProposalResourceAllocateProposalToCycleError,
    AllocatedProposalResourceAllocateProposalToCycleVariables
  >({
    mutationFn: (
      variables: AllocatedProposalResourceAllocateProposalToCycleVariables,
    ) =>
      fetchAllocatedProposalResourceAllocateProposalToCycle({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AllocatedProposalResourceGetAllocatedProposalPathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedProposalResourceGetAllocatedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedProposalResourceGetAllocatedProposalVariables = {
  pathParams: AllocatedProposalResourceGetAllocatedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedProposalResourceGetAllocatedProposal = (
  variables: AllocatedProposalResourceGetAllocatedProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AllocatedProposal,
    AllocatedProposalResourceGetAllocatedProposalError,
    undefined,
    {},
    {},
    AllocatedProposalResourceGetAllocatedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}",
    method: "get",
    ...variables,
    signal,
  });

export const useAllocatedProposalResourceGetAllocatedProposal = <
  TData = Schemas.AllocatedProposal,
>(
  variables: AllocatedProposalResourceGetAllocatedProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AllocatedProposal,
      AllocatedProposalResourceGetAllocatedProposalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.AllocatedProposal,
    AllocatedProposalResourceGetAllocatedProposalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}",
      operationId: "allocatedProposalResourceGetAllocatedProposal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAllocatedProposalResourceGetAllocatedProposal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AllocatedProposalResourceWithdrawAllocatedProposalPathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedProposalResourceWithdrawAllocatedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedProposalResourceWithdrawAllocatedProposalVariables = {
  pathParams: AllocatedProposalResourceWithdrawAllocatedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedProposalResourceWithdrawAllocatedProposal = (
  variables: AllocatedProposalResourceWithdrawAllocatedProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    AllocatedProposalResourceWithdrawAllocatedProposalError,
    undefined,
    {},
    {},
    AllocatedProposalResourceWithdrawAllocatedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useAllocatedProposalResourceWithdrawAllocatedProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AllocatedProposalResourceWithdrawAllocatedProposalError,
      AllocatedProposalResourceWithdrawAllocatedProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AllocatedProposalResourceWithdrawAllocatedProposalError,
    AllocatedProposalResourceWithdrawAllocatedProposalVariables
  >({
    mutationFn: (
      variables: AllocatedProposalResourceWithdrawAllocatedProposalVariables,
    ) =>
      fetchAllocatedProposalResourceWithdrawAllocatedProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AllocatedBlockResourceGetAllocatedBlocksPathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceGetAllocatedBlocksError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceGetAllocatedBlocksResponse =
  Schemas.ObjectIdentifier[];

export type AllocatedBlockResourceGetAllocatedBlocksVariables = {
  pathParams: AllocatedBlockResourceGetAllocatedBlocksPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceGetAllocatedBlocks = (
  variables: AllocatedBlockResourceGetAllocatedBlocksVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    AllocatedBlockResourceGetAllocatedBlocksResponse,
    AllocatedBlockResourceGetAllocatedBlocksError,
    undefined,
    {},
    {},
    AllocatedBlockResourceGetAllocatedBlocksPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock",
    method: "get",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceGetAllocatedBlocks = <
  TData = AllocatedBlockResourceGetAllocatedBlocksResponse,
>(
  variables: AllocatedBlockResourceGetAllocatedBlocksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AllocatedBlockResourceGetAllocatedBlocksResponse,
      AllocatedBlockResourceGetAllocatedBlocksError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    AllocatedBlockResourceGetAllocatedBlocksResponse,
    AllocatedBlockResourceGetAllocatedBlocksError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock",
      operationId: "allocatedBlockResourceGetAllocatedBlocks",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAllocatedBlockResourceGetAllocatedBlocks(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AllocatedBlockResourceAddAllocatedBlockPathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceAddAllocatedBlockError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceAddAllocatedBlockVariables = {
  body?: Schemas.AllocatedBlock;
  pathParams: AllocatedBlockResourceAddAllocatedBlockPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceAddAllocatedBlock = (
  variables: AllocatedBlockResourceAddAllocatedBlockVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AllocatedBlock,
    AllocatedBlockResourceAddAllocatedBlockError,
    Schemas.AllocatedBlock,
    {},
    {},
    AllocatedBlockResourceAddAllocatedBlockPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock",
    method: "post",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceAddAllocatedBlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AllocatedBlock,
      AllocatedBlockResourceAddAllocatedBlockError,
      AllocatedBlockResourceAddAllocatedBlockVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.AllocatedBlock,
    AllocatedBlockResourceAddAllocatedBlockError,
    AllocatedBlockResourceAddAllocatedBlockVariables
  >({
    mutationFn: (variables: AllocatedBlockResourceAddAllocatedBlockVariables) =>
      fetchAllocatedBlockResourceAddAllocatedBlock({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AllocatedBlockResourceGetAllocatedBlockPathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  blockId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceGetAllocatedBlockError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceGetAllocatedBlockVariables = {
  pathParams: AllocatedBlockResourceGetAllocatedBlockPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceGetAllocatedBlock = (
  variables: AllocatedBlockResourceGetAllocatedBlockVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AllocatedBlock,
    AllocatedBlockResourceGetAllocatedBlockError,
    undefined,
    {},
    {},
    AllocatedBlockResourceGetAllocatedBlockPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}",
    method: "get",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceGetAllocatedBlock = <
  TData = Schemas.AllocatedBlock,
>(
  variables: AllocatedBlockResourceGetAllocatedBlockVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AllocatedBlock,
      AllocatedBlockResourceGetAllocatedBlockError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.AllocatedBlock,
    AllocatedBlockResourceGetAllocatedBlockError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}",
      operationId: "allocatedBlockResourceGetAllocatedBlock",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAllocatedBlockResourceGetAllocatedBlock(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AllocatedBlockResourceRemoveAllocatedBlockPathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  blockId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceRemoveAllocatedBlockError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceRemoveAllocatedBlockVariables = {
  pathParams: AllocatedBlockResourceRemoveAllocatedBlockPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceRemoveAllocatedBlock = (
  variables: AllocatedBlockResourceRemoveAllocatedBlockVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    AllocatedBlockResourceRemoveAllocatedBlockError,
    undefined,
    {},
    {},
    AllocatedBlockResourceRemoveAllocatedBlockPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceRemoveAllocatedBlock = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AllocatedBlockResourceRemoveAllocatedBlockError,
      AllocatedBlockResourceRemoveAllocatedBlockVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AllocatedBlockResourceRemoveAllocatedBlockError,
    AllocatedBlockResourceRemoveAllocatedBlockVariables
  >({
    mutationFn: (
      variables: AllocatedBlockResourceRemoveAllocatedBlockVariables,
    ) =>
      fetchAllocatedBlockResourceRemoveAllocatedBlock({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AllocatedBlockResourceUpdateGradePathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  blockId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceUpdateGradeError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceUpdateGradeVariables = {
  pathParams: AllocatedBlockResourceUpdateGradePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceUpdateGrade = (
  variables: AllocatedBlockResourceUpdateGradeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    AllocatedBlockResourceUpdateGradeError,
    undefined,
    {},
    {},
    AllocatedBlockResourceUpdateGradePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}/grade",
    method: "put",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceUpdateGrade = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AllocatedBlockResourceUpdateGradeError,
      AllocatedBlockResourceUpdateGradeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AllocatedBlockResourceUpdateGradeError,
    AllocatedBlockResourceUpdateGradeVariables
  >({
    mutationFn: (variables: AllocatedBlockResourceUpdateGradeVariables) =>
      fetchAllocatedBlockResourceUpdateGrade({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AllocatedBlockResourceChangeObservingModePathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  blockId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceChangeObservingModeError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceChangeObservingModeVariables = {
  pathParams: AllocatedBlockResourceChangeObservingModePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceChangeObservingMode = (
  variables: AllocatedBlockResourceChangeObservingModeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    AllocatedBlockResourceChangeObservingModeError,
    undefined,
    {},
    {},
    AllocatedBlockResourceChangeObservingModePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}/observingMode",
    method: "put",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceChangeObservingMode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AllocatedBlockResourceChangeObservingModeError,
      AllocatedBlockResourceChangeObservingModeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AllocatedBlockResourceChangeObservingModeError,
    AllocatedBlockResourceChangeObservingModeVariables
  >({
    mutationFn: (
      variables: AllocatedBlockResourceChangeObservingModeVariables,
    ) =>
      fetchAllocatedBlockResourceChangeObservingMode({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AllocatedBlockResourceUpdateResourcePathParams = {
  /**
   * @format int64
   */
  allocatedId: number;
  /**
   * @format int64
   */
  blockId: number;
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AllocatedBlockResourceUpdateResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type AllocatedBlockResourceUpdateResourceVariables = {
  pathParams: AllocatedBlockResourceUpdateResourcePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAllocatedBlockResourceUpdateResource = (
  variables: AllocatedBlockResourceUpdateResourceVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    AllocatedBlockResourceUpdateResourceError,
    undefined,
    {},
    {},
    AllocatedBlockResourceUpdateResourcePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}/resourceAmount",
    method: "put",
    ...variables,
    signal,
  });

export const useAllocatedBlockResourceUpdateResource = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AllocatedBlockResourceUpdateResourceError,
      AllocatedBlockResourceUpdateResourceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AllocatedBlockResourceUpdateResourceError,
    AllocatedBlockResourceUpdateResourceVariables
  >({
    mutationFn: (variables: AllocatedBlockResourceUpdateResourceVariables) =>
      fetchAllocatedBlockResourceUpdateResource({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AvailableResourcesResourceGetCycleAvailableResourcesPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AvailableResourcesResourceGetCycleAvailableResourcesError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleAvailableResourcesVariables = {
  pathParams: AvailableResourcesResourceGetCycleAvailableResourcesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleAvailableResources = (
  variables: AvailableResourcesResourceGetCycleAvailableResourcesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AvailableResources,
    AvailableResourcesResourceGetCycleAvailableResourcesError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleAvailableResourcesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleAvailableResources = <
  TData = Schemas.AvailableResources,
>(
  variables: AvailableResourcesResourceGetCycleAvailableResourcesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AvailableResources,
      AvailableResourcesResourceGetCycleAvailableResourcesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.AvailableResources,
    AvailableResourcesResourceGetCycleAvailableResourcesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources",
      operationId: "availableResourcesResourceGetCycleAvailableResources",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleAvailableResources(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AvailableResourcesResourceAddCycleResourcePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AvailableResourcesResourceAddCycleResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceAddCycleResourceVariables = {
  body?: Schemas.Resource;
  pathParams: AvailableResourcesResourceAddCycleResourcePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceAddCycleResource = (
  variables: AvailableResourcesResourceAddCycleResourceVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Resource,
    AvailableResourcesResourceAddCycleResourceError,
    Schemas.Resource,
    {},
    {},
    AvailableResourcesResourceAddCycleResourcePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources",
    method: "post",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceAddCycleResource = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Resource,
      AvailableResourcesResourceAddCycleResourceError,
      AvailableResourcesResourceAddCycleResourceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Resource,
    AvailableResourcesResourceAddCycleResourceError,
    AvailableResourcesResourceAddCycleResourceVariables
  >({
    mutationFn: (
      variables: AvailableResourcesResourceAddCycleResourceVariables,
    ) =>
      fetchAvailableResourcesResourceAddCycleResource({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AvailableResourcesResourceGetCycleResourceTypesPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type AvailableResourcesResourceGetCycleResourceTypesError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceTypesResponse =
  Schemas.ObjectIdentifier[];

export type AvailableResourcesResourceGetCycleResourceTypesVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceTypesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceTypes = (
  variables: AvailableResourcesResourceGetCycleResourceTypesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    AvailableResourcesResourceGetCycleResourceTypesResponse,
    AvailableResourcesResourceGetCycleResourceTypesError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceTypesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/types",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceTypes = <
  TData = AvailableResourcesResourceGetCycleResourceTypesResponse,
>(
  variables: AvailableResourcesResourceGetCycleResourceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AvailableResourcesResourceGetCycleResourceTypesResponse,
      AvailableResourcesResourceGetCycleResourceTypesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    AvailableResourcesResourceGetCycleResourceTypesResponse,
    AvailableResourcesResourceGetCycleResourceTypesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/types",
      operationId: "availableResourcesResourceGetCycleResourceTypes",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceTypes(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AvailableResourcesResourceGetCycleResourceTypePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  typeId: number;
};

export type AvailableResourcesResourceGetCycleResourceTypeError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceTypeVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceTypePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceType = (
  variables: AvailableResourcesResourceGetCycleResourceTypeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ResourceType,
    AvailableResourcesResourceGetCycleResourceTypeError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceTypePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/types/{typeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceType = <
  TData = Schemas.ResourceType,
>(
  variables: AvailableResourcesResourceGetCycleResourceTypeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ResourceType,
      AvailableResourcesResourceGetCycleResourceTypeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ResourceType,
    AvailableResourcesResourceGetCycleResourceTypeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/types/{typeId}",
      operationId: "availableResourcesResourceGetCycleResourceType",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceType(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AvailableResourcesResourceRemoveCycleResourcePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  resourceId: number;
};

export type AvailableResourcesResourceRemoveCycleResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceRemoveCycleResourceVariables = {
  pathParams: AvailableResourcesResourceRemoveCycleResourcePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceRemoveCycleResource = (
  variables: AvailableResourcesResourceRemoveCycleResourceVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    AvailableResourcesResourceRemoveCycleResourceError,
    undefined,
    {},
    {},
    AvailableResourcesResourceRemoveCycleResourcePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceRemoveCycleResource = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AvailableResourcesResourceRemoveCycleResourceError,
      AvailableResourcesResourceRemoveCycleResourceVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AvailableResourcesResourceRemoveCycleResourceError,
    AvailableResourcesResourceRemoveCycleResourceVariables
  >({
    mutationFn: (
      variables: AvailableResourcesResourceRemoveCycleResourceVariables,
    ) =>
      fetchAvailableResourcesResourceRemoveCycleResource({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AvailableResourcesResourceUpdateCycleResourceAmountPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  resourceId: number;
};

export type AvailableResourcesResourceUpdateCycleResourceAmountError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceUpdateCycleResourceAmountVariables = {
  pathParams: AvailableResourcesResourceUpdateCycleResourceAmountPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceUpdateCycleResourceAmount = (
  variables: AvailableResourcesResourceUpdateCycleResourceAmountVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Resource,
    AvailableResourcesResourceUpdateCycleResourceAmountError,
    undefined,
    {},
    {},
    AvailableResourcesResourceUpdateCycleResourceAmountPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceId}/amount",
    method: "put",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceUpdateCycleResourceAmount = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Resource,
      AvailableResourcesResourceUpdateCycleResourceAmountError,
      AvailableResourcesResourceUpdateCycleResourceAmountVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Resource,
    AvailableResourcesResourceUpdateCycleResourceAmountError,
    AvailableResourcesResourceUpdateCycleResourceAmountVariables
  >({
    mutationFn: (
      variables: AvailableResourcesResourceUpdateCycleResourceAmountVariables,
    ) =>
      fetchAvailableResourcesResourceUpdateCycleResourceAmount({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AvailableResourcesResourceGetCycleAvailableResourcePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  resourceName: string;
};

export type AvailableResourcesResourceGetCycleAvailableResourceError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleAvailableResourceVariables = {
  pathParams: AvailableResourcesResourceGetCycleAvailableResourcePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleAvailableResource = (
  variables: AvailableResourcesResourceGetCycleAvailableResourceVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Resource,
    AvailableResourcesResourceGetCycleAvailableResourceError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleAvailableResourcePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleAvailableResource = <
  TData = Schemas.Resource,
>(
  variables: AvailableResourcesResourceGetCycleAvailableResourceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Resource,
      AvailableResourcesResourceGetCycleAvailableResourceError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Resource,
    AvailableResourcesResourceGetCycleAvailableResourceError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}",
      operationId: "availableResourcesResourceGetCycleAvailableResource",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleAvailableResource(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AvailableResourcesResourceGetCycleResourceUsedPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  resourceName: string;
};

export type AvailableResourcesResourceGetCycleResourceUsedError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceUsedVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceUsedPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceUsed = (
  variables: AvailableResourcesResourceGetCycleResourceUsedVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    number,
    AvailableResourcesResourceGetCycleResourceUsedError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceUsedPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/allocated",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceUsed = <
  TData = number,
>(
  variables: AvailableResourcesResourceGetCycleResourceUsedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      number,
      AvailableResourcesResourceGetCycleResourceUsedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    number,
    AvailableResourcesResourceGetCycleResourceUsedError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/allocated",
      operationId: "availableResourcesResourceGetCycleResourceUsed",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceUsed(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AvailableResourcesResourceGetCycleResourceRemainingPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  resourceName: string;
};

export type AvailableResourcesResourceGetCycleResourceRemainingError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceRemainingVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceRemainingPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceRemaining = (
  variables: AvailableResourcesResourceGetCycleResourceRemainingVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    number,
    AvailableResourcesResourceGetCycleResourceRemainingError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceRemainingPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/remaining",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceRemaining = <
  TData = number,
>(
  variables: AvailableResourcesResourceGetCycleResourceRemainingVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      number,
      AvailableResourcesResourceGetCycleResourceRemainingError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    number,
    AvailableResourcesResourceGetCycleResourceRemainingError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/remaining",
      operationId: "availableResourcesResourceGetCycleResourceRemaining",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceRemaining(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AvailableResourcesResourceGetCycleResourceTotalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  resourceName: string;
};

export type AvailableResourcesResourceGetCycleResourceTotalError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceTotalVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceTotalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceTotal = (
  variables: AvailableResourcesResourceGetCycleResourceTotalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    number,
    AvailableResourcesResourceGetCycleResourceTotalError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceTotalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/total",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceTotal = <
  TData = number,
>(
  variables: AvailableResourcesResourceGetCycleResourceTotalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      number,
      AvailableResourcesResourceGetCycleResourceTotalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    number,
    AvailableResourcesResourceGetCycleResourceTotalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/total",
      operationId: "availableResourcesResourceGetCycleResourceTotal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceTotal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceGetProposalCycleCodePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetProposalCycleCodeError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCycleCodeVariables = {
  pathParams: ProposalCyclesResourceGetProposalCycleCodePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycleCode = (
  variables: ProposalCyclesResourceGetProposalCycleCodeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceGetProposalCycleCodeError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetProposalCycleCodePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/code",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetProposalCycleCode = <
  TData = undefined,
>(
  variables: ProposalCyclesResourceGetProposalCycleCodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ProposalCyclesResourceGetProposalCycleCodeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    ProposalCyclesResourceGetProposalCycleCodeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/code",
      operationId: "proposalCyclesResourceGetProposalCycleCode",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycleCode(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceReplaceCycleCodePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceReplaceCycleCodeError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleCodeVariables = {
  pathParams: ProposalCyclesResourceReplaceCycleCodePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleCode = (
  variables: ProposalCyclesResourceReplaceCycleCodeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceReplaceCycleCodeError,
    undefined,
    {},
    {},
    ProposalCyclesResourceReplaceCycleCodePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/code",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceReplaceCycleCodeError,
      ProposalCyclesResourceReplaceCycleCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceReplaceCycleCodeError,
    ProposalCyclesResourceReplaceCycleCodeVariables
  >({
    mutationFn: (variables: ProposalCyclesResourceReplaceCycleCodeVariables) =>
      fetchProposalCyclesResourceReplaceCycleCode({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceReplaceCycleDeadlinePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceReplaceCycleDeadlineError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleDeadlineVariables = {
  body?: Schemas.Date;
  pathParams: ProposalCyclesResourceReplaceCycleDeadlinePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleDeadline = (
  variables: ProposalCyclesResourceReplaceCycleDeadlineVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceReplaceCycleDeadlineError,
    Schemas.Date,
    {},
    {},
    ProposalCyclesResourceReplaceCycleDeadlinePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/dates/deadline",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleDeadline = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceReplaceCycleDeadlineError,
      ProposalCyclesResourceReplaceCycleDeadlineVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceReplaceCycleDeadlineError,
    ProposalCyclesResourceReplaceCycleDeadlineVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceReplaceCycleDeadlineVariables,
    ) =>
      fetchProposalCyclesResourceReplaceCycleDeadline({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceReplaceCycleSessionEndPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceReplaceCycleSessionEndError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleSessionEndVariables = {
  body?: Schemas.Date;
  pathParams: ProposalCyclesResourceReplaceCycleSessionEndPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleSessionEnd = (
  variables: ProposalCyclesResourceReplaceCycleSessionEndVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceReplaceCycleSessionEndError,
    Schemas.Date,
    {},
    {},
    ProposalCyclesResourceReplaceCycleSessionEndPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/dates/sessionEnd",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleSessionEnd = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceReplaceCycleSessionEndError,
      ProposalCyclesResourceReplaceCycleSessionEndVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceReplaceCycleSessionEndError,
    ProposalCyclesResourceReplaceCycleSessionEndVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceReplaceCycleSessionEndVariables,
    ) =>
      fetchProposalCyclesResourceReplaceCycleSessionEnd({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceReplaceCycleSessionStartPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceReplaceCycleSessionStartError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleSessionStartVariables = {
  body?: Schemas.Date;
  pathParams: ProposalCyclesResourceReplaceCycleSessionStartPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleSessionStart = (
  variables: ProposalCyclesResourceReplaceCycleSessionStartVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceReplaceCycleSessionStartError,
    Schemas.Date,
    {},
    {},
    ProposalCyclesResourceReplaceCycleSessionStartPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/dates/sessionStart",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleSessionStart = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceReplaceCycleSessionStartError,
      ProposalCyclesResourceReplaceCycleSessionStartVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceReplaceCycleSessionStartError,
    ProposalCyclesResourceReplaceCycleSessionStartVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceReplaceCycleSessionStartVariables,
    ) =>
      fetchProposalCyclesResourceReplaceCycleSessionStart({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetProposalCycleDetailsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetProposalCycleDetailsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCycleDetailsVariables = {
  pathParams: ProposalCyclesResourceGetProposalCycleDetailsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycleDetails = (
  variables: ProposalCyclesResourceGetProposalCycleDetailsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalCycleSynopsis,
    ProposalCyclesResourceGetProposalCycleDetailsError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetProposalCycleDetailsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/details",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetProposalCycleDetails = <
  TData = Schemas.ProposalCycleSynopsis,
>(
  variables: ProposalCyclesResourceGetProposalCycleDetailsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalCycleSynopsis,
      ProposalCyclesResourceGetProposalCycleDetailsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalCycleSynopsis,
    ProposalCyclesResourceGetProposalCycleDetailsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/details",
      operationId: "proposalCyclesResourceGetProposalCycleDetails",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycleDetails(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceUpdateProposalCycleDetailsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceUpdateProposalCycleDetailsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceUpdateProposalCycleDetailsVariables = {
  body?: Schemas.ProposalCycleSynopsis;
  pathParams: ProposalCyclesResourceUpdateProposalCycleDetailsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceUpdateProposalCycleDetails = (
  variables: ProposalCyclesResourceUpdateProposalCycleDetailsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalCycleSynopsis,
    ProposalCyclesResourceUpdateProposalCycleDetailsError,
    Schemas.ProposalCycleSynopsis,
    {},
    {},
    ProposalCyclesResourceUpdateProposalCycleDetailsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/details",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceUpdateProposalCycleDetails = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalCycleSynopsis,
      ProposalCyclesResourceUpdateProposalCycleDetailsError,
      ProposalCyclesResourceUpdateProposalCycleDetailsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalCycleSynopsis,
    ProposalCyclesResourceUpdateProposalCycleDetailsError,
    ProposalCyclesResourceUpdateProposalCycleDetailsVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceUpdateProposalCycleDetailsVariables,
    ) =>
      fetchProposalCyclesResourceUpdateProposalCycleDetails({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetCycleAllocationGradesPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetCycleAllocationGradesError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetCycleAllocationGradesResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetCycleAllocationGradesVariables = {
  pathParams: ProposalCyclesResourceGetCycleAllocationGradesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetCycleAllocationGrades = (
  variables: ProposalCyclesResourceGetCycleAllocationGradesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetCycleAllocationGradesResponse,
    ProposalCyclesResourceGetCycleAllocationGradesError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetCycleAllocationGradesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetCycleAllocationGrades = <
  TData = ProposalCyclesResourceGetCycleAllocationGradesResponse,
>(
  variables: ProposalCyclesResourceGetCycleAllocationGradesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetCycleAllocationGradesResponse,
      ProposalCyclesResourceGetCycleAllocationGradesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetCycleAllocationGradesResponse,
    ProposalCyclesResourceGetCycleAllocationGradesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/grades",
      operationId: "proposalCyclesResourceGetCycleAllocationGrades",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetCycleAllocationGrades(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceAddCycleAllocationGradePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceAddCycleAllocationGradeError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceAddCycleAllocationGradeVariables = {
  body?: Schemas.AllocationGrade;
  pathParams: ProposalCyclesResourceAddCycleAllocationGradePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceAddCycleAllocationGrade = (
  variables: ProposalCyclesResourceAddCycleAllocationGradeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AllocationGrade,
    ProposalCyclesResourceAddCycleAllocationGradeError,
    Schemas.AllocationGrade,
    {},
    {},
    ProposalCyclesResourceAddCycleAllocationGradePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceAddCycleAllocationGrade = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AllocationGrade,
      ProposalCyclesResourceAddCycleAllocationGradeError,
      ProposalCyclesResourceAddCycleAllocationGradeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.AllocationGrade,
    ProposalCyclesResourceAddCycleAllocationGradeError,
    ProposalCyclesResourceAddCycleAllocationGradeVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceAddCycleAllocationGradeVariables,
    ) =>
      fetchProposalCyclesResourceAddCycleAllocationGrade({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetCycleAllocatedGradePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  gradeId: number;
};

export type ProposalCyclesResourceGetCycleAllocatedGradeError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetCycleAllocatedGradeVariables = {
  pathParams: ProposalCyclesResourceGetCycleAllocatedGradePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetCycleAllocatedGrade = (
  variables: ProposalCyclesResourceGetCycleAllocatedGradeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AllocationGrade,
    ProposalCyclesResourceGetCycleAllocatedGradeError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetCycleAllocatedGradePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetCycleAllocatedGrade = <
  TData = Schemas.AllocationGrade,
>(
  variables: ProposalCyclesResourceGetCycleAllocatedGradeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AllocationGrade,
      ProposalCyclesResourceGetCycleAllocatedGradeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.AllocationGrade,
    ProposalCyclesResourceGetCycleAllocatedGradeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}",
      operationId: "proposalCyclesResourceGetCycleAllocatedGrade",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetCycleAllocatedGrade(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceRemoveCycleAllocationGradePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  gradeId: number;
};

export type ProposalCyclesResourceRemoveCycleAllocationGradeError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceRemoveCycleAllocationGradeVariables = {
  pathParams: ProposalCyclesResourceRemoveCycleAllocationGradePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceRemoveCycleAllocationGrade = (
  variables: ProposalCyclesResourceRemoveCycleAllocationGradeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceRemoveCycleAllocationGradeError,
    undefined,
    {},
    {},
    ProposalCyclesResourceRemoveCycleAllocationGradePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceRemoveCycleAllocationGrade = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceRemoveCycleAllocationGradeError,
      ProposalCyclesResourceRemoveCycleAllocationGradeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceRemoveCycleAllocationGradeError,
    ProposalCyclesResourceRemoveCycleAllocationGradeVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceRemoveCycleAllocationGradeVariables,
    ) =>
      fetchProposalCyclesResourceRemoveCycleAllocationGrade({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionPathParams =
  {
    /**
     * @format int64
     */
    cycleCode: number;
    /**
     * @format int64
     */
    gradeId: number;
  };

export type ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionVariables =
  {
    pathParams: ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionPathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleAllocationGradeDescription =
  (
    variables: ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionVariables,
    signal?: AbortSignal,
  ) =>
    proposalToolFetch<
      Schemas.AllocationGrade,
      ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionError,
      undefined,
      {},
      {},
      ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionPathParams
    >({
      url: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}/description",
      method: "put",
      ...variables,
      signal,
    });

export const useProposalCyclesResourceReplaceCycleAllocationGradeDescription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AllocationGrade,
      ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionError,
      ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.AllocationGrade,
    ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionError,
    ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceReplaceCycleAllocationGradeDescriptionVariables,
    ) =>
      fetchProposalCyclesResourceReplaceCycleAllocationGradeDescription({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceReplaceCycleAllocationGradeNamePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  gradeId: number;
};

export type ProposalCyclesResourceReplaceCycleAllocationGradeNameError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleAllocationGradeNameVariables = {
  pathParams: ProposalCyclesResourceReplaceCycleAllocationGradeNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleAllocationGradeName = (
  variables: ProposalCyclesResourceReplaceCycleAllocationGradeNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.AllocationGrade,
    ProposalCyclesResourceReplaceCycleAllocationGradeNameError,
    undefined,
    {},
    {},
    ProposalCyclesResourceReplaceCycleAllocationGradeNamePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleAllocationGradeName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AllocationGrade,
      ProposalCyclesResourceReplaceCycleAllocationGradeNameError,
      ProposalCyclesResourceReplaceCycleAllocationGradeNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.AllocationGrade,
    ProposalCyclesResourceReplaceCycleAllocationGradeNameError,
    ProposalCyclesResourceReplaceCycleAllocationGradeNameVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceReplaceCycleAllocationGradeNameVariables,
    ) =>
      fetchProposalCyclesResourceReplaceCycleAllocationGradeName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetProposalCycleObservatoryPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetProposalCycleObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCycleObservatoryVariables = {
  pathParams: ProposalCyclesResourceGetProposalCycleObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycleObservatory = (
  variables: ProposalCyclesResourceGetProposalCycleObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Observatory,
    ProposalCyclesResourceGetProposalCycleObservatoryError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetProposalCycleObservatoryPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/observatory",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetProposalCycleObservatory = <
  TData = Schemas.Observatory,
>(
  variables: ProposalCyclesResourceGetProposalCycleObservatoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Observatory,
      ProposalCyclesResourceGetProposalCycleObservatoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Observatory,
    ProposalCyclesResourceGetProposalCycleObservatoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/observatory",
      operationId: "proposalCyclesResourceGetProposalCycleObservatory",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycleObservatory(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceReplaceCycleObservatoryPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceReplaceCycleObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleObservatoryVariables = {
  pathParams: ProposalCyclesResourceReplaceCycleObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleObservatory = (
  variables: ProposalCyclesResourceReplaceCycleObservatoryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceReplaceCycleObservatoryError,
    undefined,
    {},
    {},
    ProposalCyclesResourceReplaceCycleObservatoryPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/observatory",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceReplaceCycleObservatoryError,
      ProposalCyclesResourceReplaceCycleObservatoryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceReplaceCycleObservatoryError,
    ProposalCyclesResourceReplaceCycleObservatoryVariables
  >({
    mutationFn: (
      variables: ProposalCyclesResourceReplaceCycleObservatoryVariables,
    ) =>
      fetchProposalCyclesResourceReplaceCycleObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetCycleObservingTimeTotalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetCycleObservingTimeTotalsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetCycleObservingTimeTotalsResponse =
  Schemas.CycleObservingTimeTotal[];

export type ProposalCyclesResourceGetCycleObservingTimeTotalsVariables = {
  pathParams: ProposalCyclesResourceGetCycleObservingTimeTotalsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetCycleObservingTimeTotals = (
  variables: ProposalCyclesResourceGetCycleObservingTimeTotalsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetCycleObservingTimeTotalsResponse,
    ProposalCyclesResourceGetCycleObservingTimeTotalsError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetCycleObservingTimeTotalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/observingTimeTotals",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetCycleObservingTimeTotals = <
  TData = ProposalCyclesResourceGetCycleObservingTimeTotalsResponse,
>(
  variables: ProposalCyclesResourceGetCycleObservingTimeTotalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetCycleObservingTimeTotalsResponse,
      ProposalCyclesResourceGetCycleObservingTimeTotalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetCycleObservingTimeTotalsResponse,
    ProposalCyclesResourceGetCycleObservingTimeTotalsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/observingTimeTotals",
      operationId: "proposalCyclesResourceGetCycleObservingTimeTotals",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetCycleObservingTimeTotals(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubmittedProposalResourceGetSubmittedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmittedProposalResourceGetSubmittedProposalsQueryParams = {
  investigatorName?: string;
  /**
   * @format int64
   */
  sourceProposalId?: number;
  title?: string;
};

export type SubmittedProposalResourceGetSubmittedProposalsError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceGetSubmittedProposalsResponse =
  Schemas.ObjectIdentifier[];

export type SubmittedProposalResourceGetSubmittedProposalsVariables = {
  pathParams: SubmittedProposalResourceGetSubmittedProposalsPathParams;
  queryParams?: SubmittedProposalResourceGetSubmittedProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceGetSubmittedProposals = (
  variables: SubmittedProposalResourceGetSubmittedProposalsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    SubmittedProposalResourceGetSubmittedProposalsResponse,
    SubmittedProposalResourceGetSubmittedProposalsError,
    undefined,
    {},
    SubmittedProposalResourceGetSubmittedProposalsQueryParams,
    SubmittedProposalResourceGetSubmittedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "get",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceGetSubmittedProposals = <
  TData = SubmittedProposalResourceGetSubmittedProposalsResponse,
>(
  variables: SubmittedProposalResourceGetSubmittedProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SubmittedProposalResourceGetSubmittedProposalsResponse,
      SubmittedProposalResourceGetSubmittedProposalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    SubmittedProposalResourceGetSubmittedProposalsResponse,
    SubmittedProposalResourceGetSubmittedProposalsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
      operationId: "submittedProposalResourceGetSubmittedProposals",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubmittedProposalResourceGetSubmittedProposals(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubmittedProposalResourceSubmitProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmittedProposalResourceSubmitProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceSubmitProposalVariables = {
  body?: Schemas.SubmissionConfiguration;
  pathParams: SubmittedProposalResourceSubmitProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceSubmitProposal = (
  variables: SubmittedProposalResourceSubmitProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubmittedProposalResourceSubmitProposalError,
    Schemas.SubmissionConfiguration,
    {},
    {},
    SubmittedProposalResourceSubmitProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "post",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceSubmitProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmittedProposalResourceSubmitProposalError,
      SubmittedProposalResourceSubmitProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmittedProposalResourceSubmitProposalError,
    SubmittedProposalResourceSubmitProposalVariables
  >({
    mutationFn: (variables: SubmittedProposalResourceSubmitProposalVariables) =>
      fetchSubmittedProposalResourceSubmitProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubmittedProposalResourceCheckAllReviewsLockedPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmittedProposalResourceCheckAllReviewsLockedError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceCheckAllReviewsLockedVariables = {
  pathParams: SubmittedProposalResourceCheckAllReviewsLockedPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceCheckAllReviewsLocked = (
  variables: SubmittedProposalResourceCheckAllReviewsLockedVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    boolean,
    SubmittedProposalResourceCheckAllReviewsLockedError,
    undefined,
    {},
    {},
    SubmittedProposalResourceCheckAllReviewsLockedPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/allReviewsLocked",
    method: "get",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceCheckAllReviewsLocked = <
  TData = boolean,
>(
  variables: SubmittedProposalResourceCheckAllReviewsLockedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      boolean,
      SubmittedProposalResourceCheckAllReviewsLockedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    boolean,
    SubmittedProposalResourceCheckAllReviewsLockedError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/allReviewsLocked",
      operationId: "submittedProposalResourceCheckAllReviewsLocked",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubmittedProposalResourceCheckAllReviewsLocked(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubmittedProposalResourceGetSubmittedNotYetAllocatedPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmittedProposalResourceGetSubmittedNotYetAllocatedError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceGetSubmittedNotYetAllocatedResponse =
  Schemas.ObjectIdentifier[];

export type SubmittedProposalResourceGetSubmittedNotYetAllocatedVariables = {
  pathParams: SubmittedProposalResourceGetSubmittedNotYetAllocatedPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceGetSubmittedNotYetAllocated = (
  variables: SubmittedProposalResourceGetSubmittedNotYetAllocatedVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    SubmittedProposalResourceGetSubmittedNotYetAllocatedResponse,
    SubmittedProposalResourceGetSubmittedNotYetAllocatedError,
    undefined,
    {},
    {},
    SubmittedProposalResourceGetSubmittedNotYetAllocatedPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/notYetAllocated",
    method: "get",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceGetSubmittedNotYetAllocated = <
  TData = SubmittedProposalResourceGetSubmittedNotYetAllocatedResponse,
>(
  variables: SubmittedProposalResourceGetSubmittedNotYetAllocatedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SubmittedProposalResourceGetSubmittedNotYetAllocatedResponse,
      SubmittedProposalResourceGetSubmittedNotYetAllocatedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    SubmittedProposalResourceGetSubmittedNotYetAllocatedResponse,
    SubmittedProposalResourceGetSubmittedNotYetAllocatedError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/notYetAllocated",
      operationId: "submittedProposalResourceGetSubmittedNotYetAllocated",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubmittedProposalResourceGetSubmittedNotYetAllocated(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubmittedProposalResourceGetSubmittedProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type SubmittedProposalResourceGetSubmittedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceGetSubmittedProposalVariables = {
  pathParams: SubmittedProposalResourceGetSubmittedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceGetSubmittedProposal = (
  variables: SubmittedProposalResourceGetSubmittedProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SubmittedProposal,
    SubmittedProposalResourceGetSubmittedProposalError,
    undefined,
    {},
    {},
    SubmittedProposalResourceGetSubmittedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}",
    method: "get",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceGetSubmittedProposal = <
  TData = Schemas.SubmittedProposal,
>(
  variables: SubmittedProposalResourceGetSubmittedProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SubmittedProposal,
      SubmittedProposalResourceGetSubmittedProposalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SubmittedProposal,
    SubmittedProposalResourceGetSubmittedProposalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}",
      operationId: "submittedProposalResourceGetSubmittedProposal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubmittedProposalResourceGetSubmittedProposal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubmittedProposalResourceUpdateReviewsCompleteDatePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type SubmittedProposalResourceUpdateReviewsCompleteDateError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceUpdateReviewsCompleteDateVariables = {
  pathParams: SubmittedProposalResourceUpdateReviewsCompleteDatePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceUpdateReviewsCompleteDate = (
  variables: SubmittedProposalResourceUpdateReviewsCompleteDateVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubmittedProposalResourceUpdateReviewsCompleteDateError,
    undefined,
    {},
    {},
    SubmittedProposalResourceUpdateReviewsCompleteDatePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/completeDate",
    method: "put",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceUpdateReviewsCompleteDate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmittedProposalResourceUpdateReviewsCompleteDateError,
      SubmittedProposalResourceUpdateReviewsCompleteDateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmittedProposalResourceUpdateReviewsCompleteDateError,
    SubmittedProposalResourceUpdateReviewsCompleteDateVariables
  >({
    mutationFn: (
      variables: SubmittedProposalResourceUpdateReviewsCompleteDateVariables,
    ) =>
      fetchSubmittedProposalResourceUpdateReviewsCompleteDate({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubmittedProposalResourceSendTACReviewResultsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type SubmittedProposalResourceSendTACReviewResultsError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceSendTACReviewResultsVariables = {
  pathParams: SubmittedProposalResourceSendTACReviewResultsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceSendTACReviewResults = (
  variables: SubmittedProposalResourceSendTACReviewResultsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubmittedProposalResourceSendTACReviewResultsError,
    undefined,
    {},
    {},
    SubmittedProposalResourceSendTACReviewResultsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/mailResults",
    method: "get",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceSendTACReviewResults = <
  TData = undefined,
>(
  variables: SubmittedProposalResourceSendTACReviewResultsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      SubmittedProposalResourceSendTACReviewResultsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    SubmittedProposalResourceSendTACReviewResultsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/mailResults",
      operationId: "submittedProposalResourceSendTACReviewResults",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubmittedProposalResourceSendTACReviewResults(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubmittedProposalResourceReplaceCodePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type SubmittedProposalResourceReplaceCodeQueryParams = {
  proposalCode?: string;
};

export type SubmittedProposalResourceReplaceCodeError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceReplaceCodeVariables = {
  pathParams: SubmittedProposalResourceReplaceCodePathParams;
  queryParams?: SubmittedProposalResourceReplaceCodeQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceReplaceCode = (
  variables: SubmittedProposalResourceReplaceCodeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubmittedProposalResourceReplaceCodeError,
    undefined,
    {},
    SubmittedProposalResourceReplaceCodeQueryParams,
    SubmittedProposalResourceReplaceCodePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/replaceCode",
    method: "put",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceReplaceCode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmittedProposalResourceReplaceCodeError,
      SubmittedProposalResourceReplaceCodeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmittedProposalResourceReplaceCodeError,
    SubmittedProposalResourceReplaceCodeVariables
  >({
    mutationFn: (variables: SubmittedProposalResourceReplaceCodeVariables) =>
      fetchSubmittedProposalResourceReplaceCode({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubmittedProposalResourceResetReviewsCompleteDatePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type SubmittedProposalResourceResetReviewsCompleteDateError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceResetReviewsCompleteDateVariables = {
  pathParams: SubmittedProposalResourceResetReviewsCompleteDatePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceResetReviewsCompleteDate = (
  variables: SubmittedProposalResourceResetReviewsCompleteDateVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubmittedProposalResourceResetReviewsCompleteDateError,
    undefined,
    {},
    {},
    SubmittedProposalResourceResetReviewsCompleteDatePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/resetCompleteDate",
    method: "put",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceResetReviewsCompleteDate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmittedProposalResourceResetReviewsCompleteDateError,
      SubmittedProposalResourceResetReviewsCompleteDateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmittedProposalResourceResetReviewsCompleteDateError,
    SubmittedProposalResourceResetReviewsCompleteDateVariables
  >({
    mutationFn: (
      variables: SubmittedProposalResourceResetReviewsCompleteDateVariables,
    ) =>
      fetchSubmittedProposalResourceResetReviewsCompleteDate({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalReviewResourceGetReviewsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceGetReviewsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceGetReviewsResponse =
  Schemas.ObjectIdentifier[];

export type ProposalReviewResourceGetReviewsVariables = {
  pathParams: ProposalReviewResourceGetReviewsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceGetReviews = (
  variables: ProposalReviewResourceGetReviewsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalReviewResourceGetReviewsResponse,
    ProposalReviewResourceGetReviewsError,
    undefined,
    {},
    {},
    ProposalReviewResourceGetReviewsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalReviewResourceGetReviews = <
  TData = ProposalReviewResourceGetReviewsResponse,
>(
  variables: ProposalReviewResourceGetReviewsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalReviewResourceGetReviewsResponse,
      ProposalReviewResourceGetReviewsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalReviewResourceGetReviewsResponse,
    ProposalReviewResourceGetReviewsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews",
      operationId: "proposalReviewResourceGetReviews",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalReviewResourceGetReviews(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalReviewResourceAddReviewPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceAddReviewError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceAddReviewVariables = {
  body?: Schemas.ProposalReview;
  pathParams: ProposalReviewResourceAddReviewPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceAddReview = (
  variables: ProposalReviewResourceAddReviewVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalReviewResourceAddReviewError,
    Schemas.ProposalReview,
    {},
    {},
    ProposalReviewResourceAddReviewPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalReviewResourceAddReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalReview,
      ProposalReviewResourceAddReviewError,
      ProposalReviewResourceAddReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalReview,
    ProposalReviewResourceAddReviewError,
    ProposalReviewResourceAddReviewVariables
  >({
    mutationFn: (variables: ProposalReviewResourceAddReviewVariables) =>
      fetchProposalReviewResourceAddReview({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProposalReviewResourceGetReviewPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewId: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceGetReviewError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceGetReviewVariables = {
  pathParams: ProposalReviewResourceGetReviewPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceGetReview = (
  variables: ProposalReviewResourceGetReviewVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalReviewResourceGetReviewError,
    undefined,
    {},
    {},
    ProposalReviewResourceGetReviewPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalReviewResourceGetReview = <
  TData = Schemas.ProposalReview,
>(
  variables: ProposalReviewResourceGetReviewVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalReview,
      ProposalReviewResourceGetReviewError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalReview,
    ProposalReviewResourceGetReviewError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}",
      operationId: "proposalReviewResourceGetReview",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalReviewResourceGetReview(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalReviewResourceRemoveReviewPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewId: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceRemoveReviewError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceRemoveReviewVariables = {
  pathParams: ProposalReviewResourceRemoveReviewPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceRemoveReview = (
  variables: ProposalReviewResourceRemoveReviewVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalReviewResourceRemoveReviewError,
    undefined,
    {},
    {},
    ProposalReviewResourceRemoveReviewPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalReviewResourceRemoveReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalReviewResourceRemoveReviewError,
      ProposalReviewResourceRemoveReviewVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalReviewResourceRemoveReviewError,
    ProposalReviewResourceRemoveReviewVariables
  >({
    mutationFn: (variables: ProposalReviewResourceRemoveReviewVariables) =>
      fetchProposalReviewResourceRemoveReview({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalReviewResourceUpdateReviewCommentPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewId: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceUpdateReviewCommentError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceUpdateReviewCommentVariables = {
  pathParams: ProposalReviewResourceUpdateReviewCommentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceUpdateReviewComment = (
  variables: ProposalReviewResourceUpdateReviewCommentVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalReviewResourceUpdateReviewCommentError,
    undefined,
    {},
    {},
    ProposalReviewResourceUpdateReviewCommentPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}/comment",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalReviewResourceUpdateReviewComment = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalReview,
      ProposalReviewResourceUpdateReviewCommentError,
      ProposalReviewResourceUpdateReviewCommentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalReview,
    ProposalReviewResourceUpdateReviewCommentError,
    ProposalReviewResourceUpdateReviewCommentVariables
  >({
    mutationFn: (
      variables: ProposalReviewResourceUpdateReviewCommentVariables,
    ) =>
      fetchProposalReviewResourceUpdateReviewComment({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalReviewResourceConfirmReviewCompletePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewId: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceConfirmReviewCompleteError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceConfirmReviewCompleteVariables = {
  pathParams: ProposalReviewResourceConfirmReviewCompletePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceConfirmReviewComplete = (
  variables: ProposalReviewResourceConfirmReviewCompleteVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalReviewResourceConfirmReviewCompleteError,
    undefined,
    {},
    {},
    ProposalReviewResourceConfirmReviewCompletePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}/confirmReview",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalReviewResourceConfirmReviewComplete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalReview,
      ProposalReviewResourceConfirmReviewCompleteError,
      ProposalReviewResourceConfirmReviewCompleteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalReview,
    ProposalReviewResourceConfirmReviewCompleteError,
    ProposalReviewResourceConfirmReviewCompleteVariables
  >({
    mutationFn: (
      variables: ProposalReviewResourceConfirmReviewCompleteVariables,
    ) =>
      fetchProposalReviewResourceConfirmReviewComplete({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalReviewResourceUpdateReviewScorePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewId: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceUpdateReviewScoreError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceUpdateReviewScoreVariables = {
  pathParams: ProposalReviewResourceUpdateReviewScorePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceUpdateReviewScore = (
  variables: ProposalReviewResourceUpdateReviewScoreVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalReviewResourceUpdateReviewScoreError,
    undefined,
    {},
    {},
    ProposalReviewResourceUpdateReviewScorePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}/score",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalReviewResourceUpdateReviewScore = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalReview,
      ProposalReviewResourceUpdateReviewScoreError,
      ProposalReviewResourceUpdateReviewScoreVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalReview,
    ProposalReviewResourceUpdateReviewScoreError,
    ProposalReviewResourceUpdateReviewScoreVariables
  >({
    mutationFn: (variables: ProposalReviewResourceUpdateReviewScoreVariables) =>
      fetchProposalReviewResourceUpdateReviewScore({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalReviewResourceUpdateReviewFeasibilityPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewId: number;
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type ProposalReviewResourceUpdateReviewFeasibilityError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalReviewResourceUpdateReviewFeasibilityVariables = {
  pathParams: ProposalReviewResourceUpdateReviewFeasibilityPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalReviewResourceUpdateReviewFeasibility = (
  variables: ProposalReviewResourceUpdateReviewFeasibilityVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalReviewResourceUpdateReviewFeasibilityError,
    undefined,
    {},
    {},
    ProposalReviewResourceUpdateReviewFeasibilityPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}/technicalFeasibility",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalReviewResourceUpdateReviewFeasibility = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalReview,
      ProposalReviewResourceUpdateReviewFeasibilityError,
      ProposalReviewResourceUpdateReviewFeasibilityVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalReview,
    ProposalReviewResourceUpdateReviewFeasibilityError,
    ProposalReviewResourceUpdateReviewFeasibilityVariables
  >({
    mutationFn: (
      variables: ProposalReviewResourceUpdateReviewFeasibilityVariables,
    ) =>
      fetchProposalReviewResourceUpdateReviewFeasibility({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubmittedProposalResourceUpdateSubmittedProposalSuccessPathParams =
  {
    /**
     * @format int64
     */
    cycleCode: number;
    /**
     * @format int64
     */
    submittedProposalId: number;
  };

export type SubmittedProposalResourceUpdateSubmittedProposalSuccessError =
  Fetcher.ErrorWrapper<undefined>;

export type SubmittedProposalResourceUpdateSubmittedProposalSuccessVariables = {
  body?: boolean;
  pathParams: SubmittedProposalResourceUpdateSubmittedProposalSuccessPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmittedProposalResourceUpdateSubmittedProposalSuccess = (
  variables: SubmittedProposalResourceUpdateSubmittedProposalSuccessVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubmittedProposalResourceUpdateSubmittedProposalSuccessError,
    boolean,
    {},
    {},
    SubmittedProposalResourceUpdateSubmittedProposalSuccessPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/success",
    method: "put",
    ...variables,
    signal,
  });

export const useSubmittedProposalResourceUpdateSubmittedProposalSuccess = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmittedProposalResourceUpdateSubmittedProposalSuccessError,
      SubmittedProposalResourceUpdateSubmittedProposalSuccessVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmittedProposalResourceUpdateSubmittedProposalSuccessError,
    SubmittedProposalResourceUpdateSubmittedProposalSuccessVariables
  >({
    mutationFn: (
      variables: SubmittedProposalResourceUpdateSubmittedProposalSuccessVariables,
    ) =>
      fetchSubmittedProposalResourceUpdateSubmittedProposalSuccess({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalCyclesResourceGetProposalCycleTitlePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetProposalCycleTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCycleTitleVariables = {
  pathParams: ProposalCyclesResourceGetProposalCycleTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycleTitle = (
  variables: ProposalCyclesResourceGetProposalCycleTitleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceGetProposalCycleTitleError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetProposalCycleTitlePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/title",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetProposalCycleTitle = <
  TData = undefined,
>(
  variables: ProposalCyclesResourceGetProposalCycleTitleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ProposalCyclesResourceGetProposalCycleTitleError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    ProposalCyclesResourceGetProposalCycleTitleError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/title",
      operationId: "proposalCyclesResourceGetProposalCycleTitle",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycleTitle(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalCyclesResourceReplaceCycleTitlePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceReplaceCycleTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceReplaceCycleTitleVariables = {
  pathParams: ProposalCyclesResourceReplaceCycleTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceReplaceCycleTitle = (
  variables: ProposalCyclesResourceReplaceCycleTitleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceReplaceCycleTitleError,
    undefined,
    {},
    {},
    ProposalCyclesResourceReplaceCycleTitlePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceReplaceCycleTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceReplaceCycleTitleError,
      ProposalCyclesResourceReplaceCycleTitleVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceReplaceCycleTitleError,
    ProposalCyclesResourceReplaceCycleTitleVariables
  >({
    mutationFn: (variables: ProposalCyclesResourceReplaceCycleTitleVariables) =>
      fetchProposalCyclesResourceReplaceCycleTitle({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservingModeResourceGetCycleObservingModesPathParams = {
  /**
   * @format int64
   */
  cycleId: number;
};

export type ObservingModeResourceGetCycleObservingModesError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservingModeResourceGetCycleObservingModesResponse =
  Schemas.ObjectIdentifier[];

export type ObservingModeResourceGetCycleObservingModesVariables = {
  pathParams: ObservingModeResourceGetCycleObservingModesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservingModeResourceGetCycleObservingModes = (
  variables: ObservingModeResourceGetCycleObservingModesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservingModeResourceGetCycleObservingModesResponse,
    ObservingModeResourceGetCycleObservingModesError,
    undefined,
    {},
    {},
    ObservingModeResourceGetCycleObservingModesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/observingModes",
    method: "get",
    ...variables,
    signal,
  });

export const useObservingModeResourceGetCycleObservingModes = <
  TData = ObservingModeResourceGetCycleObservingModesResponse,
>(
  variables: ObservingModeResourceGetCycleObservingModesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservingModeResourceGetCycleObservingModesResponse,
      ObservingModeResourceGetCycleObservingModesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservingModeResourceGetCycleObservingModesResponse,
    ObservingModeResourceGetCycleObservingModesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/observingModes",
      operationId: "observingModeResourceGetCycleObservingModes",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservingModeResourceGetCycleObservingModes(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservingModeResourceGetObservingModesFiltersPathParams = {
  /**
   * @format int64
   */
  cycleId: number;
};

export type ObservingModeResourceGetObservingModesFiltersError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservingModeResourceGetObservingModesFiltersResponse =
  Schemas.Filter[];

export type ObservingModeResourceGetObservingModesFiltersVariables = {
  pathParams: ObservingModeResourceGetObservingModesFiltersPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservingModeResourceGetObservingModesFilters = (
  variables: ObservingModeResourceGetObservingModesFiltersVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservingModeResourceGetObservingModesFiltersResponse,
    ObservingModeResourceGetObservingModesFiltersError,
    undefined,
    {},
    {},
    ObservingModeResourceGetObservingModesFiltersPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/observingModes/filters",
    method: "get",
    ...variables,
    signal,
  });

export const useObservingModeResourceGetObservingModesFilters = <
  TData = ObservingModeResourceGetObservingModesFiltersResponse,
>(
  variables: ObservingModeResourceGetObservingModesFiltersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservingModeResourceGetObservingModesFiltersResponse,
      ObservingModeResourceGetObservingModesFiltersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservingModeResourceGetObservingModesFiltersResponse,
    ObservingModeResourceGetObservingModesFiltersError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/filters",
      operationId: "observingModeResourceGetObservingModesFilters",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservingModeResourceGetObservingModesFilters(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservingModeResourceGetObservingModeObjectsPathParams = {
  /**
   * @format int64
   */
  cycleId: number;
};

export type ObservingModeResourceGetObservingModeObjectsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservingModeResourceGetObservingModeObjectsResponse =
  Schemas.ObservingMode[];

export type ObservingModeResourceGetObservingModeObjectsVariables = {
  pathParams: ObservingModeResourceGetObservingModeObjectsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservingModeResourceGetObservingModeObjects = (
  variables: ObservingModeResourceGetObservingModeObjectsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservingModeResourceGetObservingModeObjectsResponse,
    ObservingModeResourceGetObservingModeObjectsError,
    undefined,
    {},
    {},
    ObservingModeResourceGetObservingModeObjectsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/observingModes/objectList",
    method: "get",
    ...variables,
    signal,
  });

export const useObservingModeResourceGetObservingModeObjects = <
  TData = ObservingModeResourceGetObservingModeObjectsResponse,
>(
  variables: ObservingModeResourceGetObservingModeObjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservingModeResourceGetObservingModeObjectsResponse,
      ObservingModeResourceGetObservingModeObjectsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservingModeResourceGetObservingModeObjectsResponse,
    ObservingModeResourceGetObservingModeObjectsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/objectList",
      operationId: "observingModeResourceGetObservingModeObjects",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservingModeResourceGetObservingModeObjects(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservingModeResourceGetCycleObservingModePathParams = {
  /**
   * @format int64
   */
  cycleId: number;
  /**
   * @format int64
   */
  modeId: number;
};

export type ObservingModeResourceGetCycleObservingModeError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservingModeResourceGetCycleObservingModeVariables = {
  pathParams: ObservingModeResourceGetCycleObservingModePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservingModeResourceGetCycleObservingMode = (
  variables: ObservingModeResourceGetCycleObservingModeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingMode,
    ObservingModeResourceGetCycleObservingModeError,
    undefined,
    {},
    {},
    ObservingModeResourceGetCycleObservingModePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/observingModes/{modeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservingModeResourceGetCycleObservingMode = <
  TData = Schemas.ObservingMode,
>(
  variables: ObservingModeResourceGetCycleObservingModeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObservingMode,
      ObservingModeResourceGetCycleObservingModeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObservingMode,
    ObservingModeResourceGetCycleObservingModeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/{modeId}",
      operationId: "observingModeResourceGetCycleObservingMode",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservingModeResourceGetCycleObservingMode(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceGetProposalsQueryParams = {
  investigatorName?: string;
  title?: string;
};

export type ProposalResourceGetProposalsError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetProposalsResponse = Schemas.ProposalSynopsis[];

export type ProposalResourceGetProposalsVariables = {
  queryParams?: ProposalResourceGetProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetProposals = (
  variables: ProposalResourceGetProposalsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalResourceGetProposalsResponse,
    ProposalResourceGetProposalsError,
    undefined,
    {},
    ProposalResourceGetProposalsQueryParams,
    {}
  >({ url: "/pst/api/proposals", method: "get", ...variables, signal });

export const useProposalResourceGetProposals = <
  TData = ProposalResourceGetProposalsResponse,
>(
  variables: ProposalResourceGetProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetProposalsResponse,
      ProposalResourceGetProposalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetProposalsResponse,
    ProposalResourceGetProposalsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals",
      operationId: "proposalResourceGetProposals",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetProposals(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceCreateObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceCreateObservingProposalVariables = {
  body?: Schemas.ObservingProposal;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceCreateObservingProposal = (
  variables: ProposalResourceCreateObservingProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    ProposalResourceCreateObservingProposalError,
    Schemas.ObservingProposal,
    {},
    {},
    {}
  >({ url: "/pst/api/proposals", method: "post", ...variables, signal });

export const useProposalResourceCreateObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ObservingProposal,
      ProposalResourceCreateObservingProposalError,
      ProposalResourceCreateObservingProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ObservingProposal,
    ProposalResourceCreateObservingProposalError,
    ProposalResourceCreateObservingProposalVariables
  >({
    mutationFn: (variables: ProposalResourceCreateObservingProposalVariables) =>
      fetchProposalResourceCreateObservingProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceImportProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceImportProposalVariables = {
  body?: Schemas.ObservingProposal;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceImportProposal = (
  variables: ProposalResourceImportProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    ProposalResourceImportProposalError,
    Schemas.ObservingProposal,
    {},
    {},
    {}
  >({ url: "/pst/api/proposals/import", method: "post", ...variables, signal });

export const useProposalResourceImportProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ObservingProposal,
      ProposalResourceImportProposalError,
      ProposalResourceImportProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ObservingProposal,
    ProposalResourceImportProposalError,
    ProposalResourceImportProposalVariables
  >({
    mutationFn: (variables: ProposalResourceImportProposalVariables) =>
      fetchProposalResourceImportProposal({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProposalResourceGetObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetObservingProposalVariables = {
  pathParams: ProposalResourceGetObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetObservingProposal = (
  variables: ProposalResourceGetObservingProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    ProposalResourceGetObservingProposalError,
    undefined,
    {},
    {},
    ProposalResourceGetObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetObservingProposal = <
  TData = Schemas.ObservingProposal,
>(
  variables: ProposalResourceGetObservingProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObservingProposal,
      ProposalResourceGetObservingProposalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObservingProposal,
    ProposalResourceGetObservingProposalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}",
      operationId: "proposalResourceGetObservingProposal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetObservingProposal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceCloneObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceCloneObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceCloneObservingProposalVariables = {
  pathParams: ProposalResourceCloneObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceCloneObservingProposal = (
  variables: ProposalResourceCloneObservingProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    ProposalResourceCloneObservingProposalError,
    undefined,
    {},
    {},
    ProposalResourceCloneObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceCloneObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ObservingProposal,
      ProposalResourceCloneObservingProposalError,
      ProposalResourceCloneObservingProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ObservingProposal,
    ProposalResourceCloneObservingProposalError,
    ProposalResourceCloneObservingProposalVariables
  >({
    mutationFn: (variables: ProposalResourceCloneObservingProposalVariables) =>
      fetchProposalResourceCloneObservingProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceDeleteObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceDeleteObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceDeleteObservingProposalVariables = {
  pathParams: ProposalResourceDeleteObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceDeleteObservingProposal = (
  variables: ProposalResourceDeleteObservingProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceDeleteObservingProposalError,
    undefined,
    {},
    {},
    ProposalResourceDeleteObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceDeleteObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceDeleteObservingProposalError,
      ProposalResourceDeleteObservingProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceDeleteObservingProposalError,
    ProposalResourceDeleteObservingProposalVariables
  >({
    mutationFn: (variables: ProposalResourceDeleteObservingProposalVariables) =>
      fetchProposalResourceDeleteObservingProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceExportProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceExportProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceExportProposalVariables = {
  pathParams: ProposalResourceExportProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceExportProposal = (
  variables: ProposalResourceExportProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceExportProposalError,
    undefined,
    {},
    {},
    ProposalResourceExportProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/export",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceExportProposal = <TData = undefined,>(
  variables: ProposalResourceExportProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ProposalResourceExportProposalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    ProposalResourceExportProposalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/export",
      operationId: "proposalResourceExportProposal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceExportProposal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceGetFieldsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetFieldsQueryParams = {
  fieldName?: string;
};

export type ProposalResourceGetFieldsError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetFieldsResponse = Schemas.ObjectIdentifier[];

export type ProposalResourceGetFieldsVariables = {
  pathParams: ProposalResourceGetFieldsPathParams;
  queryParams?: ProposalResourceGetFieldsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetFields = (
  variables: ProposalResourceGetFieldsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalResourceGetFieldsResponse,
    ProposalResourceGetFieldsError,
    undefined,
    {},
    ProposalResourceGetFieldsQueryParams,
    ProposalResourceGetFieldsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetFields = <
  TData = ProposalResourceGetFieldsResponse,
>(
  variables: ProposalResourceGetFieldsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetFieldsResponse,
      ProposalResourceGetFieldsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetFieldsResponse,
    ProposalResourceGetFieldsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/fields",
      operationId: "proposalResourceGetFields",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetFields(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceAddNewFieldPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddNewFieldError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddNewFieldVariables = {
  body?: Schemas.Field;
  pathParams: ProposalResourceAddNewFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddNewField = (
  variables: ProposalResourceAddNewFieldVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Field,
    ProposalResourceAddNewFieldError,
    Schemas.Field,
    {},
    {},
    ProposalResourceAddNewFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceAddNewField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Field,
      ProposalResourceAddNewFieldError,
      ProposalResourceAddNewFieldVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Field,
    ProposalResourceAddNewFieldError,
    ProposalResourceAddNewFieldVariables
  >({
    mutationFn: (variables: ProposalResourceAddNewFieldVariables) =>
      fetchProposalResourceAddNewField({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProposalResourceGetFieldPathParams = {
  /**
   * @format int64
   */
  fieldId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetFieldError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetFieldVariables = {
  pathParams: ProposalResourceGetFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetField = (
  variables: ProposalResourceGetFieldVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Field,
    ProposalResourceGetFieldError,
    undefined,
    {},
    {},
    ProposalResourceGetFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields/{fieldId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetField = <TData = Schemas.Field,>(
  variables: ProposalResourceGetFieldVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Field,
      ProposalResourceGetFieldError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Field,
    ProposalResourceGetFieldError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/fields/{fieldId}",
      operationId: "proposalResourceGetField",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetField(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceRemoveFieldPathParams = {
  /**
   * @format int64
   */
  fieldId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceRemoveFieldError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceRemoveFieldVariables = {
  pathParams: ProposalResourceRemoveFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceRemoveField = (
  variables: ProposalResourceRemoveFieldVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceRemoveFieldError,
    undefined,
    {},
    {},
    ProposalResourceRemoveFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields/{fieldId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceRemoveField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceRemoveFieldError,
      ProposalResourceRemoveFieldVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceRemoveFieldError,
    ProposalResourceRemoveFieldVariables
  >({
    mutationFn: (variables: ProposalResourceRemoveFieldVariables) =>
      fetchProposalResourceRemoveField({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProposalResourceChangeFieldNamePathParams = {
  /**
   * @format int64
   */
  fieldId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceChangeFieldNameError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceChangeFieldNameVariables = {
  pathParams: ProposalResourceChangeFieldNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceChangeFieldName = (
  variables: ProposalResourceChangeFieldNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceChangeFieldNameError,
    undefined,
    {},
    {},
    ProposalResourceChangeFieldNamePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields/{fieldId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceChangeFieldName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceChangeFieldNameError,
      ProposalResourceChangeFieldNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceChangeFieldNameError,
    ProposalResourceChangeFieldNameVariables
  >({
    mutationFn: (variables: ProposalResourceChangeFieldNameVariables) =>
      fetchProposalResourceChangeFieldName({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type InvestigatorResourceGetInvestigatorsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceGetInvestigatorsQueryParams = {
  fullName?: string;
};

export type InvestigatorResourceGetInvestigatorsError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceGetInvestigatorsResponse =
  Schemas.ObjectIdentifier[];

export type InvestigatorResourceGetInvestigatorsVariables = {
  pathParams: InvestigatorResourceGetInvestigatorsPathParams;
  queryParams?: InvestigatorResourceGetInvestigatorsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceGetInvestigators = (
  variables: InvestigatorResourceGetInvestigatorsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    InvestigatorResourceGetInvestigatorsResponse,
    InvestigatorResourceGetInvestigatorsError,
    undefined,
    {},
    InvestigatorResourceGetInvestigatorsQueryParams,
    InvestigatorResourceGetInvestigatorsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "get",
    ...variables,
    signal,
  });

export const useInvestigatorResourceGetInvestigators = <
  TData = InvestigatorResourceGetInvestigatorsResponse,
>(
  variables: InvestigatorResourceGetInvestigatorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      InvestigatorResourceGetInvestigatorsResponse,
      InvestigatorResourceGetInvestigatorsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    InvestigatorResourceGetInvestigatorsResponse,
    InvestigatorResourceGetInvestigatorsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators",
      operationId: "investigatorResourceGetInvestigators",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchInvestigatorResourceGetInvestigators(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type InvestigatorResourceAddPersonAsInvestigatorPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceAddPersonAsInvestigatorError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceAddPersonAsInvestigatorVariables = {
  body?: Schemas.Investigator;
  pathParams: InvestigatorResourceAddPersonAsInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceAddPersonAsInvestigator = (
  variables: InvestigatorResourceAddPersonAsInvestigatorVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Investigator,
    InvestigatorResourceAddPersonAsInvestigatorError,
    Schemas.Investigator,
    {},
    {},
    InvestigatorResourceAddPersonAsInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "post",
    ...variables,
    signal,
  });

export const useInvestigatorResourceAddPersonAsInvestigator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Investigator,
      InvestigatorResourceAddPersonAsInvestigatorError,
      InvestigatorResourceAddPersonAsInvestigatorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Investigator,
    InvestigatorResourceAddPersonAsInvestigatorError,
    InvestigatorResourceAddPersonAsInvestigatorVariables
  >({
    mutationFn: (
      variables: InvestigatorResourceAddPersonAsInvestigatorVariables,
    ) =>
      fetchInvestigatorResourceAddPersonAsInvestigator({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InvestigatorResourceGetInvestigatorsAsObjectsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceGetInvestigatorsAsObjectsError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceGetInvestigatorsAsObjectsResponse =
  Schemas.Investigator[];

export type InvestigatorResourceGetInvestigatorsAsObjectsVariables = {
  pathParams: InvestigatorResourceGetInvestigatorsAsObjectsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceGetInvestigatorsAsObjects = (
  variables: InvestigatorResourceGetInvestigatorsAsObjectsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    InvestigatorResourceGetInvestigatorsAsObjectsResponse,
    InvestigatorResourceGetInvestigatorsAsObjectsError,
    undefined,
    {},
    {},
    InvestigatorResourceGetInvestigatorsAsObjectsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/asObjects",
    method: "get",
    ...variables,
    signal,
  });

export const useInvestigatorResourceGetInvestigatorsAsObjects = <
  TData = InvestigatorResourceGetInvestigatorsAsObjectsResponse,
>(
  variables: InvestigatorResourceGetInvestigatorsAsObjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      InvestigatorResourceGetInvestigatorsAsObjectsResponse,
      InvestigatorResourceGetInvestigatorsAsObjectsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    InvestigatorResourceGetInvestigatorsAsObjectsResponse,
    InvestigatorResourceGetInvestigatorsAsObjectsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators/asObjects",
      operationId: "investigatorResourceGetInvestigatorsAsObjects",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchInvestigatorResourceGetInvestigatorsAsObjects(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type InvestigatorResourceGetInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceGetInvestigatorError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceGetInvestigatorVariables = {
  pathParams: InvestigatorResourceGetInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceGetInvestigator = (
  variables: InvestigatorResourceGetInvestigatorVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Investigator,
    InvestigatorResourceGetInvestigatorError,
    undefined,
    {},
    {},
    InvestigatorResourceGetInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "get",
    ...variables,
    signal,
  });

export const useInvestigatorResourceGetInvestigator = <
  TData = Schemas.Investigator,
>(
  variables: InvestigatorResourceGetInvestigatorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Investigator,
      InvestigatorResourceGetInvestigatorError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Investigator,
    InvestigatorResourceGetInvestigatorError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
      operationId: "investigatorResourceGetInvestigator",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchInvestigatorResourceGetInvestigator(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type InvestigatorResourceRemoveInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceRemoveInvestigatorError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceRemoveInvestigatorVariables = {
  pathParams: InvestigatorResourceRemoveInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceRemoveInvestigator = (
  variables: InvestigatorResourceRemoveInvestigatorVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InvestigatorResourceRemoveInvestigatorError,
    undefined,
    {},
    {},
    InvestigatorResourceRemoveInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useInvestigatorResourceRemoveInvestigator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InvestigatorResourceRemoveInvestigatorError,
      InvestigatorResourceRemoveInvestigatorVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InvestigatorResourceRemoveInvestigatorError,
    InvestigatorResourceRemoveInvestigatorVariables
  >({
    mutationFn: (variables: InvestigatorResourceRemoveInvestigatorVariables) =>
      fetchInvestigatorResourceRemoveInvestigator({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InvestigatorResourceChangeInvestigatorForPhDPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceChangeInvestigatorForPhDError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceChangeInvestigatorForPhDVariables = {
  body?: boolean;
  pathParams: InvestigatorResourceChangeInvestigatorForPhDPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceChangeInvestigatorForPhD = (
  variables: InvestigatorResourceChangeInvestigatorForPhDVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InvestigatorResourceChangeInvestigatorForPhDError,
    boolean,
    {},
    {},
    InvestigatorResourceChangeInvestigatorForPhDPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/forPhD",
    method: "put",
    ...variables,
    signal,
  });

export const useInvestigatorResourceChangeInvestigatorForPhD = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InvestigatorResourceChangeInvestigatorForPhDError,
      InvestigatorResourceChangeInvestigatorForPhDVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InvestigatorResourceChangeInvestigatorForPhDError,
    InvestigatorResourceChangeInvestigatorForPhDVariables
  >({
    mutationFn: (
      variables: InvestigatorResourceChangeInvestigatorForPhDVariables,
    ) =>
      fetchInvestigatorResourceChangeInvestigatorForPhD({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type InvestigatorResourceChangeInvestigatorKindPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceChangeInvestigatorKindError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceChangeInvestigatorKindVariables = {
  body?: Schemas.InvestigatorKind;
  pathParams: InvestigatorResourceChangeInvestigatorKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceChangeInvestigatorKind = (
  variables: InvestigatorResourceChangeInvestigatorKindVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    InvestigatorResourceChangeInvestigatorKindError,
    Schemas.InvestigatorKind,
    {},
    {},
    InvestigatorResourceChangeInvestigatorKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useInvestigatorResourceChangeInvestigatorKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InvestigatorResourceChangeInvestigatorKindError,
      InvestigatorResourceChangeInvestigatorKindVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InvestigatorResourceChangeInvestigatorKindError,
    InvestigatorResourceChangeInvestigatorKindVariables
  >({
    mutationFn: (
      variables: InvestigatorResourceChangeInvestigatorKindVariables,
    ) =>
      fetchInvestigatorResourceChangeInvestigatorKind({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type JustificationsResourceCheckForPdfPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type JustificationsResourceCheckForPdfError =
  Fetcher.ErrorWrapper<undefined>;

export type JustificationsResourceCheckForPdfVariables = {
  pathParams: JustificationsResourceCheckForPdfPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchJustificationsResourceCheckForPdf = (
  variables: JustificationsResourceCheckForPdfVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    JustificationsResourceCheckForPdfError,
    undefined,
    {},
    {},
    JustificationsResourceCheckForPdfPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/checkForPdf",
    method: "get",
    ...variables,
    signal,
  });

export const useJustificationsResourceCheckForPdf = <TData = undefined,>(
  variables: JustificationsResourceCheckForPdfVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      JustificationsResourceCheckForPdfError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    JustificationsResourceCheckForPdfError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/justifications/checkForPdf",
      operationId: "justificationsResourceCheckForPdf",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchJustificationsResourceCheckForPdf(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type JustificationsResourceCreatePDFLaTexPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type JustificationsResourceCreatePDFLaTexQueryParams = {
  submittedProposal?: boolean;
  warningsAsErrors?: boolean;
};

export type JustificationsResourceCreatePDFLaTexError =
  Fetcher.ErrorWrapper<undefined>;

export type JustificationsResourceCreatePDFLaTexVariables = {
  pathParams: JustificationsResourceCreatePDFLaTexPathParams;
  queryParams?: JustificationsResourceCreatePDFLaTexQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchJustificationsResourceCreatePDFLaTex = (
  variables: JustificationsResourceCreatePDFLaTexVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    JustificationsResourceCreatePDFLaTexError,
    undefined,
    {},
    JustificationsResourceCreatePDFLaTexQueryParams,
    JustificationsResourceCreatePDFLaTexPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/latexPdf",
    method: "post",
    ...variables,
    signal,
  });

export const useJustificationsResourceCreatePDFLaTex = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      JustificationsResourceCreatePDFLaTexError,
      JustificationsResourceCreatePDFLaTexVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    JustificationsResourceCreatePDFLaTexError,
    JustificationsResourceCreatePDFLaTexVariables
  >({
    mutationFn: (variables: JustificationsResourceCreatePDFLaTexVariables) =>
      fetchJustificationsResourceCreatePDFLaTex({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type JustificationsResourceDownloadLatexPdfPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type JustificationsResourceDownloadLatexPdfError =
  Fetcher.ErrorWrapper<undefined>;

export type JustificationsResourceDownloadLatexPdfVariables = {
  pathParams: JustificationsResourceDownloadLatexPdfPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchJustificationsResourceDownloadLatexPdf = (
  variables: JustificationsResourceDownloadLatexPdfVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    JustificationsResourceDownloadLatexPdfError,
    undefined,
    {},
    {},
    JustificationsResourceDownloadLatexPdfPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/latexPdf/download",
    method: "get",
    ...variables,
    signal,
  });

export const useJustificationsResourceDownloadLatexPdf = <TData = undefined,>(
  variables: JustificationsResourceDownloadLatexPdfVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      JustificationsResourceDownloadLatexPdfError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    JustificationsResourceDownloadLatexPdfError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/justifications/latexPdf/download",
      operationId: "justificationsResourceDownloadLatexPdf",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchJustificationsResourceDownloadLatexPdf(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type JustificationsResourceGetJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type JustificationsResourceGetJustificationError =
  Fetcher.ErrorWrapper<undefined>;

export type JustificationsResourceGetJustificationVariables = {
  pathParams: JustificationsResourceGetJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchJustificationsResourceGetJustification = (
  variables: JustificationsResourceGetJustificationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Justification,
    JustificationsResourceGetJustificationError,
    undefined,
    {},
    {},
    JustificationsResourceGetJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "get",
    ...variables,
    signal,
  });

export const useJustificationsResourceGetJustification = <
  TData = Schemas.Justification,
>(
  variables: JustificationsResourceGetJustificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Justification,
      JustificationsResourceGetJustificationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Justification,
    JustificationsResourceGetJustificationError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/justifications/{which}",
      operationId: "justificationsResourceGetJustification",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchJustificationsResourceGetJustification(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type JustificationsResourceUpdateJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type JustificationsResourceUpdateJustificationError =
  Fetcher.ErrorWrapper<undefined>;

export type JustificationsResourceUpdateJustificationVariables = {
  body?: Schemas.Justification;
  pathParams: JustificationsResourceUpdateJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchJustificationsResourceUpdateJustification = (
  variables: JustificationsResourceUpdateJustificationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Justification,
    JustificationsResourceUpdateJustificationError,
    Schemas.Justification,
    {},
    {},
    JustificationsResourceUpdateJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "put",
    ...variables,
    signal,
  });

export const useJustificationsResourceUpdateJustification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Justification,
      JustificationsResourceUpdateJustificationError,
      JustificationsResourceUpdateJustificationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Justification,
    JustificationsResourceUpdateJustificationError,
    JustificationsResourceUpdateJustificationVariables
  >({
    mutationFn: (
      variables: JustificationsResourceUpdateJustificationVariables,
    ) =>
      fetchJustificationsResourceUpdateJustification({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type JustificationsResourceAddJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type JustificationsResourceAddJustificationError =
  Fetcher.ErrorWrapper<undefined>;

export type JustificationsResourceAddJustificationVariables = {
  body?: Schemas.Justification;
  pathParams: JustificationsResourceAddJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchJustificationsResourceAddJustification = (
  variables: JustificationsResourceAddJustificationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Justification,
    JustificationsResourceAddJustificationError,
    Schemas.Justification,
    {},
    {},
    JustificationsResourceAddJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "post",
    ...variables,
    signal,
  });

export const useJustificationsResourceAddJustification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Justification,
      JustificationsResourceAddJustificationError,
      JustificationsResourceAddJustificationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Justification,
    JustificationsResourceAddJustificationError,
    JustificationsResourceAddJustificationVariables
  >({
    mutationFn: (variables: JustificationsResourceAddJustificationVariables) =>
      fetchJustificationsResourceAddJustification({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceGetObservingProposalKindPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetObservingProposalKindError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetObservingProposalKindVariables = {
  pathParams: ProposalResourceGetObservingProposalKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetObservingProposalKind = (
  variables: ProposalResourceGetObservingProposalKindVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalKind,
    ProposalResourceGetObservingProposalKindError,
    undefined,
    {},
    {},
    ProposalResourceGetObservingProposalKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/kind",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetObservingProposalKind = <
  TData = Schemas.ProposalKind,
>(
  variables: ProposalResourceGetObservingProposalKindVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalKind,
      ProposalResourceGetObservingProposalKindError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalKind,
    ProposalResourceGetObservingProposalKindError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/kind",
      operationId: "proposalResourceGetObservingProposalKind",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetObservingProposalKind(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceChangeKindPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceChangeKindError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceChangeKindVariables = {
  pathParams: ProposalResourceChangeKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceChangeKind = (
  variables: ProposalResourceChangeKindVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceChangeKindError,
    undefined,
    {},
    {},
    ProposalResourceChangeKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceChangeKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceChangeKindError,
      ProposalResourceChangeKindVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceChangeKindError,
    ProposalResourceChangeKindVariables
  >({
    mutationFn: (variables: ProposalResourceChangeKindVariables) =>
      fetchProposalResourceChangeKind({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ObservationResourceGetObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceGetObservationsQueryParams = {
  srcName?: string;
  type?: Schemas.ObsType;
};

export type ObservationResourceGetObservationsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceGetObservationsResponse =
  Schemas.ObjectIdentifier[];

export type ObservationResourceGetObservationsVariables = {
  pathParams: ObservationResourceGetObservationsPathParams;
  queryParams?: ObservationResourceGetObservationsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceGetObservations = (
  variables: ObservationResourceGetObservationsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservationResourceGetObservationsResponse,
    ObservationResourceGetObservationsError,
    undefined,
    {},
    ObservationResourceGetObservationsQueryParams,
    ObservationResourceGetObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "get",
    ...variables,
    signal,
  });

export const useObservationResourceGetObservations = <
  TData = ObservationResourceGetObservationsResponse,
>(
  variables: ObservationResourceGetObservationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservationResourceGetObservationsResponse,
      ObservationResourceGetObservationsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservationResourceGetObservationsResponse,
    ObservationResourceGetObservationsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations",
      operationId: "observationResourceGetObservations",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservationResourceGetObservations(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservationResourceAddNewObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceAddNewObservationError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceAddNewObservationVariables = {
  body?: Schemas.Observation;
  pathParams: ObservationResourceAddNewObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceAddNewObservation = (
  variables: ObservationResourceAddNewObservationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Observation,
    ObservationResourceAddNewObservationError,
    Schemas.Observation,
    {},
    {},
    ObservationResourceAddNewObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "post",
    ...variables,
    signal,
  });

export const useObservationResourceAddNewObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Observation,
      ObservationResourceAddNewObservationError,
      ObservationResourceAddNewObservationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Observation,
    ObservationResourceAddNewObservationError,
    ObservationResourceAddNewObservationVariables
  >({
    mutationFn: (variables: ObservationResourceAddNewObservationVariables) =>
      fetchObservationResourceAddNewObservation({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceGetObservationPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceGetObservationError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceGetObservationVariables = {
  pathParams: ObservationResourceGetObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceGetObservation = (
  variables: ObservationResourceGetObservationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Observation,
    ObservationResourceGetObservationError,
    undefined,
    {},
    {},
    ObservationResourceGetObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservationResourceGetObservation = <
  TData = Schemas.Observation,
>(
  variables: ObservationResourceGetObservationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Observation,
      ObservationResourceGetObservationError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Observation,
    ObservationResourceGetObservationError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}",
      operationId: "observationResourceGetObservation",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservationResourceGetObservation(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservationResourceRemoveObservationPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceRemoveObservationError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceRemoveObservationVariables = {
  pathParams: ObservationResourceRemoveObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceRemoveObservation = (
  variables: ObservationResourceRemoveObservationVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceRemoveObservationError,
    undefined,
    {},
    {},
    ObservationResourceRemoveObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useObservationResourceRemoveObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceRemoveObservationError,
      ObservationResourceRemoveObservationVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceRemoveObservationError,
    ObservationResourceRemoveObservationVariables
  >({
    mutationFn: (variables: ObservationResourceRemoveObservationVariables) =>
      fetchObservationResourceRemoveObservation({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceReplaceIntendedUsePathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceIntendedUseError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceIntendedUseVariables = {
  body?: Schemas.CalibrationTargetIntendedUse;
  pathParams: ObservationResourceReplaceIntendedUsePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceIntendedUse = (
  variables: ObservationResourceReplaceIntendedUseVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceIntendedUseError,
    Schemas.CalibrationTargetIntendedUse,
    {},
    {},
    ObservationResourceReplaceIntendedUsePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/calibrationIntendedUse",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceIntendedUse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceIntendedUseError,
      ObservationResourceReplaceIntendedUseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceIntendedUseError,
    ObservationResourceReplaceIntendedUseVariables
  >({
    mutationFn: (variables: ObservationResourceReplaceIntendedUseVariables) =>
      fetchObservationResourceReplaceIntendedUse({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceGetConstraintsPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceGetConstraintsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceGetConstraintsResponse =
  Schemas.ObservingConstraint[];

export type ObservationResourceGetConstraintsVariables = {
  pathParams: ObservationResourceGetConstraintsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceGetConstraints = (
  variables: ObservationResourceGetConstraintsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ObservationResourceGetConstraintsResponse,
    ObservationResourceGetConstraintsError,
    undefined,
    {},
    {},
    ObservationResourceGetConstraintsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "get",
    ...variables,
    signal,
  });

export const useObservationResourceGetConstraints = <
  TData = ObservationResourceGetConstraintsResponse,
>(
  variables: ObservationResourceGetConstraintsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservationResourceGetConstraintsResponse,
      ObservationResourceGetConstraintsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservationResourceGetConstraintsResponse,
    ObservationResourceGetConstraintsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
      operationId: "observationResourceGetConstraints",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservationResourceGetConstraints(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservationResourceAddNewConstraintPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceAddNewConstraintError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceAddNewConstraintVariables = {
  body?: Schemas.ObservingConstraint;
  pathParams: ObservationResourceAddNewConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceAddNewConstraint = (
  variables: ObservationResourceAddNewConstraintVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingConstraint,
    ObservationResourceAddNewConstraintError,
    Schemas.ObservingConstraint,
    {},
    {},
    ObservationResourceAddNewConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "post",
    ...variables,
    signal,
  });

export const useObservationResourceAddNewConstraint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ObservingConstraint,
      ObservationResourceAddNewConstraintError,
      ObservationResourceAddNewConstraintVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ObservingConstraint,
    ObservationResourceAddNewConstraintError,
    ObservationResourceAddNewConstraintVariables
  >({
    mutationFn: (variables: ObservationResourceAddNewConstraintVariables) =>
      fetchObservationResourceAddNewConstraint({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceGetConstraintPathParams = {
  /**
   * @format int64
   */
  constraintId: number;
  /**
   * @format int64
   */
  observationId: number;
};

export type ObservationResourceGetConstraintError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceGetConstraintVariables = {
  pathParams: ObservationResourceGetConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceGetConstraint = (
  variables: ObservationResourceGetConstraintVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ObservingConstraint,
    ObservationResourceGetConstraintError,
    undefined,
    {},
    {},
    ObservationResourceGetConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservationResourceGetConstraint = <
  TData = Schemas.ObservingConstraint,
>(
  variables: ObservationResourceGetConstraintVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObservingConstraint,
      ObservationResourceGetConstraintError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObservingConstraint,
    ObservationResourceGetConstraintError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}",
      operationId: "observationResourceGetConstraint",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchObservationResourceGetConstraint(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ObservationResourceRemoveConstraintPathParams = {
  /**
   * @format int64
   */
  constraintId: number;
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceRemoveConstraintError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceRemoveConstraintVariables = {
  pathParams: ObservationResourceRemoveConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceRemoveConstraint = (
  variables: ObservationResourceRemoveConstraintVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceRemoveConstraintError,
    undefined,
    {},
    {},
    ObservationResourceRemoveConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useObservationResourceRemoveConstraint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceRemoveConstraintError,
      ObservationResourceRemoveConstraintVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceRemoveConstraintError,
    ObservationResourceRemoveConstraintVariables
  >({
    mutationFn: (variables: ObservationResourceRemoveConstraintVariables) =>
      fetchObservationResourceRemoveConstraint({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceReplaceFieldPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceFieldError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceFieldVariables = {
  body?: Schemas.Field;
  pathParams: ObservationResourceReplaceFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceField = (
  variables: ObservationResourceReplaceFieldVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceFieldError,
    Schemas.Field,
    {},
    {},
    ObservationResourceReplaceFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/field",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceFieldError,
      ObservationResourceReplaceFieldVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceFieldError,
    ObservationResourceReplaceFieldVariables
  >({
    mutationFn: (variables: ObservationResourceReplaceFieldVariables) =>
      fetchObservationResourceReplaceField({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ObservationResourceReplaceTargetsPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceTargetsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceTargetsRequestBody = Schemas.Target[];

export type ObservationResourceReplaceTargetsVariables = {
  body?: ObservationResourceReplaceTargetsRequestBody;
  pathParams: ObservationResourceReplaceTargetsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceTargets = (
  variables: ObservationResourceReplaceTargetsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceTargetsError,
    ObservationResourceReplaceTargetsRequestBody,
    {},
    {},
    ObservationResourceReplaceTargetsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/target",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceTargets = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceTargetsError,
      ObservationResourceReplaceTargetsVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceTargetsError,
    ObservationResourceReplaceTargetsVariables
  >({
    mutationFn: (variables: ObservationResourceReplaceTargetsVariables) =>
      fetchObservationResourceReplaceTargets({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceReplaceTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceTechnicalGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: ObservationResourceReplaceTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceTechnicalGoal = (
  variables: ObservationResourceReplaceTechnicalGoalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceTechnicalGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    ObservationResourceReplaceTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/technicalGoal",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceTechnicalGoalError,
      ObservationResourceReplaceTechnicalGoalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceTechnicalGoalError,
    ObservationResourceReplaceTechnicalGoalVariables
  >({
    mutationFn: (variables: ObservationResourceReplaceTechnicalGoalVariables) =>
      fetchObservationResourceReplaceTechnicalGoal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ObservationResourceReplaceTimingWindowPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  timingWindowId: number;
};

export type ObservationResourceReplaceTimingWindowError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceTimingWindowVariables = {
  body?: Schemas.TimingWindow;
  pathParams: ObservationResourceReplaceTimingWindowPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceTimingWindow = (
  variables: ObservationResourceReplaceTimingWindowVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.TimingWindow,
    ObservationResourceReplaceTimingWindowError,
    Schemas.TimingWindow,
    {},
    {},
    ObservationResourceReplaceTimingWindowPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/timingWindows/{timingWindowId}",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceTimingWindow = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TimingWindow,
      ObservationResourceReplaceTimingWindowError,
      ObservationResourceReplaceTimingWindowVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.TimingWindow,
    ObservationResourceReplaceTimingWindowError,
    ObservationResourceReplaceTimingWindowVariables
  >({
    mutationFn: (variables: ObservationResourceReplaceTimingWindowVariables) =>
      fetchObservationResourceReplaceTimingWindow({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceAddRelatedProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddRelatedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddRelatedProposalVariables = {
  pathParams: ProposalResourceAddRelatedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddRelatedProposal = (
  variables: ProposalResourceAddRelatedProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceAddRelatedProposalError,
    undefined,
    {},
    {},
    ProposalResourceAddRelatedProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/relatedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceAddRelatedProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceAddRelatedProposalError,
      ProposalResourceAddRelatedProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceAddRelatedProposalError,
    ProposalResourceAddRelatedProposalVariables
  >({
    mutationFn: (variables: ProposalResourceAddRelatedProposalVariables) =>
      fetchProposalResourceAddRelatedProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceReplaceSummaryPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceReplaceSummaryError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceReplaceSummaryVariables = {
  pathParams: ProposalResourceReplaceSummaryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceReplaceSummary = (
  variables: ProposalResourceReplaceSummaryVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceReplaceSummaryError,
    undefined,
    {},
    {},
    ProposalResourceReplaceSummaryPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/summary",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceReplaceSummary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceReplaceSummaryError,
      ProposalResourceReplaceSummaryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceReplaceSummaryError,
    ProposalResourceReplaceSummaryVariables
  >({
    mutationFn: (variables: ProposalResourceReplaceSummaryVariables) =>
      fetchProposalResourceReplaceSummary({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SupportingDocumentResourceGetSupportingDocumentsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceGetSupportingDocumentsQueryParams = {
  title?: string;
};

export type SupportingDocumentResourceGetSupportingDocumentsError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceGetSupportingDocumentsResponse =
  Schemas.ObjectIdentifier[];

export type SupportingDocumentResourceGetSupportingDocumentsVariables = {
  pathParams: SupportingDocumentResourceGetSupportingDocumentsPathParams;
  queryParams?: SupportingDocumentResourceGetSupportingDocumentsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceGetSupportingDocuments = (
  variables: SupportingDocumentResourceGetSupportingDocumentsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    SupportingDocumentResourceGetSupportingDocumentsResponse,
    SupportingDocumentResourceGetSupportingDocumentsError,
    undefined,
    {},
    SupportingDocumentResourceGetSupportingDocumentsQueryParams,
    SupportingDocumentResourceGetSupportingDocumentsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "get",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceGetSupportingDocuments = <
  TData = SupportingDocumentResourceGetSupportingDocumentsResponse,
>(
  variables: SupportingDocumentResourceGetSupportingDocumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SupportingDocumentResourceGetSupportingDocumentsResponse,
      SupportingDocumentResourceGetSupportingDocumentsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    SupportingDocumentResourceGetSupportingDocumentsResponse,
    SupportingDocumentResourceGetSupportingDocumentsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments",
      operationId: "supportingDocumentResourceGetSupportingDocuments",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSupportingDocumentResourceGetSupportingDocuments(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SupportingDocumentResourceUploadSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceUploadSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceUploadSupportingDocumentRequestBody = {
  document?: Schemas.UploadItemSchema;
  title?: string;
};

export type SupportingDocumentResourceUploadSupportingDocumentVariables = {
  body?: SupportingDocumentResourceUploadSupportingDocumentRequestBody;
  pathParams: SupportingDocumentResourceUploadSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceUploadSupportingDocument = (
  variables: SupportingDocumentResourceUploadSupportingDocumentVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SupportingDocument,
    SupportingDocumentResourceUploadSupportingDocumentError,
    SupportingDocumentResourceUploadSupportingDocumentRequestBody,
    {},
    {},
    SupportingDocumentResourceUploadSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "post",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceUploadSupportingDocument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SupportingDocument,
      SupportingDocumentResourceUploadSupportingDocumentError,
      SupportingDocumentResourceUploadSupportingDocumentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.SupportingDocument,
    SupportingDocumentResourceUploadSupportingDocumentError,
    SupportingDocumentResourceUploadSupportingDocumentVariables
  >({
    mutationFn: (
      variables: SupportingDocumentResourceUploadSupportingDocumentVariables,
    ) =>
      fetchSupportingDocumentResourceUploadSupportingDocument({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SupportingDocumentResourceGetSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceGetSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceGetSupportingDocumentVariables = {
  pathParams: SupportingDocumentResourceGetSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceGetSupportingDocument = (
  variables: SupportingDocumentResourceGetSupportingDocumentVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SupportingDocument,
    SupportingDocumentResourceGetSupportingDocumentError,
    undefined,
    {},
    {},
    SupportingDocumentResourceGetSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceGetSupportingDocument = <
  TData = Schemas.SupportingDocument,
>(
  variables: SupportingDocumentResourceGetSupportingDocumentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SupportingDocument,
      SupportingDocumentResourceGetSupportingDocumentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SupportingDocument,
    SupportingDocumentResourceGetSupportingDocumentError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
      operationId: "supportingDocumentResourceGetSupportingDocument",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSupportingDocumentResourceGetSupportingDocument(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SupportingDocumentResourceRemoveSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceRemoveSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceRemoveSupportingDocumentVariables = {
  pathParams: SupportingDocumentResourceRemoveSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceRemoveSupportingDocument = (
  variables: SupportingDocumentResourceRemoveSupportingDocumentVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SupportingDocumentResourceRemoveSupportingDocumentError,
    undefined,
    {},
    {},
    SupportingDocumentResourceRemoveSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceRemoveSupportingDocument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SupportingDocumentResourceRemoveSupportingDocumentError,
      SupportingDocumentResourceRemoveSupportingDocumentVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SupportingDocumentResourceRemoveSupportingDocumentError,
    SupportingDocumentResourceRemoveSupportingDocumentVariables
  >({
    mutationFn: (
      variables: SupportingDocumentResourceRemoveSupportingDocumentVariables,
    ) =>
      fetchSupportingDocumentResourceRemoveSupportingDocument({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SupportingDocumentResourceDownloadSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceDownloadSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceDownloadSupportingDocumentVariables = {
  pathParams: SupportingDocumentResourceDownloadSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceDownloadSupportingDocument = (
  variables: SupportingDocumentResourceDownloadSupportingDocumentVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SupportingDocumentResourceDownloadSupportingDocumentError,
    undefined,
    {},
    {},
    SupportingDocumentResourceDownloadSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/get-file",
    method: "get",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceDownloadSupportingDocument = <
  TData = undefined,
>(
  variables: SupportingDocumentResourceDownloadSupportingDocumentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      SupportingDocumentResourceDownloadSupportingDocumentError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    SupportingDocumentResourceDownloadSupportingDocumentError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/get-file",
      operationId: "supportingDocumentResourceDownloadSupportingDocument",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSupportingDocumentResourceDownloadSupportingDocument(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SupportingDocumentResourceReplaceSupportingDocumentTitlePathParams =
  {
    /**
     * @format int64
     */
    id: number;
    /**
     * @format int64
     */
    proposalCode: number;
  };

export type SupportingDocumentResourceReplaceSupportingDocumentTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceReplaceSupportingDocumentTitleVariables =
  {
    pathParams: SupportingDocumentResourceReplaceSupportingDocumentTitlePathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceReplaceSupportingDocumentTitle = (
  variables: SupportingDocumentResourceReplaceSupportingDocumentTitleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SupportingDocument,
    SupportingDocumentResourceReplaceSupportingDocumentTitleError,
    undefined,
    {},
    {},
    SupportingDocumentResourceReplaceSupportingDocumentTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceReplaceSupportingDocumentTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SupportingDocument,
      SupportingDocumentResourceReplaceSupportingDocumentTitleError,
      SupportingDocumentResourceReplaceSupportingDocumentTitleVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.SupportingDocument,
    SupportingDocumentResourceReplaceSupportingDocumentTitleError,
    SupportingDocumentResourceReplaceSupportingDocumentTitleVariables
  >({
    mutationFn: (
      variables: SupportingDocumentResourceReplaceSupportingDocumentTitleVariables,
    ) =>
      fetchSupportingDocumentResourceReplaceSupportingDocumentTitle({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceGetTargetsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetTargetsQueryParams = {
  sourceName?: string;
};

export type ProposalResourceGetTargetsError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetTargetsResponse = Schemas.ObjectIdentifier[];

export type ProposalResourceGetTargetsVariables = {
  pathParams: ProposalResourceGetTargetsPathParams;
  queryParams?: ProposalResourceGetTargetsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetTargets = (
  variables: ProposalResourceGetTargetsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ProposalResourceGetTargetsResponse,
    ProposalResourceGetTargetsError,
    undefined,
    {},
    ProposalResourceGetTargetsQueryParams,
    ProposalResourceGetTargetsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetTargets = <
  TData = ProposalResourceGetTargetsResponse,
>(
  variables: ProposalResourceGetTargetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetTargetsResponse,
      ProposalResourceGetTargetsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetTargetsResponse,
    ProposalResourceGetTargetsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/targets",
      operationId: "proposalResourceGetTargets",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetTargets(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceAddNewTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddNewTargetError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddNewTargetVariables = {
  body?: Schemas.Target;
  pathParams: ProposalResourceAddNewTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddNewTarget = (
  variables: ProposalResourceAddNewTargetVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Target,
    ProposalResourceAddNewTargetError,
    Schemas.Target,
    {},
    {},
    ProposalResourceAddNewTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceAddNewTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Target,
      ProposalResourceAddNewTargetError,
      ProposalResourceAddNewTargetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Target,
    ProposalResourceAddNewTargetError,
    ProposalResourceAddNewTargetVariables
  >({
    mutationFn: (variables: ProposalResourceAddNewTargetVariables) =>
      fetchProposalResourceAddNewTarget({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProposalResourceUploadTargetListPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceUploadTargetListError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceUploadTargetListRequestBody = {
  document?: Schemas.UploadTargetList;
};

export type ProposalResourceUploadTargetListVariables = {
  body?: ProposalResourceUploadTargetListRequestBody;
  pathParams: ProposalResourceUploadTargetListPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceUploadTargetList = (
  variables: ProposalResourceUploadTargetListVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceUploadTargetListError,
    ProposalResourceUploadTargetListRequestBody,
    {},
    {},
    ProposalResourceUploadTargetListPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets/uploadList",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceUploadTargetList = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceUploadTargetListError,
      ProposalResourceUploadTargetListVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceUploadTargetListError,
    ProposalResourceUploadTargetListVariables
  >({
    mutationFn: (variables: ProposalResourceUploadTargetListVariables) =>
      fetchProposalResourceUploadTargetList({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceGetTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  targetId: number;
};

export type ProposalResourceGetTargetError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetTargetVariables = {
  pathParams: ProposalResourceGetTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetTarget = (
  variables: ProposalResourceGetTargetVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Target,
    ProposalResourceGetTargetError,
    undefined,
    {},
    {},
    ProposalResourceGetTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets/{targetId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetTarget = <TData = Schemas.Target,>(
  variables: ProposalResourceGetTargetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Target,
      ProposalResourceGetTargetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Target,
    ProposalResourceGetTargetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/targets/{targetId}",
      operationId: "proposalResourceGetTarget",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetTarget(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceRemoveTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  targetId: number;
};

export type ProposalResourceRemoveTargetError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceRemoveTargetVariables = {
  pathParams: ProposalResourceRemoveTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceRemoveTarget = (
  variables: ProposalResourceRemoveTargetVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceRemoveTargetError,
    undefined,
    {},
    {},
    ProposalResourceRemoveTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets/{targetId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceRemoveTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceRemoveTargetError,
      ProposalResourceRemoveTargetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceRemoveTargetError,
    ProposalResourceRemoveTargetVariables
  >({
    mutationFn: (variables: ProposalResourceRemoveTargetVariables) =>
      fetchProposalResourceRemoveTarget({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TechnicalGoalResourceGetTechnicalGoalsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type TechnicalGoalResourceGetTechnicalGoalsError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceGetTechnicalGoalsResponse =
  Schemas.ObjectIdentifier[];

export type TechnicalGoalResourceGetTechnicalGoalsVariables = {
  pathParams: TechnicalGoalResourceGetTechnicalGoalsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceGetTechnicalGoals = (
  variables: TechnicalGoalResourceGetTechnicalGoalsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    TechnicalGoalResourceGetTechnicalGoalsResponse,
    TechnicalGoalResourceGetTechnicalGoalsError,
    undefined,
    {},
    {},
    TechnicalGoalResourceGetTechnicalGoalsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals",
    method: "get",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceGetTechnicalGoals = <
  TData = TechnicalGoalResourceGetTechnicalGoalsResponse,
>(
  variables: TechnicalGoalResourceGetTechnicalGoalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TechnicalGoalResourceGetTechnicalGoalsResponse,
      TechnicalGoalResourceGetTechnicalGoalsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    TechnicalGoalResourceGetTechnicalGoalsResponse,
    TechnicalGoalResourceGetTechnicalGoalsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/technicalGoals",
      operationId: "technicalGoalResourceGetTechnicalGoals",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTechnicalGoalResourceGetTechnicalGoals(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TechnicalGoalResourceAddTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type TechnicalGoalResourceAddTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceAddTechnicalGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: TechnicalGoalResourceAddTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceAddTechnicalGoal = (
  variables: TechnicalGoalResourceAddTechnicalGoalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.TechnicalGoal,
    TechnicalGoalResourceAddTechnicalGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    TechnicalGoalResourceAddTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals",
    method: "post",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceAddTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TechnicalGoal,
      TechnicalGoalResourceAddTechnicalGoalError,
      TechnicalGoalResourceAddTechnicalGoalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.TechnicalGoal,
    TechnicalGoalResourceAddTechnicalGoalError,
    TechnicalGoalResourceAddTechnicalGoalVariables
  >({
    mutationFn: (variables: TechnicalGoalResourceAddTechnicalGoalVariables) =>
      fetchTechnicalGoalResourceAddTechnicalGoal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceGetTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceGetTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceGetTechnicalGoalVariables = {
  pathParams: TechnicalGoalResourceGetTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceGetTechnicalGoal = (
  variables: TechnicalGoalResourceGetTechnicalGoalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.TechnicalGoal,
    TechnicalGoalResourceGetTechnicalGoalError,
    undefined,
    {},
    {},
    TechnicalGoalResourceGetTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}",
    method: "get",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceGetTechnicalGoal = <
  TData = Schemas.TechnicalGoal,
>(
  variables: TechnicalGoalResourceGetTechnicalGoalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TechnicalGoal,
      TechnicalGoalResourceGetTechnicalGoalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.TechnicalGoal,
    TechnicalGoalResourceGetTechnicalGoalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}",
      operationId: "technicalGoalResourceGetTechnicalGoal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTechnicalGoalResourceGetTechnicalGoal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type TechnicalGoalResourceRemoveTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceRemoveTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceRemoveTechnicalGoalVariables = {
  pathParams: TechnicalGoalResourceRemoveTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceRemoveTechnicalGoal = (
  variables: TechnicalGoalResourceRemoveTechnicalGoalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TechnicalGoalResourceRemoveTechnicalGoalError,
    undefined,
    {},
    {},
    TechnicalGoalResourceRemoveTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceRemoveTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TechnicalGoalResourceRemoveTechnicalGoalError,
      TechnicalGoalResourceRemoveTechnicalGoalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TechnicalGoalResourceRemoveTechnicalGoalError,
    TechnicalGoalResourceRemoveTechnicalGoalVariables
  >({
    mutationFn: (
      variables: TechnicalGoalResourceRemoveTechnicalGoalVariables,
    ) =>
      fetchTechnicalGoalResourceRemoveTechnicalGoal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceReplacePerformanceParametersPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceReplacePerformanceParametersError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceReplacePerformanceParametersVariables = {
  body?: Schemas.PerformanceParameters;
  pathParams: TechnicalGoalResourceReplacePerformanceParametersPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceReplacePerformanceParameters = (
  variables: TechnicalGoalResourceReplacePerformanceParametersVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.PerformanceParameters,
    TechnicalGoalResourceReplacePerformanceParametersError,
    Schemas.PerformanceParameters,
    {},
    {},
    TechnicalGoalResourceReplacePerformanceParametersPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/performanceParameters",
    method: "put",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceReplacePerformanceParameters = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PerformanceParameters,
      TechnicalGoalResourceReplacePerformanceParametersError,
      TechnicalGoalResourceReplacePerformanceParametersVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.PerformanceParameters,
    TechnicalGoalResourceReplacePerformanceParametersError,
    TechnicalGoalResourceReplacePerformanceParametersVariables
  >({
    mutationFn: (
      variables: TechnicalGoalResourceReplacePerformanceParametersVariables,
    ) =>
      fetchTechnicalGoalResourceReplacePerformanceParameters({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceAddSpectrumPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceAddSpectrumError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceAddSpectrumVariables = {
  body?: Schemas.ScienceSpectralWindow;
  pathParams: TechnicalGoalResourceAddSpectrumPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceAddSpectrum = (
  variables: TechnicalGoalResourceAddSpectrumVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ScienceSpectralWindow,
    TechnicalGoalResourceAddSpectrumError,
    Schemas.ScienceSpectralWindow,
    {},
    {},
    TechnicalGoalResourceAddSpectrumPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum",
    method: "post",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceAddSpectrum = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScienceSpectralWindow,
      TechnicalGoalResourceAddSpectrumError,
      TechnicalGoalResourceAddSpectrumVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ScienceSpectralWindow,
    TechnicalGoalResourceAddSpectrumError,
    TechnicalGoalResourceAddSpectrumVariables
  >({
    mutationFn: (variables: TechnicalGoalResourceAddSpectrumVariables) =>
      fetchTechnicalGoalResourceAddSpectrum({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceReplaceSpectrumPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  spectralWindowId: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceReplaceSpectrumError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceReplaceSpectrumVariables = {
  body?: Schemas.ScienceSpectralWindow;
  pathParams: TechnicalGoalResourceReplaceSpectrumPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceReplaceSpectrum = (
  variables: TechnicalGoalResourceReplaceSpectrumVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ScienceSpectralWindow,
    TechnicalGoalResourceReplaceSpectrumError,
    Schemas.ScienceSpectralWindow,
    {},
    {},
    TechnicalGoalResourceReplaceSpectrumPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{spectralWindowId}",
    method: "put",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceReplaceSpectrum = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ScienceSpectralWindow,
      TechnicalGoalResourceReplaceSpectrumError,
      TechnicalGoalResourceReplaceSpectrumVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ScienceSpectralWindow,
    TechnicalGoalResourceReplaceSpectrumError,
    TechnicalGoalResourceReplaceSpectrumVariables
  >({
    mutationFn: (variables: TechnicalGoalResourceReplaceSpectrumVariables) =>
      fetchTechnicalGoalResourceReplaceSpectrum({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceRemoveSpectrumPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  spectralWindowId: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceRemoveSpectrumError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceRemoveSpectrumVariables = {
  pathParams: TechnicalGoalResourceRemoveSpectrumPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceRemoveSpectrum = (
  variables: TechnicalGoalResourceRemoveSpectrumVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TechnicalGoalResourceRemoveSpectrumError,
    undefined,
    {},
    {},
    TechnicalGoalResourceRemoveSpectrumPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{spectralWindowId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceRemoveSpectrum = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TechnicalGoalResourceRemoveSpectrumError,
      TechnicalGoalResourceRemoveSpectrumVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TechnicalGoalResourceRemoveSpectrumError,
    TechnicalGoalResourceRemoveSpectrumVariables
  >({
    mutationFn: (variables: TechnicalGoalResourceRemoveSpectrumVariables) =>
      fetchTechnicalGoalResourceRemoveSpectrum({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceAddExpectedSpectralLinePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  spectralWindowId: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceAddExpectedSpectralLineError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceAddExpectedSpectralLineVariables = {
  body?: Schemas.ExpectedSpectralLine;
  pathParams: TechnicalGoalResourceAddExpectedSpectralLinePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceAddExpectedSpectralLine = (
  variables: TechnicalGoalResourceAddExpectedSpectralLineVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ExpectedSpectralLine,
    TechnicalGoalResourceAddExpectedSpectralLineError,
    Schemas.ExpectedSpectralLine,
    {},
    {},
    TechnicalGoalResourceAddExpectedSpectralLinePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{spectralWindowId}/expectedSpectralLine",
    method: "post",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceAddExpectedSpectralLine = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ExpectedSpectralLine,
      TechnicalGoalResourceAddExpectedSpectralLineError,
      TechnicalGoalResourceAddExpectedSpectralLineVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ExpectedSpectralLine,
    TechnicalGoalResourceAddExpectedSpectralLineError,
    TechnicalGoalResourceAddExpectedSpectralLineVariables
  >({
    mutationFn: (
      variables: TechnicalGoalResourceAddExpectedSpectralLineVariables,
    ) =>
      fetchTechnicalGoalResourceAddExpectedSpectralLine({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type TechnicalGoalResourceRemoveExpectedSpectralLinePathParams = {
  /**
   * @format int32
   */
  lineIndex: number;
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  spectralWindowId: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type TechnicalGoalResourceRemoveExpectedSpectralLineError =
  Fetcher.ErrorWrapper<undefined>;

export type TechnicalGoalResourceRemoveExpectedSpectralLineVariables = {
  pathParams: TechnicalGoalResourceRemoveExpectedSpectralLinePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTechnicalGoalResourceRemoveExpectedSpectralLine = (
  variables: TechnicalGoalResourceRemoveExpectedSpectralLineVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    TechnicalGoalResourceRemoveExpectedSpectralLineError,
    undefined,
    {},
    {},
    TechnicalGoalResourceRemoveExpectedSpectralLinePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{spectralWindowId}/expectedSpectralLine/{lineIndex}",
    method: "delete",
    ...variables,
    signal,
  });

export const useTechnicalGoalResourceRemoveExpectedSpectralLine = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TechnicalGoalResourceRemoveExpectedSpectralLineError,
      TechnicalGoalResourceRemoveExpectedSpectralLineVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TechnicalGoalResourceRemoveExpectedSpectralLineError,
    TechnicalGoalResourceRemoveExpectedSpectralLineVariables
  >({
    mutationFn: (
      variables: TechnicalGoalResourceRemoveExpectedSpectralLineVariables,
    ) =>
      fetchTechnicalGoalResourceRemoveExpectedSpectralLine({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ProposalResourceGetObservingProposalTitlePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetObservingProposalTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetObservingProposalTitleVariables = {
  pathParams: ProposalResourceGetObservingProposalTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetObservingProposalTitle = (
  variables: ProposalResourceGetObservingProposalTitleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceGetObservingProposalTitleError,
    undefined,
    {},
    {},
    ProposalResourceGetObservingProposalTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/title",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetObservingProposalTitle = <
  TData = undefined,
>(
  variables: ProposalResourceGetObservingProposalTitleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ProposalResourceGetObservingProposalTitleError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    ProposalResourceGetObservingProposalTitleError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/title",
      operationId: "proposalResourceGetObservingProposalTitle",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceGetObservingProposalTitle(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ProposalResourceReplaceTitlePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceReplaceTitleError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceReplaceTitleVariables = {
  pathParams: ProposalResourceReplaceTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceReplaceTitle = (
  variables: ProposalResourceReplaceTitleVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceReplaceTitleError,
    undefined,
    {},
    {},
    ProposalResourceReplaceTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceReplaceTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceReplaceTitleError,
      ProposalResourceReplaceTitleVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceReplaceTitleError,
    ProposalResourceReplaceTitleVariables
  >({
    mutationFn: (variables: ProposalResourceReplaceTitleVariables) =>
      fetchProposalResourceReplaceTitle({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ProposalResourceValidateObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceValidateObservingProposalQueryParams = {
  /**
   * @format int64
   */
  cycleId?: number;
};

export type ProposalResourceValidateObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceValidateObservingProposalVariables = {
  pathParams: ProposalResourceValidateObservingProposalPathParams;
  queryParams?: ProposalResourceValidateObservingProposalQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceValidateObservingProposal = (
  variables: ProposalResourceValidateObservingProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ProposalValidation,
    ProposalResourceValidateObservingProposalError,
    undefined,
    {},
    ProposalResourceValidateObservingProposalQueryParams,
    ProposalResourceValidateObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/validate",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceValidateObservingProposal = <
  TData = Schemas.ProposalValidation,
>(
  variables: ProposalResourceValidateObservingProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalValidation,
      ProposalResourceValidateObservingProposalError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalValidation,
    ProposalResourceValidateObservingProposalError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/validate",
      operationId: "proposalResourceValidateObservingProposal",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchProposalResourceValidateObservingProposal(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type UserProposalsSubmittedGetProposalsSubmittedQueryParams = {
  /**
   * @format int64
   */
  cycleId?: number;
};

export type UserProposalsSubmittedGetProposalsSubmittedError =
  Fetcher.ErrorWrapper<undefined>;

export type UserProposalsSubmittedGetProposalsSubmittedResponse =
  Schemas.SubmittedProposalSynopsis[];

export type UserProposalsSubmittedGetProposalsSubmittedVariables = {
  queryParams?: UserProposalsSubmittedGetProposalsSubmittedQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUserProposalsSubmittedGetProposalsSubmitted = (
  variables: UserProposalsSubmittedGetProposalsSubmittedVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    UserProposalsSubmittedGetProposalsSubmittedResponse,
    UserProposalsSubmittedGetProposalsSubmittedError,
    undefined,
    {},
    UserProposalsSubmittedGetProposalsSubmittedQueryParams,
    {}
  >({
    url: "/pst/api/proposalsSubmitted",
    method: "get",
    ...variables,
    signal,
  });

export const useUserProposalsSubmittedGetProposalsSubmitted = <
  TData = UserProposalsSubmittedGetProposalsSubmittedResponse,
>(
  variables: UserProposalsSubmittedGetProposalsSubmittedVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UserProposalsSubmittedGetProposalsSubmittedResponse,
      UserProposalsSubmittedGetProposalsSubmittedError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    UserProposalsSubmittedGetProposalsSubmittedResponse,
    UserProposalsSubmittedGetProposalsSubmittedError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/proposalsSubmitted",
      operationId: "userProposalsSubmittedGetProposalsSubmitted",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUserProposalsSubmittedGetProposalsSubmitted(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type UserProposalsSubmittedWithdrawProposalPathParams = {
  /**
   * @format int64
   */
  submittedProposalId: number;
};

export type UserProposalsSubmittedWithdrawProposalQueryParams = {
  /**
   * @format int64
   */
  cycleId?: number;
};

export type UserProposalsSubmittedWithdrawProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type UserProposalsSubmittedWithdrawProposalVariables = {
  pathParams: UserProposalsSubmittedWithdrawProposalPathParams;
  queryParams?: UserProposalsSubmittedWithdrawProposalQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUserProposalsSubmittedWithdrawProposal = (
  variables: UserProposalsSubmittedWithdrawProposalVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    UserProposalsSubmittedWithdrawProposalError,
    undefined,
    {},
    UserProposalsSubmittedWithdrawProposalQueryParams,
    UserProposalsSubmittedWithdrawProposalPathParams
  >({
    url: "/pst/api/proposalsSubmitted/{submittedProposalId}/withdraw",
    method: "delete",
    ...variables,
    signal,
  });

export const useUserProposalsSubmittedWithdrawProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserProposalsSubmittedWithdrawProposalError,
      UserProposalsSubmittedWithdrawProposalVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UserProposalsSubmittedWithdrawProposalError,
    UserProposalsSubmittedWithdrawProposalVariables
  >({
    mutationFn: (variables: UserProposalsSubmittedWithdrawProposalVariables) =>
      fetchUserProposalsSubmittedWithdrawProposal({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ResourceTypeResourceGetAllResourceTypesError =
  Fetcher.ErrorWrapper<undefined>;

export type ResourceTypeResourceGetAllResourceTypesResponse =
  Schemas.ObjectIdentifier[];

export type ResourceTypeResourceGetAllResourceTypesVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchResourceTypeResourceGetAllResourceTypes = (
  variables: ResourceTypeResourceGetAllResourceTypesVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ResourceTypeResourceGetAllResourceTypesResponse,
    ResourceTypeResourceGetAllResourceTypesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/resourceTypes", method: "get", ...variables, signal });

export const useResourceTypeResourceGetAllResourceTypes = <
  TData = ResourceTypeResourceGetAllResourceTypesResponse,
>(
  variables: ResourceTypeResourceGetAllResourceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ResourceTypeResourceGetAllResourceTypesResponse,
      ResourceTypeResourceGetAllResourceTypesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ResourceTypeResourceGetAllResourceTypesResponse,
    ResourceTypeResourceGetAllResourceTypesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/resourceTypes",
      operationId: "resourceTypeResourceGetAllResourceTypes",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchResourceTypeResourceGetAllResourceTypes(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ResourceTypeResourceAddNewResourceTypeError =
  Fetcher.ErrorWrapper<undefined>;

export type ResourceTypeResourceAddNewResourceTypeVariables = {
  body?: Schemas.ResourceType;
} & ProposalToolContext["fetcherOptions"];

export const fetchResourceTypeResourceAddNewResourceType = (
  variables: ResourceTypeResourceAddNewResourceTypeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ResourceType,
    ResourceTypeResourceAddNewResourceTypeError,
    Schemas.ResourceType,
    {},
    {},
    {}
  >({ url: "/pst/api/resourceTypes", method: "post", ...variables, signal });

export const useResourceTypeResourceAddNewResourceType = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ResourceType,
      ResourceTypeResourceAddNewResourceTypeError,
      ResourceTypeResourceAddNewResourceTypeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ResourceType,
    ResourceTypeResourceAddNewResourceTypeError,
    ResourceTypeResourceAddNewResourceTypeVariables
  >({
    mutationFn: (variables: ResourceTypeResourceAddNewResourceTypeVariables) =>
      fetchResourceTypeResourceAddNewResourceType({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ResourceTypeResourceGetResourceTypePathParams = {
  /**
   * @format int64
   */
  resourceTypeId: number;
};

export type ResourceTypeResourceGetResourceTypeError =
  Fetcher.ErrorWrapper<undefined>;

export type ResourceTypeResourceGetResourceTypeVariables = {
  pathParams: ResourceTypeResourceGetResourceTypePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchResourceTypeResourceGetResourceType = (
  variables: ResourceTypeResourceGetResourceTypeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.ResourceType,
    ResourceTypeResourceGetResourceTypeError,
    undefined,
    {},
    {},
    ResourceTypeResourceGetResourceTypePathParams
  >({
    url: "/pst/api/resourceTypes/{resourceTypeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useResourceTypeResourceGetResourceType = <
  TData = Schemas.ResourceType,
>(
  variables: ResourceTypeResourceGetResourceTypeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ResourceType,
      ResourceTypeResourceGetResourceTypeError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ResourceType,
    ResourceTypeResourceGetResourceTypeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/resourceTypes/{resourceTypeId}",
      operationId: "resourceTypeResourceGetResourceType",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchResourceTypeResourceGetResourceType(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ResourceTypeResourceRemoveResourceTypePathParams = {
  /**
   * @format int64
   */
  resourceTypeId: number;
};

export type ResourceTypeResourceRemoveResourceTypeError =
  Fetcher.ErrorWrapper<undefined>;

export type ResourceTypeResourceRemoveResourceTypeVariables = {
  pathParams: ResourceTypeResourceRemoveResourceTypePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchResourceTypeResourceRemoveResourceType = (
  variables: ResourceTypeResourceRemoveResourceTypeVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ResourceTypeResourceRemoveResourceTypeError,
    undefined,
    {},
    {},
    ResourceTypeResourceRemoveResourceTypePathParams
  >({
    url: "/pst/api/resourceTypes/{resourceTypeId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useResourceTypeResourceRemoveResourceType = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ResourceTypeResourceRemoveResourceTypeError,
      ResourceTypeResourceRemoveResourceTypeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ResourceTypeResourceRemoveResourceTypeError,
    ResourceTypeResourceRemoveResourceTypeVariables
  >({
    mutationFn: (variables: ResourceTypeResourceRemoveResourceTypeVariables) =>
      fetchResourceTypeResourceRemoveResourceType({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type ReviewerResourceGetReviewersError = Fetcher.ErrorWrapper<undefined>;

export type ReviewerResourceGetReviewersResponse = Schemas.ObjectIdentifier[];

export type ReviewerResourceGetReviewersVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchReviewerResourceGetReviewers = (
  variables: ReviewerResourceGetReviewersVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    ReviewerResourceGetReviewersResponse,
    ReviewerResourceGetReviewersError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/reviewers", method: "get", ...variables, signal });

export const useReviewerResourceGetReviewers = <
  TData = ReviewerResourceGetReviewersResponse,
>(
  variables: ReviewerResourceGetReviewersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReviewerResourceGetReviewersResponse,
      ReviewerResourceGetReviewersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ReviewerResourceGetReviewersResponse,
    ReviewerResourceGetReviewersError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/reviewers",
      operationId: "reviewerResourceGetReviewers",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchReviewerResourceGetReviewers(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ReviewerResourceAddReviewerError = Fetcher.ErrorWrapper<undefined>;

export type ReviewerResourceAddReviewerVariables = {
  body?: Schemas.Reviewer;
} & ProposalToolContext["fetcherOptions"];

export const fetchReviewerResourceAddReviewer = (
  variables: ReviewerResourceAddReviewerVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Reviewer,
    ReviewerResourceAddReviewerError,
    Schemas.Reviewer,
    {},
    {},
    {}
  >({ url: "/pst/api/reviewers", method: "post", ...variables, signal });

export const useReviewerResourceAddReviewer = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Reviewer,
      ReviewerResourceAddReviewerError,
      ReviewerResourceAddReviewerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Reviewer,
    ReviewerResourceAddReviewerError,
    ReviewerResourceAddReviewerVariables
  >({
    mutationFn: (variables: ReviewerResourceAddReviewerVariables) =>
      fetchReviewerResourceAddReviewer({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ReviewerResourceGetReviewerPathParams = {
  /**
   * @format int64
   */
  reviewerId: number;
};

export type ReviewerResourceGetReviewerError = Fetcher.ErrorWrapper<undefined>;

export type ReviewerResourceGetReviewerVariables = {
  pathParams: ReviewerResourceGetReviewerPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReviewerResourceGetReviewer = (
  variables: ReviewerResourceGetReviewerVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.Reviewer,
    ReviewerResourceGetReviewerError,
    undefined,
    {},
    {},
    ReviewerResourceGetReviewerPathParams
  >({
    url: "/pst/api/reviewers/{reviewerId}",
    method: "get",
    ...variables,
    signal,
  });

export const useReviewerResourceGetReviewer = <TData = Schemas.Reviewer,>(
  variables: ReviewerResourceGetReviewerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Reviewer,
      ReviewerResourceGetReviewerError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Reviewer,
    ReviewerResourceGetReviewerError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/reviewers/{reviewerId}",
      operationId: "reviewerResourceGetReviewer",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchReviewerResourceGetReviewer(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ReviewerResourceRemoveReviewerPathParams = {
  /**
   * @format int64
   */
  reviewerId: number;
};

export type ReviewerResourceRemoveReviewerError =
  Fetcher.ErrorWrapper<undefined>;

export type ReviewerResourceRemoveReviewerVariables = {
  pathParams: ReviewerResourceRemoveReviewerPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReviewerResourceRemoveReviewer = (
  variables: ReviewerResourceRemoveReviewerVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    ReviewerResourceRemoveReviewerError,
    undefined,
    {},
    {},
    ReviewerResourceRemoveReviewerPathParams
  >({
    url: "/pst/api/reviewers/{reviewerId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useReviewerResourceRemoveReviewer = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReviewerResourceRemoveReviewerError,
      ReviewerResourceRemoveReviewerVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReviewerResourceRemoveReviewerError,
    ReviewerResourceRemoveReviewerVariables
  >({
    mutationFn: (variables: ReviewerResourceRemoveReviewerVariables) =>
      fetchReviewerResourceRemoveReviewer({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SpaceFrameResourceGetSpaceFramePathParams = {
  frameCode: string;
};

export type SpaceFrameResourceGetSpaceFrameError =
  Fetcher.ErrorWrapper<undefined>;

export type SpaceFrameResourceGetSpaceFrameVariables = {
  pathParams: SpaceFrameResourceGetSpaceFramePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSpaceFrameResourceGetSpaceFrame = (
  variables: SpaceFrameResourceGetSpaceFrameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SpaceFrame,
    SpaceFrameResourceGetSpaceFrameError,
    undefined,
    {},
    {},
    SpaceFrameResourceGetSpaceFramePathParams
  >({
    url: "/pst/api/spaceFrames/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useSpaceFrameResourceGetSpaceFrame = <TData = Schemas.SpaceFrame,>(
  variables: SpaceFrameResourceGetSpaceFrameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SpaceFrame,
      SpaceFrameResourceGetSpaceFrameError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SpaceFrame,
    SpaceFrameResourceGetSpaceFrameError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/spaceFrames/{frameCode}",
      operationId: "spaceFrameResourceGetSpaceFrame",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSpaceFrameResourceGetSpaceFrame(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SpaceSystemResourceGetSpaceSystemPathParams = {
  frameCode: string;
};

export type SpaceSystemResourceGetSpaceSystemError =
  Fetcher.ErrorWrapper<undefined>;

export type SpaceSystemResourceGetSpaceSystemVariables = {
  pathParams: SpaceSystemResourceGetSpaceSystemPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSpaceSystemResourceGetSpaceSystem = (
  variables: SpaceSystemResourceGetSpaceSystemVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SpaceSys,
    SpaceSystemResourceGetSpaceSystemError,
    undefined,
    {},
    {},
    SpaceSystemResourceGetSpaceSystemPathParams
  >({
    url: "/pst/api/spaceSystems/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useSpaceSystemResourceGetSpaceSystem = <TData = Schemas.SpaceSys,>(
  variables: SpaceSystemResourceGetSpaceSystemVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SpaceSys,
      SpaceSystemResourceGetSpaceSystemError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SpaceSys,
    SpaceSystemResourceGetSpaceSystemError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/spaceSystems/{frameCode}",
      operationId: "spaceSystemResourceGetSpaceSystem",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSpaceSystemResourceGetSpaceSystem(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubjectMapResourceSubjectMapListQueryParams = {
  uid?: string;
};

export type SubjectMapResourceSubjectMapListError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceSubjectMapListResponse = Schemas.SubjectMap[];

export type SubjectMapResourceSubjectMapListVariables = {
  queryParams?: SubjectMapResourceSubjectMapListQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceSubjectMapList = (
  variables: SubjectMapResourceSubjectMapListVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    SubjectMapResourceSubjectMapListResponse,
    SubjectMapResourceSubjectMapListError,
    undefined,
    {},
    SubjectMapResourceSubjectMapListQueryParams,
    {}
  >({ url: "/pst/api/subjectMap", method: "get", ...variables, signal });

export const useSubjectMapResourceSubjectMapList = <
  TData = SubjectMapResourceSubjectMapListResponse,
>(
  variables: SubjectMapResourceSubjectMapListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SubjectMapResourceSubjectMapListResponse,
      SubjectMapResourceSubjectMapListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    SubjectMapResourceSubjectMapListResponse,
    SubjectMapResourceSubjectMapListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/subjectMap",
      operationId: "subjectMapResourceSubjectMapList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubjectMapResourceSubjectMapList(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubjectMapResourceCreateFromUserQueryParams = {
  uuid?: string;
};

export type SubjectMapResourceCreateFromUserError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceCreateFromUserVariables = {
  body?: Schemas.Person;
  queryParams?: SubjectMapResourceCreateFromUserQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceCreateFromUser = (
  variables: SubjectMapResourceCreateFromUserVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SubjectMap,
    SubjectMapResourceCreateFromUserError,
    Schemas.Person,
    {},
    SubjectMapResourceCreateFromUserQueryParams,
    {}
  >({ url: "/pst/api/subjectMap", method: "post", ...variables, signal });

export const useSubjectMapResourceCreateFromUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SubjectMap,
      SubjectMapResourceCreateFromUserError,
      SubjectMapResourceCreateFromUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.SubjectMap,
    SubjectMapResourceCreateFromUserError,
    SubjectMapResourceCreateFromUserVariables
  >({
    mutationFn: (variables: SubjectMapResourceCreateFromUserVariables) =>
      fetchSubjectMapResourceCreateFromUser({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubjectMapResourceExistingUserUIDsError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceExistingUserUIDsResponse = string[];

export type SubjectMapResourceExistingUserUIDsVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceExistingUserUIDs = (
  variables: SubjectMapResourceExistingUserUIDsVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    SubjectMapResourceExistingUserUIDsResponse,
    SubjectMapResourceExistingUserUIDsError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/pst/api/subjectMap/keycloakUserUIDs",
    method: "get",
    ...variables,
    signal,
  });

export const useSubjectMapResourceExistingUserUIDs = <
  TData = SubjectMapResourceExistingUserUIDsResponse,
>(
  variables: SubjectMapResourceExistingUserUIDsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SubjectMapResourceExistingUserUIDsResponse,
      SubjectMapResourceExistingUserUIDsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    SubjectMapResourceExistingUserUIDsResponse,
    SubjectMapResourceExistingUserUIDsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/subjectMap/keycloakUserUIDs",
      operationId: "subjectMapResourceExistingUserUIDs",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubjectMapResourceExistingUserUIDs(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubjectMapResourceCheckForNewUsersError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceCheckForNewUsersVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceCheckForNewUsers = (
  variables: SubjectMapResourceCheckForNewUsersVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    number,
    SubjectMapResourceCheckForNewUsersError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/pst/api/subjectMap/newUsers",
    method: "get",
    ...variables,
    signal,
  });

export const useSubjectMapResourceCheckForNewUsers = <TData = number,>(
  variables: SubjectMapResourceCheckForNewUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      number,
      SubjectMapResourceCheckForNewUsersError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    number,
    SubjectMapResourceCheckForNewUsersError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/subjectMap/newUsers",
      operationId: "subjectMapResourceCheckForNewUsers",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubjectMapResourceCheckForNewUsers(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubjectMapResourceSubjectMapPathParams = {
  id: string;
};

export type SubjectMapResourceSubjectMapError = Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceSubjectMapVariables = {
  pathParams: SubjectMapResourceSubjectMapPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceSubjectMap = (
  variables: SubjectMapResourceSubjectMapVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    Schemas.SubjectMap,
    SubjectMapResourceSubjectMapError,
    undefined,
    {},
    {},
    SubjectMapResourceSubjectMapPathParams
  >({ url: "/pst/api/subjectMap/{id}", method: "get", ...variables, signal });

export const useSubjectMapResourceSubjectMap = <TData = Schemas.SubjectMap,>(
  variables: SubjectMapResourceSubjectMapVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SubjectMap,
      SubjectMapResourceSubjectMapError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SubjectMap,
    SubjectMapResourceSubjectMapError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/subjectMap/{id}",
      operationId: "subjectMapResourceSubjectMap",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubjectMapResourceSubjectMap(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type SubjectMapResourceChangeEmailAddressPathParams = {
  /**
   * @format int64
   */
  personId: number;
};

export type SubjectMapResourceChangeEmailAddressError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceChangeEmailAddressVariables = {
  pathParams: SubjectMapResourceChangeEmailAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceChangeEmailAddress = (
  variables: SubjectMapResourceChangeEmailAddressVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubjectMapResourceChangeEmailAddressError,
    undefined,
    {},
    {},
    SubjectMapResourceChangeEmailAddressPathParams
  >({
    url: "/pst/api/subjectMap/{personId}/email",
    method: "put",
    ...variables,
    signal,
  });

export const useSubjectMapResourceChangeEmailAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubjectMapResourceChangeEmailAddressError,
      SubjectMapResourceChangeEmailAddressVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubjectMapResourceChangeEmailAddressError,
    SubjectMapResourceChangeEmailAddressVariables
  >({
    mutationFn: (variables: SubjectMapResourceChangeEmailAddressVariables) =>
      fetchSubjectMapResourceChangeEmailAddress({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubjectMapResourceChangeFirstNamePathParams = {
  /**
   * @format int64
   */
  personId: number;
};

export type SubjectMapResourceChangeFirstNameError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceChangeFirstNameVariables = {
  pathParams: SubjectMapResourceChangeFirstNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceChangeFirstName = (
  variables: SubjectMapResourceChangeFirstNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubjectMapResourceChangeFirstNameError,
    undefined,
    {},
    {},
    SubjectMapResourceChangeFirstNamePathParams
  >({
    url: "/pst/api/subjectMap/{personId}/firstName",
    method: "put",
    ...variables,
    signal,
  });

export const useSubjectMapResourceChangeFirstName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubjectMapResourceChangeFirstNameError,
      SubjectMapResourceChangeFirstNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubjectMapResourceChangeFirstNameError,
    SubjectMapResourceChangeFirstNameVariables
  >({
    mutationFn: (variables: SubjectMapResourceChangeFirstNameVariables) =>
      fetchSubjectMapResourceChangeFirstName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubjectMapResourceChangeLastNamePathParams = {
  /**
   * @format int64
   */
  personId: number;
};

export type SubjectMapResourceChangeLastNameError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceChangeLastNameVariables = {
  pathParams: SubjectMapResourceChangeLastNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceChangeLastName = (
  variables: SubjectMapResourceChangeLastNameVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubjectMapResourceChangeLastNameError,
    undefined,
    {},
    {},
    SubjectMapResourceChangeLastNamePathParams
  >({
    url: "/pst/api/subjectMap/{personId}/lastName",
    method: "put",
    ...variables,
    signal,
  });

export const useSubjectMapResourceChangeLastName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubjectMapResourceChangeLastNameError,
      SubjectMapResourceChangeLastNameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubjectMapResourceChangeLastNameError,
    SubjectMapResourceChangeLastNameVariables
  >({
    mutationFn: (variables: SubjectMapResourceChangeLastNameVariables) =>
      fetchSubjectMapResourceChangeLastName({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type SubjectMapResourceResetPasswordPathParams = {
  /**
   * @format int64
   */
  personId: number;
};

export type SubjectMapResourceResetPasswordError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceResetPasswordVariables = {
  pathParams: SubjectMapResourceResetPasswordPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceResetPassword = (
  variables: SubjectMapResourceResetPasswordVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubjectMapResourceResetPasswordError,
    undefined,
    {},
    {},
    SubjectMapResourceResetPasswordPathParams
  >({
    url: "/pst/api/subjectMap/{personId}/password",
    method: "put",
    ...variables,
    signal,
  });

export const useSubjectMapResourceResetPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubjectMapResourceResetPasswordError,
      SubjectMapResourceResetPasswordVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubjectMapResourceResetPasswordError,
    SubjectMapResourceResetPasswordVariables
  >({
    mutationFn: (variables: SubjectMapResourceResetPasswordVariables) =>
      fetchSubjectMapResourceResetPassword({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type SubjectMapResourceGetSubjectMapUidPathParams = {
  /**
   * @format int64
   */
  personId: number;
};

export type SubjectMapResourceGetSubjectMapUidError =
  Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceGetSubjectMapUidVariables = {
  pathParams: SubjectMapResourceGetSubjectMapUidPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceGetSubjectMapUid = (
  variables: SubjectMapResourceGetSubjectMapUidVariables,
  signal?: AbortSignal,
) =>
  proposalToolFetch<
    undefined,
    SubjectMapResourceGetSubjectMapUidError,
    undefined,
    {},
    {},
    SubjectMapResourceGetSubjectMapUidPathParams
  >({
    url: "/pst/api/subjectMap/{personId}/uid",
    method: "get",
    ...variables,
    signal,
  });

export const useSubjectMapResourceGetSubjectMapUid = <TData = undefined,>(
  variables: SubjectMapResourceGetSubjectMapUidVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      SubjectMapResourceGetSubjectMapUidError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    SubjectMapResourceGetSubjectMapUidError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/pst/api/subjectMap/{personId}/uid",
      operationId: "subjectMapResourceGetSubjectMapUid",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSubjectMapResourceGetSubjectMapUid(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/pst/api/admin/roles";
      operationId: "keycloakResourceGetRoles";
      variables: KeycloakResourceGetRolesVariables;
    }
  | {
      path: "/pst/api/admin/userRepresentations";
      operationId: "keycloakResourceGetUserRepresentation";
      variables: KeycloakResourceGetUserRepresentationVariables;
    }
  | {
      path: "/pst/api/observatories";
      operationId: "observatoryResourceGetObservatories";
      variables: ObservatoryResourceGetObservatoriesVariables;
    }
  | {
      path: "/pst/api/observatories/{id}";
      operationId: "observatoryResourceGetObservatory";
      variables: ObservatoryResourceGetObservatoryVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/array";
      operationId: "observatoryResourceGetTelescopeArrays";
      variables: ObservatoryResourceGetTelescopeArraysVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/array/{arrayId}";
      operationId: "observatoryResourceGetTelescopeArray";
      variables: ObservatoryResourceGetTelescopeArrayVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/backends";
      operationId: "backendResourceGetObservatoryBackends";
      variables: BackendResourceGetObservatoryBackendsVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/backends/{backendId}";
      operationId: "backendResourceGetObservatoryBackend";
      variables: BackendResourceGetObservatoryBackendVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/instruments";
      operationId: "instrumentResourceGetObservatoryInstruments";
      variables: InstrumentResourceGetObservatoryInstrumentsVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/telescopes";
      operationId: "telescopeResourceGetObservatoryTelescopes";
      variables: TelescopeResourceGetObservatoryTelescopesVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}";
      operationId: "telescopeResourceGetTelescope";
      variables: TelescopeResourceGetTelescopeVariables;
    }
  | {
      path: "/pst/api/organizations";
      operationId: "organizationResourceGetOrganizations";
      variables: OrganizationResourceGetOrganizationsVariables;
    }
  | {
      path: "/pst/api/organizations/{id}";
      operationId: "organizationResourceGetOrganization";
      variables: OrganizationResourceGetOrganizationVariables;
    }
  | {
      path: "/pst/api/people";
      operationId: "personResourceGetPeople";
      variables: PersonResourceGetPeopleVariables;
    }
  | {
      path: "/pst/api/people/email/{email}";
      operationId: "personResourceGetPersonByEmail";
      variables: PersonResourceGetPersonByEmailVariables;
    }
  | {
      path: "/pst/api/people/{id}";
      operationId: "personResourceGetPerson";
      variables: PersonResourceGetPersonVariables;
    }
  | {
      path: "/pst/api/proposalCycles";
      operationId: "proposalCyclesResourceGetProposalCycles";
      variables: ProposalCyclesResourceGetProposalCyclesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/MyTACCycles";
      operationId: "proposalCyclesResourceGetMyTACMemberProposalCycles";
      variables: ProposalCyclesResourceGetMyTACMemberProposalCyclesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}";
      operationId: "proposalCyclesResourceGetProposalCycle";
      variables: ProposalCyclesResourceGetProposalCycleVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/TAC";
      operationId: "tACResourceGetTAC";
      variables: TACResourceGetTACVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/TAC/members";
      operationId: "tACResourceGetCommitteeMembers";
      variables: TACResourceGetCommitteeMembersVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/TAC/members/{memberId}";
      operationId: "tACResourceGetCommitteeMember";
      variables: TACResourceGetCommitteeMemberVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals";
      operationId: "allocatedProposalResourceGetAllocatedProposals";
      variables: AllocatedProposalResourceGetAllocatedProposalsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}";
      operationId: "allocatedProposalResourceGetAllocatedProposal";
      variables: AllocatedProposalResourceGetAllocatedProposalVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock";
      operationId: "allocatedBlockResourceGetAllocatedBlocks";
      variables: AllocatedBlockResourceGetAllocatedBlocksVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}/allocatedBlock/{blockId}";
      operationId: "allocatedBlockResourceGetAllocatedBlock";
      variables: AllocatedBlockResourceGetAllocatedBlockVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources";
      operationId: "availableResourcesResourceGetCycleAvailableResources";
      variables: AvailableResourcesResourceGetCycleAvailableResourcesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/types";
      operationId: "availableResourcesResourceGetCycleResourceTypes";
      variables: AvailableResourcesResourceGetCycleResourceTypesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/types/{typeId}";
      operationId: "availableResourcesResourceGetCycleResourceType";
      variables: AvailableResourcesResourceGetCycleResourceTypeVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}";
      operationId: "availableResourcesResourceGetCycleAvailableResource";
      variables: AvailableResourcesResourceGetCycleAvailableResourceVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/allocated";
      operationId: "availableResourcesResourceGetCycleResourceUsed";
      variables: AvailableResourcesResourceGetCycleResourceUsedVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/remaining";
      operationId: "availableResourcesResourceGetCycleResourceRemaining";
      variables: AvailableResourcesResourceGetCycleResourceRemainingVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/availableResources/{resourceName}/total";
      operationId: "availableResourcesResourceGetCycleResourceTotal";
      variables: AvailableResourcesResourceGetCycleResourceTotalVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/code";
      operationId: "proposalCyclesResourceGetProposalCycleCode";
      variables: ProposalCyclesResourceGetProposalCycleCodeVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/details";
      operationId: "proposalCyclesResourceGetProposalCycleDetails";
      variables: ProposalCyclesResourceGetProposalCycleDetailsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/grades";
      operationId: "proposalCyclesResourceGetCycleAllocationGrades";
      variables: ProposalCyclesResourceGetCycleAllocationGradesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}";
      operationId: "proposalCyclesResourceGetCycleAllocatedGrade";
      variables: ProposalCyclesResourceGetCycleAllocatedGradeVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/observatory";
      operationId: "proposalCyclesResourceGetProposalCycleObservatory";
      variables: ProposalCyclesResourceGetProposalCycleObservatoryVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/observingTimeTotals";
      operationId: "proposalCyclesResourceGetCycleObservingTimeTotals";
      variables: ProposalCyclesResourceGetCycleObservingTimeTotalsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals";
      operationId: "submittedProposalResourceGetSubmittedProposals";
      variables: SubmittedProposalResourceGetSubmittedProposalsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/allReviewsLocked";
      operationId: "submittedProposalResourceCheckAllReviewsLocked";
      variables: SubmittedProposalResourceCheckAllReviewsLockedVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/notYetAllocated";
      operationId: "submittedProposalResourceGetSubmittedNotYetAllocated";
      variables: SubmittedProposalResourceGetSubmittedNotYetAllocatedVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}";
      operationId: "submittedProposalResourceGetSubmittedProposal";
      variables: SubmittedProposalResourceGetSubmittedProposalVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/mailResults";
      operationId: "submittedProposalResourceSendTACReviewResults";
      variables: SubmittedProposalResourceSendTACReviewResultsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews";
      operationId: "proposalReviewResourceGetReviews";
      variables: ProposalReviewResourceGetReviewsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals/{submittedProposalId}/reviews/{reviewId}";
      operationId: "proposalReviewResourceGetReview";
      variables: ProposalReviewResourceGetReviewVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/title";
      operationId: "proposalCyclesResourceGetProposalCycleTitle";
      variables: ProposalCyclesResourceGetProposalCycleTitleVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/observingModes";
      operationId: "observingModeResourceGetCycleObservingModes";
      variables: ObservingModeResourceGetCycleObservingModesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/filters";
      operationId: "observingModeResourceGetObservingModesFilters";
      variables: ObservingModeResourceGetObservingModesFiltersVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/objectList";
      operationId: "observingModeResourceGetObservingModeObjects";
      variables: ObservingModeResourceGetObservingModeObjectsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/{modeId}";
      operationId: "observingModeResourceGetCycleObservingMode";
      variables: ObservingModeResourceGetCycleObservingModeVariables;
    }
  | {
      path: "/pst/api/proposals";
      operationId: "proposalResourceGetProposals";
      variables: ProposalResourceGetProposalsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}";
      operationId: "proposalResourceGetObservingProposal";
      variables: ProposalResourceGetObservingProposalVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/export";
      operationId: "proposalResourceExportProposal";
      variables: ProposalResourceExportProposalVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/fields";
      operationId: "proposalResourceGetFields";
      variables: ProposalResourceGetFieldsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/fields/{fieldId}";
      operationId: "proposalResourceGetField";
      variables: ProposalResourceGetFieldVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators";
      operationId: "investigatorResourceGetInvestigators";
      variables: InvestigatorResourceGetInvestigatorsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators/asObjects";
      operationId: "investigatorResourceGetInvestigatorsAsObjects";
      variables: InvestigatorResourceGetInvestigatorsAsObjectsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}";
      operationId: "investigatorResourceGetInvestigator";
      variables: InvestigatorResourceGetInvestigatorVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/justifications/checkForPdf";
      operationId: "justificationsResourceCheckForPdf";
      variables: JustificationsResourceCheckForPdfVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/justifications/latexPdf/download";
      operationId: "justificationsResourceDownloadLatexPdf";
      variables: JustificationsResourceDownloadLatexPdfVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/justifications/{which}";
      operationId: "justificationsResourceGetJustification";
      variables: JustificationsResourceGetJustificationVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/kind";
      operationId: "proposalResourceGetObservingProposalKind";
      variables: ProposalResourceGetObservingProposalKindVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations";
      operationId: "observationResourceGetObservations";
      variables: ObservationResourceGetObservationsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}";
      operationId: "observationResourceGetObservation";
      variables: ObservationResourceGetObservationVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints";
      operationId: "observationResourceGetConstraints";
      variables: ObservationResourceGetConstraintsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}";
      operationId: "observationResourceGetConstraint";
      variables: ObservationResourceGetConstraintVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments";
      operationId: "supportingDocumentResourceGetSupportingDocuments";
      variables: SupportingDocumentResourceGetSupportingDocumentsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}";
      operationId: "supportingDocumentResourceGetSupportingDocument";
      variables: SupportingDocumentResourceGetSupportingDocumentVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/get-file";
      operationId: "supportingDocumentResourceDownloadSupportingDocument";
      variables: SupportingDocumentResourceDownloadSupportingDocumentVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/targets";
      operationId: "proposalResourceGetTargets";
      variables: ProposalResourceGetTargetsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/targets/{targetId}";
      operationId: "proposalResourceGetTarget";
      variables: ProposalResourceGetTargetVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/technicalGoals";
      operationId: "technicalGoalResourceGetTechnicalGoals";
      variables: TechnicalGoalResourceGetTechnicalGoalsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}";
      operationId: "technicalGoalResourceGetTechnicalGoal";
      variables: TechnicalGoalResourceGetTechnicalGoalVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/title";
      operationId: "proposalResourceGetObservingProposalTitle";
      variables: ProposalResourceGetObservingProposalTitleVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/validate";
      operationId: "proposalResourceValidateObservingProposal";
      variables: ProposalResourceValidateObservingProposalVariables;
    }
  | {
      path: "/pst/api/proposalsSubmitted";
      operationId: "userProposalsSubmittedGetProposalsSubmitted";
      variables: UserProposalsSubmittedGetProposalsSubmittedVariables;
    }
  | {
      path: "/pst/api/resourceTypes";
      operationId: "resourceTypeResourceGetAllResourceTypes";
      variables: ResourceTypeResourceGetAllResourceTypesVariables;
    }
  | {
      path: "/pst/api/resourceTypes/{resourceTypeId}";
      operationId: "resourceTypeResourceGetResourceType";
      variables: ResourceTypeResourceGetResourceTypeVariables;
    }
  | {
      path: "/pst/api/reviewers";
      operationId: "reviewerResourceGetReviewers";
      variables: ReviewerResourceGetReviewersVariables;
    }
  | {
      path: "/pst/api/reviewers/{reviewerId}";
      operationId: "reviewerResourceGetReviewer";
      variables: ReviewerResourceGetReviewerVariables;
    }
  | {
      path: "/pst/api/spaceFrames/{frameCode}";
      operationId: "spaceFrameResourceGetSpaceFrame";
      variables: SpaceFrameResourceGetSpaceFrameVariables;
    }
  | {
      path: "/pst/api/spaceSystems/{frameCode}";
      operationId: "spaceSystemResourceGetSpaceSystem";
      variables: SpaceSystemResourceGetSpaceSystemVariables;
    }
  | {
      path: "/pst/api/subjectMap";
      operationId: "subjectMapResourceSubjectMapList";
      variables: SubjectMapResourceSubjectMapListVariables;
    }
  | {
      path: "/pst/api/subjectMap/keycloakUserUIDs";
      operationId: "subjectMapResourceExistingUserUIDs";
      variables: SubjectMapResourceExistingUserUIDsVariables;
    }
  | {
      path: "/pst/api/subjectMap/newUsers";
      operationId: "subjectMapResourceCheckForNewUsers";
      variables: SubjectMapResourceCheckForNewUsersVariables;
    }
  | {
      path: "/pst/api/subjectMap/{id}";
      operationId: "subjectMapResourceSubjectMap";
      variables: SubjectMapResourceSubjectMapVariables;
    }
  | {
      path: "/pst/api/subjectMap/{personId}/uid";
      operationId: "subjectMapResourceGetSubjectMapUid";
      variables: SubjectMapResourceGetSubjectMapUidVariables;
    };
