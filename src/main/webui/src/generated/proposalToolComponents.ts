/**
 * Generated by @openapi-codegen
 *
 * @version 0.1
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useProposalToolContext,
  ProposalToolContext,
} from "./proposalToolContext";
import type * as Fetcher from "./proposalToolFetcher";
import { proposalToolFetch } from "./proposalToolFetcher";
import type * as Schemas from "./proposalToolSchemas";

export type ObservatoryResourceGetObservatoriesQueryParams = {
  name?: string;
};

export type ObservatoryResourceGetObservatoriesError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetObservatoriesResponse =
  Schemas.ObjectIdentifier[];

export type ObservatoryResourceGetObservatoriesVariables = {
  queryParams?: ObservatoryResourceGetObservatoriesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetObservatories = (
  variables: ObservatoryResourceGetObservatoriesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ObservatoryResourceGetObservatoriesResponse,
    ObservatoryResourceGetObservatoriesError,
    undefined,
    {},
    ObservatoryResourceGetObservatoriesQueryParams,
    {}
  >({ url: "/pst/api/observatories", method: "get", ...variables, signal });

export const useObservatoryResourceGetObservatories = <
  TData = ObservatoryResourceGetObservatoriesResponse
>(
  variables: ObservatoryResourceGetObservatoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservatoryResourceGetObservatoriesResponse,
      ObservatoryResourceGetObservatoriesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservatoryResourceGetObservatoriesResponse,
    ObservatoryResourceGetObservatoriesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories",
      operationId: "observatoryResourceGetObservatories",
      variables,
    }),
    ({ signal }) =>
      fetchObservatoryResourceGetObservatories(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservatoryResourceCreateObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceCreateObservatoryVariables = {
  body?: Schemas.Observatory;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceCreateObservatory = (
  variables: ObservatoryResourceCreateObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observatory,
    ObservatoryResourceCreateObservatoryError,
    Schemas.Observatory,
    {},
    {},
    {}
  >({ url: "/pst/api/observatories", method: "post", ...variables, signal });

export const useObservatoryResourceCreateObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Observatory,
      ObservatoryResourceCreateObservatoryError,
      ObservatoryResourceCreateObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Observatory,
    ObservatoryResourceCreateObservatoryError,
    ObservatoryResourceCreateObservatoryVariables
  >(
    (variables: ObservatoryResourceCreateObservatoryVariables) =>
      fetchObservatoryResourceCreateObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceGetObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceGetObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetObservatoryVariables = {
  pathParams: ObservatoryResourceGetObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetObservatory = (
  variables: ObservatoryResourceGetObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observatory,
    ObservatoryResourceGetObservatoryError,
    undefined,
    {},
    {},
    ObservatoryResourceGetObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservatoryResourceGetObservatory = <
  TData = Schemas.Observatory
>(
  variables: ObservatoryResourceGetObservatoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Observatory,
      ObservatoryResourceGetObservatoryError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Observatory,
    ObservatoryResourceGetObservatoryError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{id}",
      operationId: "observatoryResourceGetObservatory",
      variables,
    }),
    ({ signal }) =>
      fetchObservatoryResourceGetObservatory(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservatoryResourceDeleteObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceDeleteObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceDeleteObservatoryVariables = {
  pathParams: ObservatoryResourceDeleteObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceDeleteObservatory = (
  variables: ObservatoryResourceDeleteObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceDeleteObservatoryError,
    undefined,
    {},
    {},
    ObservatoryResourceDeleteObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useObservatoryResourceDeleteObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceDeleteObservatoryError,
      ObservatoryResourceDeleteObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceDeleteObservatoryError,
    ObservatoryResourceDeleteObservatoryVariables
  >(
    (variables: ObservatoryResourceDeleteObservatoryVariables) =>
      fetchObservatoryResourceDeleteObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceUpdateAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateAddressError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateAddressVariables = {
  pathParams: ObservatoryResourceUpdateAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateAddress = (
  variables: ObservatoryResourceUpdateAddressVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateAddressError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateAddressPathParams
  >({
    url: "/pst/api/observatories/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateAddressError,
      ObservatoryResourceUpdateAddressVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateAddressError,
    ObservatoryResourceUpdateAddressVariables
  >(
    (variables: ObservatoryResourceUpdateAddressVariables) =>
      fetchObservatoryResourceUpdateAddress({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceAddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceAddArrayError = Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceAddArrayVariables = {
  pathParams: ObservatoryResourceAddArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceAddArray = (
  variables: ObservatoryResourceAddArrayVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceAddArrayError,
    undefined,
    {},
    {},
    ObservatoryResourceAddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceAddArray = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceAddArrayError,
      ObservatoryResourceAddArrayVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceAddArrayError,
    ObservatoryResourceAddArrayVariables
  >(
    (variables: ObservatoryResourceAddArrayVariables) =>
      fetchObservatoryResourceAddArray({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ObservatoryResourceCreateAndAddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceCreateAndAddArrayError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceCreateAndAddArrayVariables = {
  body?: Schemas.TelescopeArray;
  pathParams: ObservatoryResourceCreateAndAddArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceCreateAndAddArray = (
  variables: ObservatoryResourceCreateAndAddArrayVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceCreateAndAddArrayError,
    Schemas.TelescopeArray,
    {},
    {},
    ObservatoryResourceCreateAndAddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "post",
    ...variables,
    signal,
  });

export const useObservatoryResourceCreateAndAddArray = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceCreateAndAddArrayError,
      ObservatoryResourceCreateAndAddArrayVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceCreateAndAddArrayError,
    ObservatoryResourceCreateAndAddArrayVariables
  >(
    (variables: ObservatoryResourceCreateAndAddArrayVariables) =>
      fetchObservatoryResourceCreateAndAddArray({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceGetObservatoryBackendsPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceGetObservatoryBackendsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetObservatoryBackendsResponse =
  Schemas.Backend[];

export type ObservatoryResourceGetObservatoryBackendsVariables = {
  pathParams: ObservatoryResourceGetObservatoryBackendsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetObservatoryBackends = (
  variables: ObservatoryResourceGetObservatoryBackendsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ObservatoryResourceGetObservatoryBackendsResponse,
    ObservatoryResourceGetObservatoryBackendsError,
    undefined,
    {},
    {},
    ObservatoryResourceGetObservatoryBackendsPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "get",
    ...variables,
    signal,
  });

export const useObservatoryResourceGetObservatoryBackends = <
  TData = ObservatoryResourceGetObservatoryBackendsResponse
>(
  variables: ObservatoryResourceGetObservatoryBackendsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservatoryResourceGetObservatoryBackendsResponse,
      ObservatoryResourceGetObservatoryBackendsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservatoryResourceGetObservatoryBackendsResponse,
    ObservatoryResourceGetObservatoryBackendsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{id}/backend",
      operationId: "observatoryResourceGetObservatoryBackends",
      variables,
    }),
    ({ signal }) =>
      fetchObservatoryResourceGetObservatoryBackends(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservatoryResourceAddBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceAddBackendError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceAddBackendVariables = {
  pathParams: ObservatoryResourceAddBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceAddBackend = (
  variables: ObservatoryResourceAddBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceAddBackendError,
    undefined,
    {},
    {},
    ObservatoryResourceAddBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceAddBackend = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceAddBackendError,
      ObservatoryResourceAddBackendVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceAddBackendError,
    ObservatoryResourceAddBackendVariables
  >(
    (variables: ObservatoryResourceAddBackendVariables) =>
      fetchObservatoryResourceAddBackend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ObservatoryResourceCreateAndAddBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceCreateAndAddBackendError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceCreateAndAddBackendVariables = {
  body?: Schemas.Backend;
  pathParams: ObservatoryResourceCreateAndAddBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceCreateAndAddBackend = (
  variables: ObservatoryResourceCreateAndAddBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Backend,
    ObservatoryResourceCreateAndAddBackendError,
    Schemas.Backend,
    {},
    {},
    ObservatoryResourceCreateAndAddBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "post",
    ...variables,
    signal,
  });

export const useObservatoryResourceCreateAndAddBackend = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Backend,
      ObservatoryResourceCreateAndAddBackendError,
      ObservatoryResourceCreateAndAddBackendVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Backend,
    ObservatoryResourceCreateAndAddBackendError,
    ObservatoryResourceCreateAndAddBackendVariables
  >(
    (variables: ObservatoryResourceCreateAndAddBackendVariables) =>
      fetchObservatoryResourceCreateAndAddBackend({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceGetObservatoryBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ObservatoryResourceGetObservatoryBackendError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceGetObservatoryBackendVariables = {
  pathParams: ObservatoryResourceGetObservatoryBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceGetObservatoryBackend = (
  variables: ObservatoryResourceGetObservatoryBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Backend,
    ObservatoryResourceGetObservatoryBackendError,
    undefined,
    {},
    {},
    ObservatoryResourceGetObservatoryBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservatoryResourceGetObservatoryBackend = <
  TData = Schemas.Backend
>(
  variables: ObservatoryResourceGetObservatoryBackendVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Backend,
      ObservatoryResourceGetObservatoryBackendError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Backend,
    ObservatoryResourceGetObservatoryBackendError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{id}/backend/{subId}",
      operationId: "observatoryResourceGetObservatoryBackend",
      variables,
    }),
    ({ signal }) =>
      fetchObservatoryResourceGetObservatoryBackend(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservatoryResourceUpdateBackendParallelPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ObservatoryResourceUpdateBackendParallelError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateBackendParallelVariables = {
  body?: boolean;
  pathParams: ObservatoryResourceUpdateBackendParallelPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateBackendParallel = (
  variables: ObservatoryResourceUpdateBackendParallelVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateBackendParallelError,
    boolean,
    {},
    {},
    ObservatoryResourceUpdateBackendParallelPathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}/parallel",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateBackendParallel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateBackendParallelError,
      ObservatoryResourceUpdateBackendParallelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateBackendParallelError,
    ObservatoryResourceUpdateBackendParallelVariables
  >(
    (variables: ObservatoryResourceUpdateBackendParallelVariables) =>
      fetchObservatoryResourceUpdateBackendParallel({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceUpdateObservatoryIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateObservatoryIvoIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateObservatoryIvoIdVariables = {
  pathParams: ObservatoryResourceUpdateObservatoryIvoIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateObservatoryIvoId = (
  variables: ObservatoryResourceUpdateObservatoryIvoIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateObservatoryIvoIdError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateObservatoryIvoIdPathParams
  >({
    url: "/pst/api/observatories/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateObservatoryIvoId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateObservatoryIvoIdError,
      ObservatoryResourceUpdateObservatoryIvoIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateObservatoryIvoIdError,
    ObservatoryResourceUpdateObservatoryIvoIdVariables
  >(
    (variables: ObservatoryResourceUpdateObservatoryIvoIdVariables) =>
      fetchObservatoryResourceUpdateObservatoryIvoId({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceUpdateObservatoryNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateObservatoryNameError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateObservatoryNameVariables = {
  pathParams: ObservatoryResourceUpdateObservatoryNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateObservatoryName = (
  variables: ObservatoryResourceUpdateObservatoryNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateObservatoryNameError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateObservatoryNamePathParams
  >({
    url: "/pst/api/observatories/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateObservatoryName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateObservatoryNameError,
      ObservatoryResourceUpdateObservatoryNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateObservatoryNameError,
    ObservatoryResourceUpdateObservatoryNameVariables
  >(
    (variables: ObservatoryResourceUpdateObservatoryNameVariables) =>
      fetchObservatoryResourceUpdateObservatoryName({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceUpdateObservatoryWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type ObservatoryResourceUpdateObservatoryWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceUpdateObservatoryWikiIdVariables = {
  pathParams: ObservatoryResourceUpdateObservatoryWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceUpdateObservatoryWikiId = (
  variables: ObservatoryResourceUpdateObservatoryWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceUpdateObservatoryWikiIdError,
    undefined,
    {},
    {},
    ObservatoryResourceUpdateObservatoryWikiIdPathParams
  >({
    url: "/pst/api/observatories/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceUpdateObservatoryWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceUpdateObservatoryWikiIdError,
      ObservatoryResourceUpdateObservatoryWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceUpdateObservatoryWikiIdError,
    ObservatoryResourceUpdateObservatoryWikiIdVariables
  >(
    (variables: ObservatoryResourceUpdateObservatoryWikiIdVariables) =>
      fetchObservatoryResourceUpdateObservatoryWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservatoryResourceReplaceBackendNamePathParams = {
  /**
   * @format int64
   */
  backendId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type ObservatoryResourceReplaceBackendNameError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservatoryResourceReplaceBackendNameVariables = {
  pathParams: ObservatoryResourceReplaceBackendNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservatoryResourceReplaceBackendName = (
  variables: ObservatoryResourceReplaceBackendNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservatoryResourceReplaceBackendNameError,
    undefined,
    {},
    {},
    ObservatoryResourceReplaceBackendNamePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/backend/{backendId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useObservatoryResourceReplaceBackendName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservatoryResourceReplaceBackendNameError,
      ObservatoryResourceReplaceBackendNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservatoryResourceReplaceBackendNameError,
    ObservatoryResourceReplaceBackendNameVariables
  >(
    (variables: ObservatoryResourceReplaceBackendNameVariables) =>
      fetchObservatoryResourceReplaceBackendName({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceGetObservatoryInstrumentsPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceGetObservatoryInstrumentsQueryParams = {
  name?: string;
};

export type InstrumentResourceGetObservatoryInstrumentsError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceGetObservatoryInstrumentsResponse =
  Schemas.ObjectIdentifier[];

export type InstrumentResourceGetObservatoryInstrumentsVariables = {
  pathParams: InstrumentResourceGetObservatoryInstrumentsPathParams;
  queryParams?: InstrumentResourceGetObservatoryInstrumentsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceGetObservatoryInstruments = (
  variables: InstrumentResourceGetObservatoryInstrumentsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    InstrumentResourceGetObservatoryInstrumentsResponse,
    InstrumentResourceGetObservatoryInstrumentsError,
    undefined,
    {},
    InstrumentResourceGetObservatoryInstrumentsQueryParams,
    InstrumentResourceGetObservatoryInstrumentsPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments",
    method: "get",
    ...variables,
    signal,
  });

export const useInstrumentResourceGetObservatoryInstruments = <
  TData = InstrumentResourceGetObservatoryInstrumentsResponse
>(
  variables: InstrumentResourceGetObservatoryInstrumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      InstrumentResourceGetObservatoryInstrumentsResponse,
      InstrumentResourceGetObservatoryInstrumentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    InstrumentResourceGetObservatoryInstrumentsResponse,
    InstrumentResourceGetObservatoryInstrumentsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/instruments",
      operationId: "instrumentResourceGetObservatoryInstruments",
      variables,
    }),
    ({ signal }) =>
      fetchInstrumentResourceGetObservatoryInstruments(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InstrumentResourceCreateAndAddInstrumentToObservatoryPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceCreateAndAddInstrumentToObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceCreateAndAddInstrumentToObservatoryVariables = {
  body?: Schemas.Instrument;
  pathParams: InstrumentResourceCreateAndAddInstrumentToObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceCreateAndAddInstrumentToObservatory = (
  variables: InstrumentResourceCreateAndAddInstrumentToObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Instrument,
    InstrumentResourceCreateAndAddInstrumentToObservatoryError,
    Schemas.Instrument,
    {},
    {},
    InstrumentResourceCreateAndAddInstrumentToObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments",
    method: "post",
    ...variables,
    signal,
  });

export const useInstrumentResourceCreateAndAddInstrumentToObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Instrument,
      InstrumentResourceCreateAndAddInstrumentToObservatoryError,
      InstrumentResourceCreateAndAddInstrumentToObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Instrument,
    InstrumentResourceCreateAndAddInstrumentToObservatoryError,
    InstrumentResourceCreateAndAddInstrumentToObservatoryVariables
  >(
    (
      variables: InstrumentResourceCreateAndAddInstrumentToObservatoryVariables
    ) =>
      fetchInstrumentResourceCreateAndAddInstrumentToObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceRemoveInstrumentFromObservatoryPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceRemoveInstrumentFromObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceRemoveInstrumentFromObservatoryVariables = {
  pathParams: InstrumentResourceRemoveInstrumentFromObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceRemoveInstrumentFromObservatory = (
  variables: InstrumentResourceRemoveInstrumentFromObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceRemoveInstrumentFromObservatoryError,
    undefined,
    {},
    {},
    InstrumentResourceRemoveInstrumentFromObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useInstrumentResourceRemoveInstrumentFromObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceRemoveInstrumentFromObservatoryError,
      InstrumentResourceRemoveInstrumentFromObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceRemoveInstrumentFromObservatoryError,
    InstrumentResourceRemoveInstrumentFromObservatoryVariables
  >(
    (variables: InstrumentResourceRemoveInstrumentFromObservatoryVariables) =>
      fetchInstrumentResourceRemoveInstrumentFromObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceReplaceInstrumentDescriptionPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentDescriptionError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentDescriptionVariables = {
  pathParams: InstrumentResourceReplaceInstrumentDescriptionPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentDescription = (
  variables: InstrumentResourceReplaceInstrumentDescriptionVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentDescriptionError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentDescriptionPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/description",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentDescription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentDescriptionError,
      InstrumentResourceReplaceInstrumentDescriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentDescriptionError,
    InstrumentResourceReplaceInstrumentDescriptionVariables
  >(
    (variables: InstrumentResourceReplaceInstrumentDescriptionVariables) =>
      fetchInstrumentResourceReplaceInstrumentDescription({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceReplaceInstrumentFrequencyCoveragePathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentFrequencyCoverageError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentFrequencyCoverageVariables = {
  body?: Schemas.SpectralWindowSetup;
  pathParams: InstrumentResourceReplaceInstrumentFrequencyCoveragePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentFrequencyCoverage = (
  variables: InstrumentResourceReplaceInstrumentFrequencyCoverageVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentFrequencyCoverageError,
    Schemas.SpectralWindowSetup,
    {},
    {},
    InstrumentResourceReplaceInstrumentFrequencyCoveragePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/frequencyCoverage",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentFrequencyCoverage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentFrequencyCoverageError,
      InstrumentResourceReplaceInstrumentFrequencyCoverageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentFrequencyCoverageError,
    InstrumentResourceReplaceInstrumentFrequencyCoverageVariables
  >(
    (
      variables: InstrumentResourceReplaceInstrumentFrequencyCoverageVariables
    ) =>
      fetchInstrumentResourceReplaceInstrumentFrequencyCoverage({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceReplaceInstrumentKindPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentKindError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentKindVariables = {
  pathParams: InstrumentResourceReplaceInstrumentKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentKind = (
  variables: InstrumentResourceReplaceInstrumentKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentKindError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentKindPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentKindError,
      InstrumentResourceReplaceInstrumentKindVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentKindError,
    InstrumentResourceReplaceInstrumentKindVariables
  >(
    (variables: InstrumentResourceReplaceInstrumentKindVariables) =>
      fetchInstrumentResourceReplaceInstrumentKind({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceReplaceInstrumentNamePathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentNameError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentNameVariables = {
  pathParams: InstrumentResourceReplaceInstrumentNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentName = (
  variables: InstrumentResourceReplaceInstrumentNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentNameError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentNamePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentNameError,
      InstrumentResourceReplaceInstrumentNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentNameError,
    InstrumentResourceReplaceInstrumentNameVariables
  >(
    (variables: InstrumentResourceReplaceInstrumentNameVariables) =>
      fetchInstrumentResourceReplaceInstrumentName({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceReplaceInstrumentReferencePathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentReferenceError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentReferenceVariables = {
  pathParams: InstrumentResourceReplaceInstrumentReferencePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentReference = (
  variables: InstrumentResourceReplaceInstrumentReferenceVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentReferenceError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentReferencePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/reference",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentReference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentReferenceError,
      InstrumentResourceReplaceInstrumentReferenceVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentReferenceError,
    InstrumentResourceReplaceInstrumentReferenceVariables
  >(
    (variables: InstrumentResourceReplaceInstrumentReferenceVariables) =>
      fetchInstrumentResourceReplaceInstrumentReference({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InstrumentResourceReplaceInstrumentWikiIdPathParams = {
  /**
   * @format int64
   */
  instrumentId: number;
  /**
   * @format int64
   */
  observatoryId: number;
};

export type InstrumentResourceReplaceInstrumentWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type InstrumentResourceReplaceInstrumentWikiIdVariables = {
  pathParams: InstrumentResourceReplaceInstrumentWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInstrumentResourceReplaceInstrumentWikiId = (
  variables: InstrumentResourceReplaceInstrumentWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InstrumentResourceReplaceInstrumentWikiIdError,
    undefined,
    {},
    {},
    InstrumentResourceReplaceInstrumentWikiIdPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/instruments/{instrumentId}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useInstrumentResourceReplaceInstrumentWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InstrumentResourceReplaceInstrumentWikiIdError,
      InstrumentResourceReplaceInstrumentWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InstrumentResourceReplaceInstrumentWikiIdError,
    InstrumentResourceReplaceInstrumentWikiIdVariables
  >(
    (variables: InstrumentResourceReplaceInstrumentWikiIdVariables) =>
      fetchInstrumentResourceReplaceInstrumentWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceGetObservatoryTelescopesPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type TelescopeResourceGetObservatoryTelescopesQueryParams = {
  name?: string;
};

export type TelescopeResourceGetObservatoryTelescopesError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceGetObservatoryTelescopesResponse =
  Schemas.ObjectIdentifier[];

export type TelescopeResourceGetObservatoryTelescopesVariables = {
  pathParams: TelescopeResourceGetObservatoryTelescopesPathParams;
  queryParams?: TelescopeResourceGetObservatoryTelescopesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceGetObservatoryTelescopes = (
  variables: TelescopeResourceGetObservatoryTelescopesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    TelescopeResourceGetObservatoryTelescopesResponse,
    TelescopeResourceGetObservatoryTelescopesError,
    undefined,
    {},
    TelescopeResourceGetObservatoryTelescopesQueryParams,
    TelescopeResourceGetObservatoryTelescopesPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes",
    method: "get",
    ...variables,
    signal,
  });

export const useTelescopeResourceGetObservatoryTelescopes = <
  TData = TelescopeResourceGetObservatoryTelescopesResponse
>(
  variables: TelescopeResourceGetObservatoryTelescopesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      TelescopeResourceGetObservatoryTelescopesResponse,
      TelescopeResourceGetObservatoryTelescopesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    TelescopeResourceGetObservatoryTelescopesResponse,
    TelescopeResourceGetObservatoryTelescopesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/telescopes",
      operationId: "telescopeResourceGetObservatoryTelescopes",
      variables,
    }),
    ({ signal }) =>
      fetchTelescopeResourceGetObservatoryTelescopes(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TelescopeResourceCreateAndAddTelescopeToObservatoryPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
};

export type TelescopeResourceCreateAndAddTelescopeToObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceCreateAndAddTelescopeToObservatoryVariables = {
  body?: Schemas.Telescope;
  pathParams: TelescopeResourceCreateAndAddTelescopeToObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceCreateAndAddTelescopeToObservatory = (
  variables: TelescopeResourceCreateAndAddTelescopeToObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Telescope,
    TelescopeResourceCreateAndAddTelescopeToObservatoryError,
    Schemas.Telescope,
    {},
    {},
    TelescopeResourceCreateAndAddTelescopeToObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes",
    method: "post",
    ...variables,
    signal,
  });

export const useTelescopeResourceCreateAndAddTelescopeToObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Telescope,
      TelescopeResourceCreateAndAddTelescopeToObservatoryError,
      TelescopeResourceCreateAndAddTelescopeToObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Telescope,
    TelescopeResourceCreateAndAddTelescopeToObservatoryError,
    TelescopeResourceCreateAndAddTelescopeToObservatoryVariables
  >(
    (variables: TelescopeResourceCreateAndAddTelescopeToObservatoryVariables) =>
      fetchTelescopeResourceCreateAndAddTelescopeToObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceGetTelescopePathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceGetTelescopeError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceGetTelescopeVariables = {
  pathParams: TelescopeResourceGetTelescopePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceGetTelescope = (
  variables: TelescopeResourceGetTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Telescope,
    TelescopeResourceGetTelescopeError,
    undefined,
    {},
    {},
    TelescopeResourceGetTelescopePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useTelescopeResourceGetTelescope = <TData = Schemas.Telescope>(
  variables: TelescopeResourceGetTelescopeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Telescope,
      TelescopeResourceGetTelescopeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Telescope,
    TelescopeResourceGetTelescopeError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}",
      operationId: "telescopeResourceGetTelescope",
      variables,
    }),
    ({ signal }) =>
      fetchTelescopeResourceGetTelescope(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TelescopeResourceRemoveTelescopeFromObservatoryPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceRemoveTelescopeFromObservatoryError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceRemoveTelescopeFromObservatoryVariables = {
  pathParams: TelescopeResourceRemoveTelescopeFromObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceRemoveTelescopeFromObservatory = (
  variables: TelescopeResourceRemoveTelescopeFromObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceRemoveTelescopeFromObservatoryError,
    undefined,
    {},
    {},
    TelescopeResourceRemoveTelescopeFromObservatoryPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useTelescopeResourceRemoveTelescopeFromObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceRemoveTelescopeFromObservatoryError,
      TelescopeResourceRemoveTelescopeFromObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceRemoveTelescopeFromObservatoryError,
    TelescopeResourceRemoveTelescopeFromObservatoryVariables
  >(
    (variables: TelescopeResourceRemoveTelescopeFromObservatoryVariables) =>
      fetchTelescopeResourceRemoveTelescopeFromObservatory({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeLocationPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationVariables = {
  body?: Schemas.GeocentricPoint;
  pathParams: TelescopeResourceUpdateTelescopeLocationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocation = (
  variables: TelescopeResourceUpdateTelescopeLocationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationError,
    Schemas.GeocentricPoint,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationError,
      TelescopeResourceUpdateTelescopeLocationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationError,
    TelescopeResourceUpdateTelescopeLocationVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeLocationVariables) =>
      fetchTelescopeResourceUpdateTelescopeLocation({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeLocationCoordinateSystemPathParams =
  {
    /**
     * @format int64
     */
    observatoryId: number;
    /**
     * @format int64
     */
    telescopeId: number;
  };

export type TelescopeResourceUpdateTelescopeLocationCoordinateSystemError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables =
  {
    pathParams: TelescopeResourceUpdateTelescopeLocationCoordinateSystemPathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationCoordinateSystem = (
  variables: TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemError,
    undefined,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/coordinateSystem",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationCoordinateSystem = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationCoordinateSystemError,
      TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemError,
    TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables
  >(
    (
      variables: TelescopeResourceUpdateTelescopeLocationCoordinateSystemVariables
    ) =>
      fetchTelescopeResourceUpdateTelescopeLocationCoordinateSystem({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeLocationXPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationXError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationXVariables = {
  body?: Schemas.RealQuantity;
  pathParams: TelescopeResourceUpdateTelescopeLocationXPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationX = (
  variables: TelescopeResourceUpdateTelescopeLocationXVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXError,
    Schemas.RealQuantity,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationXPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/x",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationX = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationXError,
      TelescopeResourceUpdateTelescopeLocationXVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXError,
    TelescopeResourceUpdateTelescopeLocationXVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeLocationXVariables) =>
      fetchTelescopeResourceUpdateTelescopeLocationX({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeLocationXYZPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationXYZError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationXYZRequestBody =
  Schemas.RealQuantity[];

export type TelescopeResourceUpdateTelescopeLocationXYZVariables = {
  body?: TelescopeResourceUpdateTelescopeLocationXYZRequestBody;
  pathParams: TelescopeResourceUpdateTelescopeLocationXYZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationXYZ = (
  variables: TelescopeResourceUpdateTelescopeLocationXYZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXYZError,
    TelescopeResourceUpdateTelescopeLocationXYZRequestBody,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationXYZPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/xyz",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationXYZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationXYZError,
      TelescopeResourceUpdateTelescopeLocationXYZVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationXYZError,
    TelescopeResourceUpdateTelescopeLocationXYZVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeLocationXYZVariables) =>
      fetchTelescopeResourceUpdateTelescopeLocationXYZ({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeLocationYPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationYError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationYVariables = {
  body?: Schemas.RealQuantity;
  pathParams: TelescopeResourceUpdateTelescopeLocationYPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationY = (
  variables: TelescopeResourceUpdateTelescopeLocationYVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationYError,
    Schemas.RealQuantity,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationYPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/y",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationY = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationYError,
      TelescopeResourceUpdateTelescopeLocationYVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationYError,
    TelescopeResourceUpdateTelescopeLocationYVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeLocationYVariables) =>
      fetchTelescopeResourceUpdateTelescopeLocationY({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeLocationZPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeLocationZError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeLocationZVariables = {
  body?: Schemas.RealQuantity;
  pathParams: TelescopeResourceUpdateTelescopeLocationZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeLocationZ = (
  variables: TelescopeResourceUpdateTelescopeLocationZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeLocationZError,
    Schemas.RealQuantity,
    {},
    {},
    TelescopeResourceUpdateTelescopeLocationZPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/z",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeLocationZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeLocationZError,
      TelescopeResourceUpdateTelescopeLocationZVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeLocationZError,
    TelescopeResourceUpdateTelescopeLocationZVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeLocationZVariables) =>
      fetchTelescopeResourceUpdateTelescopeLocationZ({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeNamePathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeNameError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeNameVariables = {
  pathParams: TelescopeResourceUpdateTelescopeNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeName = (
  variables: TelescopeResourceUpdateTelescopeNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeNameError,
    undefined,
    {},
    {},
    TelescopeResourceUpdateTelescopeNamePathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeNameError,
      TelescopeResourceUpdateTelescopeNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeNameError,
    TelescopeResourceUpdateTelescopeNameVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeNameVariables) =>
      fetchTelescopeResourceUpdateTelescopeName({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type TelescopeResourceUpdateTelescopeWikiIdPathParams = {
  /**
   * @format int64
   */
  observatoryId: number;
  /**
   * @format int64
   */
  telescopeId: number;
};

export type TelescopeResourceUpdateTelescopeWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type TelescopeResourceUpdateTelescopeWikiIdVariables = {
  pathParams: TelescopeResourceUpdateTelescopeWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchTelescopeResourceUpdateTelescopeWikiId = (
  variables: TelescopeResourceUpdateTelescopeWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    TelescopeResourceUpdateTelescopeWikiIdError,
    undefined,
    {},
    {},
    TelescopeResourceUpdateTelescopeWikiIdPathParams
  >({
    url: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useTelescopeResourceUpdateTelescopeWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TelescopeResourceUpdateTelescopeWikiIdError,
      TelescopeResourceUpdateTelescopeWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    TelescopeResourceUpdateTelescopeWikiIdError,
    TelescopeResourceUpdateTelescopeWikiIdVariables
  >(
    (variables: TelescopeResourceUpdateTelescopeWikiIdVariables) =>
      fetchTelescopeResourceUpdateTelescopeWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationResourceGetOrganizationsError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceGetOrganizationsResponse =
  Schemas.ObjectIdentifier[];

export type OrganizationResourceGetOrganizationsVariables =
  ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceGetOrganizations = (
  variables: OrganizationResourceGetOrganizationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    OrganizationResourceGetOrganizationsResponse,
    OrganizationResourceGetOrganizationsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "get", ...variables, signal });

export const useOrganizationResourceGetOrganizations = <
  TData = OrganizationResourceGetOrganizationsResponse
>(
  variables: OrganizationResourceGetOrganizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      OrganizationResourceGetOrganizationsResponse,
      OrganizationResourceGetOrganizationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    OrganizationResourceGetOrganizationsResponse,
    OrganizationResourceGetOrganizationsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/organizations",
      operationId: "organizationResourceGetOrganizations",
      variables,
    }),
    ({ signal }) =>
      fetchOrganizationResourceGetOrganizations(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationResourceCreateOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceCreateOrganizationVariables = {
  body?: Schemas.Organization;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceCreateOrganization = (
  variables: OrganizationResourceCreateOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Organization,
    OrganizationResourceCreateOrganizationError,
    Schemas.Organization,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "post", ...variables, signal });

export const useOrganizationResourceCreateOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Organization,
      OrganizationResourceCreateOrganizationError,
      OrganizationResourceCreateOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Organization,
    OrganizationResourceCreateOrganizationError,
    OrganizationResourceCreateOrganizationVariables
  >(
    (variables: OrganizationResourceCreateOrganizationVariables) =>
      fetchOrganizationResourceCreateOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationResourceGetOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceGetOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceGetOrganizationVariables = {
  pathParams: OrganizationResourceGetOrganizationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceGetOrganization = (
  variables: OrganizationResourceGetOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Organization,
    OrganizationResourceGetOrganizationError,
    undefined,
    {},
    {},
    OrganizationResourceGetOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useOrganizationResourceGetOrganization = <
  TData = Schemas.Organization
>(
  variables: OrganizationResourceGetOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Organization,
      OrganizationResourceGetOrganizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Organization,
    OrganizationResourceGetOrganizationError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/organizations/{id}",
      operationId: "organizationResourceGetOrganization",
      variables,
    }),
    ({ signal }) =>
      fetchOrganizationResourceGetOrganization(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type OrganizationResourceDeleteOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceDeleteOrganizationError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceDeleteOrganizationVariables = {
  pathParams: OrganizationResourceDeleteOrganizationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceDeleteOrganization = (
  variables: OrganizationResourceDeleteOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceDeleteOrganizationError,
    undefined,
    {},
    {},
    OrganizationResourceDeleteOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useOrganizationResourceDeleteOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceDeleteOrganizationError,
      OrganizationResourceDeleteOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceDeleteOrganizationError,
    OrganizationResourceDeleteOrganizationVariables
  >(
    (variables: OrganizationResourceDeleteOrganizationVariables) =>
      fetchOrganizationResourceDeleteOrganization({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationResourceUpdateOrganisationAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationAddressError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationAddressVariables = {
  pathParams: OrganizationResourceUpdateOrganisationAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationAddress = (
  variables: OrganizationResourceUpdateOrganisationAddressVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationAddressError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationAddressPathParams
  >({
    url: "/pst/api/organizations/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationAddressError,
      OrganizationResourceUpdateOrganisationAddressVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationAddressError,
    OrganizationResourceUpdateOrganisationAddressVariables
  >(
    (variables: OrganizationResourceUpdateOrganisationAddressVariables) =>
      fetchOrganizationResourceUpdateOrganisationAddress({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationResourceUpdateOrganisationIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationIvoIdError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationIvoIdVariables = {
  pathParams: OrganizationResourceUpdateOrganisationIvoIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationIvoId = (
  variables: OrganizationResourceUpdateOrganisationIvoIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationIvoIdError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationIvoIdPathParams
  >({
    url: "/pst/api/organizations/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationIvoId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationIvoIdError,
      OrganizationResourceUpdateOrganisationIvoIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationIvoIdError,
    OrganizationResourceUpdateOrganisationIvoIdVariables
  >(
    (variables: OrganizationResourceUpdateOrganisationIvoIdVariables) =>
      fetchOrganizationResourceUpdateOrganisationIvoId({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationResourceUpdateOrganisationNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationNameError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationNameVariables = {
  pathParams: OrganizationResourceUpdateOrganisationNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationName = (
  variables: OrganizationResourceUpdateOrganisationNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationNameError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationNamePathParams
  >({
    url: "/pst/api/organizations/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationNameError,
      OrganizationResourceUpdateOrganisationNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationNameError,
    OrganizationResourceUpdateOrganisationNameVariables
  >(
    (variables: OrganizationResourceUpdateOrganisationNameVariables) =>
      fetchOrganizationResourceUpdateOrganisationName({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type OrganizationResourceUpdateOrganisationWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type OrganizationResourceUpdateOrganisationWikiIdError =
  Fetcher.ErrorWrapper<undefined>;

export type OrganizationResourceUpdateOrganisationWikiIdVariables = {
  pathParams: OrganizationResourceUpdateOrganisationWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchOrganizationResourceUpdateOrganisationWikiId = (
  variables: OrganizationResourceUpdateOrganisationWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    OrganizationResourceUpdateOrganisationWikiIdError,
    undefined,
    {},
    {},
    OrganizationResourceUpdateOrganisationWikiIdPathParams
  >({
    url: "/pst/api/organizations/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useOrganizationResourceUpdateOrganisationWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OrganizationResourceUpdateOrganisationWikiIdError,
      OrganizationResourceUpdateOrganisationWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    OrganizationResourceUpdateOrganisationWikiIdError,
    OrganizationResourceUpdateOrganisationWikiIdVariables
  >(
    (variables: OrganizationResourceUpdateOrganisationWikiIdVariables) =>
      fetchOrganizationResourceUpdateOrganisationWikiId({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type PersonResourceGetPeopleQueryParams = {
  name?: string;
};

export type PersonResourceGetPeopleError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceGetPeopleResponse = Schemas.ObjectIdentifier[];

export type PersonResourceGetPeopleVariables = {
  queryParams?: PersonResourceGetPeopleQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceGetPeople = (
  variables: PersonResourceGetPeopleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    PersonResourceGetPeopleResponse,
    PersonResourceGetPeopleError,
    undefined,
    {},
    PersonResourceGetPeopleQueryParams,
    {}
  >({ url: "/pst/api/people", method: "get", ...variables, signal });

export const usePersonResourceGetPeople = <
  TData = PersonResourceGetPeopleResponse
>(
  variables: PersonResourceGetPeopleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      PersonResourceGetPeopleResponse,
      PersonResourceGetPeopleError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    PersonResourceGetPeopleResponse,
    PersonResourceGetPeopleError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/people",
      operationId: "personResourceGetPeople",
      variables,
    }),
    ({ signal }) =>
      fetchPersonResourceGetPeople({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PersonResourceCreatePersonError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceCreatePersonVariables = {
  body?: Schemas.Person;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceCreatePerson = (
  variables: PersonResourceCreatePersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Person,
    PersonResourceCreatePersonError,
    Schemas.Person,
    {},
    {},
    {}
  >({ url: "/pst/api/people", method: "post", ...variables, signal });

export const usePersonResourceCreatePerson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Person,
      PersonResourceCreatePersonError,
      PersonResourceCreatePersonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Person,
    PersonResourceCreatePersonError,
    PersonResourceCreatePersonVariables
  >(
    (variables: PersonResourceCreatePersonVariables) =>
      fetchPersonResourceCreatePerson({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PersonResourceGetPersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceGetPersonError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceGetPersonVariables = {
  pathParams: PersonResourceGetPersonPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceGetPerson = (
  variables: PersonResourceGetPersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Person,
    PersonResourceGetPersonError,
    undefined,
    {},
    {},
    PersonResourceGetPersonPathParams
  >({ url: "/pst/api/people/{id}", method: "get", ...variables, signal });

export const usePersonResourceGetPerson = <TData = Schemas.Person>(
  variables: PersonResourceGetPersonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Person,
      PersonResourceGetPersonError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Person,
    PersonResourceGetPersonError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/people/{id}",
      operationId: "personResourceGetPerson",
      variables,
    }),
    ({ signal }) =>
      fetchPersonResourceGetPerson({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PersonResourceDeletePersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceDeletePersonError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceDeletePersonVariables = {
  pathParams: PersonResourceDeletePersonPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceDeletePerson = (
  variables: PersonResourceDeletePersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    PersonResourceDeletePersonError,
    undefined,
    {},
    {},
    PersonResourceDeletePersonPathParams
  >({ url: "/pst/api/people/{id}", method: "delete", ...variables, signal });

export const usePersonResourceDeletePerson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceDeletePersonError,
      PersonResourceDeletePersonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceDeletePersonError,
    PersonResourceDeletePersonVariables
  >(
    (variables: PersonResourceDeletePersonVariables) =>
      fetchPersonResourceDeletePerson({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PersonResourceUpdateEMailPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateEMailError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateEMailVariables = {
  pathParams: PersonResourceUpdateEMailPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateEMail = (
  variables: PersonResourceUpdateEMailVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateEMailError,
    undefined,
    {},
    {},
    PersonResourceUpdateEMailPathParams
  >({ url: "/pst/api/people/{id}/eMail", method: "put", ...variables, signal });

export const usePersonResourceUpdateEMail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateEMailError,
      PersonResourceUpdateEMailVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateEMailError,
    PersonResourceUpdateEMailVariables
  >(
    (variables: PersonResourceUpdateEMailVariables) =>
      fetchPersonResourceUpdateEMail({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PersonResourceUpdateFullNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateFullNameError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateFullNameVariables = {
  pathParams: PersonResourceUpdateFullNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateFullName = (
  variables: PersonResourceUpdateFullNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateFullNameError,
    undefined,
    {},
    {},
    PersonResourceUpdateFullNamePathParams
  >({
    url: "/pst/api/people/{id}/fullName",
    method: "put",
    ...variables,
    signal,
  });

export const usePersonResourceUpdateFullName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateFullNameError,
      PersonResourceUpdateFullNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateFullNameError,
    PersonResourceUpdateFullNameVariables
  >(
    (variables: PersonResourceUpdateFullNameVariables) =>
      fetchPersonResourceUpdateFullName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type PersonResourceUpdateOrcidIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type PersonResourceUpdateOrcidIdError = Fetcher.ErrorWrapper<undefined>;

export type PersonResourceUpdateOrcidIdVariables = {
  pathParams: PersonResourceUpdateOrcidIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchPersonResourceUpdateOrcidId = (
  variables: PersonResourceUpdateOrcidIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    PersonResourceUpdateOrcidIdError,
    undefined,
    {},
    {},
    PersonResourceUpdateOrcidIdPathParams
  >({
    url: "/pst/api/people/{id}/orcidId",
    method: "put",
    ...variables,
    signal,
  });

export const usePersonResourceUpdateOrcidId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PersonResourceUpdateOrcidIdError,
      PersonResourceUpdateOrcidIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    PersonResourceUpdateOrcidIdError,
    PersonResourceUpdateOrcidIdVariables
  >(
    (variables: PersonResourceUpdateOrcidIdVariables) =>
      fetchPersonResourceUpdateOrcidId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProposalCyclesResourceGetProposalCyclesQueryParams = {
  includeClosed?: boolean;
};

export type ProposalCyclesResourceGetProposalCyclesError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCyclesResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetProposalCyclesVariables = {
  queryParams?: ProposalCyclesResourceGetProposalCyclesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycles = (
  variables: ProposalCyclesResourceGetProposalCyclesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetProposalCyclesResponse,
    ProposalCyclesResourceGetProposalCyclesError,
    undefined,
    {},
    ProposalCyclesResourceGetProposalCyclesQueryParams,
    {}
  >({ url: "/pst/api/proposalCycles", method: "get", ...variables, signal });

export const useProposalCyclesResourceGetProposalCycles = <
  TData = ProposalCyclesResourceGetProposalCyclesResponse
>(
  variables: ProposalCyclesResourceGetProposalCyclesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetProposalCyclesResponse,
      ProposalCyclesResourceGetProposalCyclesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetProposalCyclesResponse,
    ProposalCyclesResourceGetProposalCyclesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles",
      operationId: "proposalCyclesResourceGetProposalCycles",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycles(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceGetProposalCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetProposalCycleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetProposalCycleVariables = {
  pathParams: ProposalCyclesResourceGetProposalCyclePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetProposalCycle = (
  variables: ProposalCyclesResourceGetProposalCycleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ProposalCycle,
    ProposalCyclesResourceGetProposalCycleError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetProposalCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetProposalCycle = <
  TData = Schemas.ProposalCycle
>(
  variables: ProposalCyclesResourceGetProposalCycleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalCycle,
      ProposalCyclesResourceGetProposalCycleError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalCycle,
    ProposalCyclesResourceGetProposalCycleError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}",
      operationId: "proposalCyclesResourceGetProposalCycle",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetProposalCycle(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceGetTACPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetTACError = Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetTACVariables = {
  pathParams: ProposalCyclesResourceGetTACPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetTAC = (
  variables: ProposalCyclesResourceGetTACVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Tac,
    ProposalCyclesResourceGetTACError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetTACPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetTAC = <TData = Schemas.Tac>(
  variables: ProposalCyclesResourceGetTACVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Tac,
      ProposalCyclesResourceGetTACError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Tac,
    ProposalCyclesResourceGetTACError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/TAC",
      operationId: "proposalCyclesResourceGetTAC",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetTAC(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceGetAllocatedProposalsFromCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetAllocatedProposalsFromCycleQueryParams = {
  title?: string;
};

export type ProposalCyclesResourceGetAllocatedProposalsFromCycleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetAllocatedProposalsFromCycleResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetAllocatedProposalsFromCycleVariables = {
  pathParams: ProposalCyclesResourceGetAllocatedProposalsFromCyclePathParams;
  queryParams?: ProposalCyclesResourceGetAllocatedProposalsFromCycleQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetAllocatedProposalsFromCycle = (
  variables: ProposalCyclesResourceGetAllocatedProposalsFromCycleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetAllocatedProposalsFromCycleResponse,
    ProposalCyclesResourceGetAllocatedProposalsFromCycleError,
    undefined,
    {},
    ProposalCyclesResourceGetAllocatedProposalsFromCycleQueryParams,
    ProposalCyclesResourceGetAllocatedProposalsFromCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetAllocatedProposalsFromCycle = <
  TData = ProposalCyclesResourceGetAllocatedProposalsFromCycleResponse
>(
  variables: ProposalCyclesResourceGetAllocatedProposalsFromCycleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetAllocatedProposalsFromCycleResponse,
      ProposalCyclesResourceGetAllocatedProposalsFromCycleError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetAllocatedProposalsFromCycleResponse,
    ProposalCyclesResourceGetAllocatedProposalsFromCycleError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals",
      operationId: "proposalCyclesResourceGetAllocatedProposalsFromCycle",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetAllocatedProposalsFromCycle(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceAllocateProposalToCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceAllocateProposalToCycleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceAllocateProposalToCycleVariables = {
  pathParams: ProposalCyclesResourceAllocateProposalToCyclePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceAllocateProposalToCycle = (
  variables: ProposalCyclesResourceAllocateProposalToCycleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceAllocateProposalToCycleError,
    undefined,
    {},
    {},
    ProposalCyclesResourceAllocateProposalToCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceAllocateProposalToCycle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceAllocateProposalToCycleError,
      ProposalCyclesResourceAllocateProposalToCycleVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceAllocateProposalToCycleError,
    ProposalCyclesResourceAllocateProposalToCycleVariables
  >(
    (variables: ProposalCyclesResourceAllocateProposalToCycleVariables) =>
      fetchProposalCyclesResourceAllocateProposalToCycle({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalPathParams =
  {
    /**
     * @format int64
     */
    allocatedId: number;
    /**
     * @format int64
     */
    cycleCode: number;
  };

export type ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalVariables =
  {
    body?: Schemas.AllocatedBlock;
    pathParams: ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalPathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceAddAllocatedBlockToAllocatedProposal = (
  variables: ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.AllocatedBlock,
    ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalError,
    Schemas.AllocatedBlock,
    {},
    {},
    ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceAddAllocatedBlockToAllocatedProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AllocatedBlock,
      ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalError,
      ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.AllocatedBlock,
    ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalError,
    ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalVariables
  >(
    (
      variables: ProposalCyclesResourceAddAllocatedBlockToAllocatedProposalVariables
    ) =>
      fetchProposalCyclesResourceAddAllocatedBlockToAllocatedProposal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalCyclesResourceGetCycleAllocationGradesPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetCycleAllocationGradesError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetCycleAllocationGradesResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetCycleAllocationGradesVariables = {
  pathParams: ProposalCyclesResourceGetCycleAllocationGradesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetCycleAllocationGrades = (
  variables: ProposalCyclesResourceGetCycleAllocationGradesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetCycleAllocationGradesResponse,
    ProposalCyclesResourceGetCycleAllocationGradesError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetCycleAllocationGradesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetCycleAllocationGrades = <
  TData = ProposalCyclesResourceGetCycleAllocationGradesResponse
>(
  variables: ProposalCyclesResourceGetCycleAllocationGradesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetCycleAllocationGradesResponse,
      ProposalCyclesResourceGetCycleAllocationGradesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetCycleAllocationGradesResponse,
    ProposalCyclesResourceGetCycleAllocationGradesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/grades",
      operationId: "proposalCyclesResourceGetCycleAllocationGrades",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetCycleAllocationGrades(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceGetCycleAllocatedGradePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  gradeId: number;
};

export type ProposalCyclesResourceGetCycleAllocatedGradeError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetCycleAllocatedGradeVariables = {
  pathParams: ProposalCyclesResourceGetCycleAllocatedGradePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetCycleAllocatedGrade = (
  variables: ProposalCyclesResourceGetCycleAllocatedGradeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.AllocationGrade,
    ProposalCyclesResourceGetCycleAllocatedGradeError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetCycleAllocatedGradePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetCycleAllocatedGrade = <
  TData = Schemas.AllocationGrade
>(
  variables: ProposalCyclesResourceGetCycleAllocatedGradeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AllocationGrade,
      ProposalCyclesResourceGetCycleAllocatedGradeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.AllocationGrade,
    ProposalCyclesResourceGetCycleAllocatedGradeError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}",
      operationId: "proposalCyclesResourceGetCycleAllocatedGrade",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetCycleAllocatedGrade(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceGetReviewedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetReviewedProposalsQueryParams = {
  title?: string;
};

export type ProposalCyclesResourceGetReviewedProposalsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetReviewedProposalsResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetReviewedProposalsVariables = {
  pathParams: ProposalCyclesResourceGetReviewedProposalsPathParams;
  queryParams?: ProposalCyclesResourceGetReviewedProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetReviewedProposals = (
  variables: ProposalCyclesResourceGetReviewedProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetReviewedProposalsResponse,
    ProposalCyclesResourceGetReviewedProposalsError,
    undefined,
    {},
    ProposalCyclesResourceGetReviewedProposalsQueryParams,
    ProposalCyclesResourceGetReviewedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetReviewedProposals = <
  TData = ProposalCyclesResourceGetReviewedProposalsResponse
>(
  variables: ProposalCyclesResourceGetReviewedProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetReviewedProposalsResponse,
      ProposalCyclesResourceGetReviewedProposalsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetReviewedProposalsResponse,
    ProposalCyclesResourceGetReviewedProposalsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
      operationId: "proposalCyclesResourceGetReviewedProposals",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetReviewedProposals(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceSubmitProposalForReviewPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceSubmitProposalForReviewError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceSubmitProposalForReviewVariables = {
  body?: Schemas.ReviewedProposal;
  pathParams: ProposalCyclesResourceSubmitProposalForReviewPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceSubmitProposalForReview = (
  variables: ProposalCyclesResourceSubmitProposalForReviewVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceSubmitProposalForReviewError,
    Schemas.ReviewedProposal,
    {},
    {},
    ProposalCyclesResourceSubmitProposalForReviewPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceSubmitProposalForReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceSubmitProposalForReviewError,
      ProposalCyclesResourceSubmitProposalForReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceSubmitProposalForReviewError,
    ProposalCyclesResourceSubmitProposalForReviewVariables
  >(
    (variables: ProposalCyclesResourceSubmitProposalForReviewVariables) =>
      fetchProposalCyclesResourceSubmitProposalForReview({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalCyclesResourceGetReviewedProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewCode: number;
};

export type ProposalCyclesResourceGetReviewedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetReviewedProposalVariables = {
  pathParams: ProposalCyclesResourceGetReviewedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetReviewedProposal = (
  variables: ProposalCyclesResourceGetReviewedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ReviewedProposal,
    ProposalCyclesResourceGetReviewedProposalError,
    undefined,
    {},
    {},
    ProposalCyclesResourceGetReviewedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetReviewedProposal = <
  TData = Schemas.ReviewedProposal
>(
  variables: ProposalCyclesResourceGetReviewedProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ReviewedProposal,
      ProposalCyclesResourceGetReviewedProposalError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ReviewedProposal,
    ProposalCyclesResourceGetReviewedProposalError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}",
      operationId: "proposalCyclesResourceGetReviewedProposal",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetReviewedProposal(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceSubmitReviewOfProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewCode: number;
};

export type ProposalCyclesResourceSubmitReviewOfProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceSubmitReviewOfProposalVariables = {
  body?: Schemas.ProposalReview;
  pathParams: ProposalCyclesResourceSubmitReviewOfProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceSubmitReviewOfProposal = (
  variables: ProposalCyclesResourceSubmitReviewOfProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ProposalReview,
    ProposalCyclesResourceSubmitReviewOfProposalError,
    Schemas.ProposalReview,
    {},
    {},
    ProposalCyclesResourceSubmitReviewOfProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceSubmitReviewOfProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProposalReview,
      ProposalCyclesResourceSubmitReviewOfProposalError,
      ProposalCyclesResourceSubmitReviewOfProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ProposalReview,
    ProposalCyclesResourceSubmitReviewOfProposalError,
    ProposalCyclesResourceSubmitReviewOfProposalVariables
  >(
    (variables: ProposalCyclesResourceSubmitReviewOfProposalVariables) =>
      fetchProposalCyclesResourceSubmitReviewOfProposal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalCyclesResourceGetSubmittedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceGetSubmittedProposalsQueryParams = {
  title?: string;
};

export type ProposalCyclesResourceGetSubmittedProposalsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceGetSubmittedProposalsResponse =
  Schemas.ObjectIdentifier[];

export type ProposalCyclesResourceGetSubmittedProposalsVariables = {
  pathParams: ProposalCyclesResourceGetSubmittedProposalsPathParams;
  queryParams?: ProposalCyclesResourceGetSubmittedProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceGetSubmittedProposals = (
  variables: ProposalCyclesResourceGetSubmittedProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalCyclesResourceGetSubmittedProposalsResponse,
    ProposalCyclesResourceGetSubmittedProposalsError,
    undefined,
    {},
    ProposalCyclesResourceGetSubmittedProposalsQueryParams,
    ProposalCyclesResourceGetSubmittedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceGetSubmittedProposals = <
  TData = ProposalCyclesResourceGetSubmittedProposalsResponse
>(
  variables: ProposalCyclesResourceGetSubmittedProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalCyclesResourceGetSubmittedProposalsResponse,
      ProposalCyclesResourceGetSubmittedProposalsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalCyclesResourceGetSubmittedProposalsResponse,
    ProposalCyclesResourceGetSubmittedProposalsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
      operationId: "proposalCyclesResourceGetSubmittedProposals",
      variables,
    }),
    ({ signal }) =>
      fetchProposalCyclesResourceGetSubmittedProposals(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalCyclesResourceSubmitProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type ProposalCyclesResourceSubmitProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalCyclesResourceSubmitProposalVariables = {
  pathParams: ProposalCyclesResourceSubmitProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalCyclesResourceSubmitProposal = (
  variables: ProposalCyclesResourceSubmitProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalCyclesResourceSubmitProposalError,
    undefined,
    {},
    {},
    ProposalCyclesResourceSubmitProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalCyclesResourceSubmitProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalCyclesResourceSubmitProposalError,
      ProposalCyclesResourceSubmitProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalCyclesResourceSubmitProposalError,
    ProposalCyclesResourceSubmitProposalVariables
  >(
    (variables: ProposalCyclesResourceSubmitProposalVariables) =>
      fetchProposalCyclesResourceSubmitProposal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type AvailableResourcesResourceGetCycleAvailableResourcesPathParams = {
  /**
   * @format int64
   */
  cycleId: number;
};

export type AvailableResourcesResourceGetCycleAvailableResourcesError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleAvailableResourcesResponse =
  Schemas.Resource[];

export type AvailableResourcesResourceGetCycleAvailableResourcesVariables = {
  pathParams: AvailableResourcesResourceGetCycleAvailableResourcesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleAvailableResources = (
  variables: AvailableResourcesResourceGetCycleAvailableResourcesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    AvailableResourcesResourceGetCycleAvailableResourcesResponse,
    AvailableResourcesResourceGetCycleAvailableResourcesError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleAvailableResourcesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/availableResources",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleAvailableResources = <
  TData = AvailableResourcesResourceGetCycleAvailableResourcesResponse
>(
  variables: AvailableResourcesResourceGetCycleAvailableResourcesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AvailableResourcesResourceGetCycleAvailableResourcesResponse,
      AvailableResourcesResourceGetCycleAvailableResourcesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    AvailableResourcesResourceGetCycleAvailableResourcesResponse,
    AvailableResourcesResourceGetCycleAvailableResourcesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/availableResources",
      operationId: "availableResourcesResourceGetCycleAvailableResources",
      variables,
    }),
    ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleAvailableResources(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AvailableResourcesResourceGetCycleResourceTypesPathParams = {
  /**
   * @format int64
   */
  cycleId: number;
};

export type AvailableResourcesResourceGetCycleResourceTypesError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceTypesResponse =
  Schemas.ObjectIdentifier[];

export type AvailableResourcesResourceGetCycleResourceTypesVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceTypesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceTypes = (
  variables: AvailableResourcesResourceGetCycleResourceTypesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    AvailableResourcesResourceGetCycleResourceTypesResponse,
    AvailableResourcesResourceGetCycleResourceTypesError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceTypesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/availableResources/types",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceTypes = <
  TData = AvailableResourcesResourceGetCycleResourceTypesResponse
>(
  variables: AvailableResourcesResourceGetCycleResourceTypesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AvailableResourcesResourceGetCycleResourceTypesResponse,
      AvailableResourcesResourceGetCycleResourceTypesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    AvailableResourcesResourceGetCycleResourceTypesResponse,
    AvailableResourcesResourceGetCycleResourceTypesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/availableResources/types",
      operationId: "availableResourcesResourceGetCycleResourceTypes",
      variables,
    }),
    ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceTypes(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AvailableResourcesResourceGetCycleResourceTypePathParams = {
  /**
   * @format int64
   */
  cycleId: number;
  /**
   * @format int64
   */
  typeId: number;
};

export type AvailableResourcesResourceGetCycleResourceTypeError =
  Fetcher.ErrorWrapper<undefined>;

export type AvailableResourcesResourceGetCycleResourceTypeVariables = {
  pathParams: AvailableResourcesResourceGetCycleResourceTypePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAvailableResourcesResourceGetCycleResourceType = (
  variables: AvailableResourcesResourceGetCycleResourceTypeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ResourceType,
    AvailableResourcesResourceGetCycleResourceTypeError,
    undefined,
    {},
    {},
    AvailableResourcesResourceGetCycleResourceTypePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/availableResources/types/{typeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useAvailableResourcesResourceGetCycleResourceType = <
  TData = Schemas.ResourceType
>(
  variables: AvailableResourcesResourceGetCycleResourceTypeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ResourceType,
      AvailableResourcesResourceGetCycleResourceTypeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ResourceType,
    AvailableResourcesResourceGetCycleResourceTypeError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/availableResources/types/{typeId}",
      operationId: "availableResourcesResourceGetCycleResourceType",
      variables,
    }),
    ({ signal }) =>
      fetchAvailableResourcesResourceGetCycleResourceType(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservingModeResourceGetCycleObservingModesPathParams = {
  /**
   * @format int64
   */
  cycleId: number;
};

export type ObservingModeResourceGetCycleObservingModesError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservingModeResourceGetCycleObservingModesResponse =
  Schemas.ObjectIdentifier[];

export type ObservingModeResourceGetCycleObservingModesVariables = {
  pathParams: ObservingModeResourceGetCycleObservingModesPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservingModeResourceGetCycleObservingModes = (
  variables: ObservingModeResourceGetCycleObservingModesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ObservingModeResourceGetCycleObservingModesResponse,
    ObservingModeResourceGetCycleObservingModesError,
    undefined,
    {},
    {},
    ObservingModeResourceGetCycleObservingModesPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/observingModes",
    method: "get",
    ...variables,
    signal,
  });

export const useObservingModeResourceGetCycleObservingModes = <
  TData = ObservingModeResourceGetCycleObservingModesResponse
>(
  variables: ObservingModeResourceGetCycleObservingModesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservingModeResourceGetCycleObservingModesResponse,
      ObservingModeResourceGetCycleObservingModesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservingModeResourceGetCycleObservingModesResponse,
    ObservingModeResourceGetCycleObservingModesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/observingModes",
      operationId: "observingModeResourceGetCycleObservingModes",
      variables,
    }),
    ({ signal }) =>
      fetchObservingModeResourceGetCycleObservingModes(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservingModeResourceGetCycleObservingModePathParams = {
  /**
   * @format int64
   */
  cycleId: number;
  /**
   * @format int64
   */
  modeId: number;
};

export type ObservingModeResourceGetCycleObservingModeError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservingModeResourceGetCycleObservingModeVariables = {
  pathParams: ObservingModeResourceGetCycleObservingModePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservingModeResourceGetCycleObservingMode = (
  variables: ObservingModeResourceGetCycleObservingModeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ObservingMode,
    ObservingModeResourceGetCycleObservingModeError,
    undefined,
    {},
    {},
    ObservingModeResourceGetCycleObservingModePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleId}/observingModes/{modeId}",
    method: "get",
    ...variables,
    signal,
  });

export const useObservingModeResourceGetCycleObservingMode = <
  TData = Schemas.ObservingMode
>(
  variables: ObservingModeResourceGetCycleObservingModeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObservingMode,
      ObservingModeResourceGetCycleObservingModeError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObservingMode,
    ObservingModeResourceGetCycleObservingModeError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/{modeId}",
      operationId: "observingModeResourceGetCycleObservingMode",
      variables,
    }),
    ({ signal }) =>
      fetchObservingModeResourceGetCycleObservingMode(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceGetProposalsQueryParams = {
  investigatorName?: string;
  title?: string;
};

export type ProposalResourceGetProposalsError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetProposalsResponse = Schemas.ProposalSynopsis[];

export type ProposalResourceGetProposalsVariables = {
  queryParams?: ProposalResourceGetProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetProposals = (
  variables: ProposalResourceGetProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalResourceGetProposalsResponse,
    ProposalResourceGetProposalsError,
    undefined,
    {},
    ProposalResourceGetProposalsQueryParams,
    {}
  >({ url: "/pst/api/proposals", method: "get", ...variables, signal });

export const useProposalResourceGetProposals = <
  TData = ProposalResourceGetProposalsResponse
>(
  variables: ProposalResourceGetProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetProposalsResponse,
      ProposalResourceGetProposalsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetProposalsResponse,
    ProposalResourceGetProposalsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals",
      operationId: "proposalResourceGetProposals",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetProposals(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceCreateObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceCreateObservingProposalVariables = {
  body?: Schemas.ObservingProposal;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceCreateObservingProposal = (
  variables: ProposalResourceCreateObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    ProposalResourceCreateObservingProposalError,
    Schemas.ObservingProposal,
    {},
    {},
    {}
  >({ url: "/pst/api/proposals", method: "post", ...variables, signal });

export const useProposalResourceCreateObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ObservingProposal,
      ProposalResourceCreateObservingProposalError,
      ProposalResourceCreateObservingProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.ObservingProposal,
    ProposalResourceCreateObservingProposalError,
    ProposalResourceCreateObservingProposalVariables
  >(
    (variables: ProposalResourceCreateObservingProposalVariables) =>
      fetchProposalResourceCreateObservingProposal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceGetObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetObservingProposalVariables = {
  pathParams: ProposalResourceGetObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetObservingProposal = (
  variables: ProposalResourceGetObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    ProposalResourceGetObservingProposalError,
    undefined,
    {},
    {},
    ProposalResourceGetObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetObservingProposal = <
  TData = Schemas.ObservingProposal
>(
  variables: ProposalResourceGetObservingProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObservingProposal,
      ProposalResourceGetObservingProposalError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObservingProposal,
    ProposalResourceGetObservingProposalError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}",
      operationId: "proposalResourceGetObservingProposal",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetObservingProposal(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceDeleteObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceDeleteObservingProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceDeleteObservingProposalVariables = {
  pathParams: ProposalResourceDeleteObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceDeleteObservingProposal = (
  variables: ProposalResourceDeleteObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceDeleteObservingProposalError,
    undefined,
    {},
    {},
    ProposalResourceDeleteObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceDeleteObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceDeleteObservingProposalError,
      ProposalResourceDeleteObservingProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceDeleteObservingProposalError,
    ProposalResourceDeleteObservingProposalVariables
  >(
    (variables: ProposalResourceDeleteObservingProposalVariables) =>
      fetchProposalResourceDeleteObservingProposal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceGetFieldsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetFieldsQueryParams = {
  fieldName?: string;
};

export type ProposalResourceGetFieldsError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetFieldsResponse = Schemas.ObjectIdentifier[];

export type ProposalResourceGetFieldsVariables = {
  pathParams: ProposalResourceGetFieldsPathParams;
  queryParams?: ProposalResourceGetFieldsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetFields = (
  variables: ProposalResourceGetFieldsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalResourceGetFieldsResponse,
    ProposalResourceGetFieldsError,
    undefined,
    {},
    ProposalResourceGetFieldsQueryParams,
    ProposalResourceGetFieldsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetFields = <
  TData = ProposalResourceGetFieldsResponse
>(
  variables: ProposalResourceGetFieldsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetFieldsResponse,
      ProposalResourceGetFieldsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetFieldsResponse,
    ProposalResourceGetFieldsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/fields",
      operationId: "proposalResourceGetFields",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetFields(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceAddNewFieldPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddNewFieldError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddNewFieldVariables = {
  body?: Schemas.Field;
  pathParams: ProposalResourceAddNewFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddNewField = (
  variables: ProposalResourceAddNewFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Field,
    ProposalResourceAddNewFieldError,
    Schemas.Field,
    {},
    {},
    ProposalResourceAddNewFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceAddNewField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Field,
      ProposalResourceAddNewFieldError,
      ProposalResourceAddNewFieldVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Field,
    ProposalResourceAddNewFieldError,
    ProposalResourceAddNewFieldVariables
  >(
    (variables: ProposalResourceAddNewFieldVariables) =>
      fetchProposalResourceAddNewField({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProposalResourceRemoveFieldPathParams = {
  /**
   * @format int64
   */
  fieldId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceRemoveFieldError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceRemoveFieldVariables = {
  pathParams: ProposalResourceRemoveFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceRemoveField = (
  variables: ProposalResourceRemoveFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceRemoveFieldError,
    undefined,
    {},
    {},
    ProposalResourceRemoveFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/fields/{fieldId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceRemoveField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceRemoveFieldError,
      ProposalResourceRemoveFieldVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceRemoveFieldError,
    ProposalResourceRemoveFieldVariables
  >(
    (variables: ProposalResourceRemoveFieldVariables) =>
      fetchProposalResourceRemoveField({ ...fetcherOptions, ...variables }),
    options
  );
};

export type InvestigatorResourceGetInvestigatorsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceGetInvestigatorsQueryParams = {
  fullName?: string;
};

export type InvestigatorResourceGetInvestigatorsError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceGetInvestigatorsResponse =
  Schemas.ObjectIdentifier[];

export type InvestigatorResourceGetInvestigatorsVariables = {
  pathParams: InvestigatorResourceGetInvestigatorsPathParams;
  queryParams?: InvestigatorResourceGetInvestigatorsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceGetInvestigators = (
  variables: InvestigatorResourceGetInvestigatorsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    InvestigatorResourceGetInvestigatorsResponse,
    InvestigatorResourceGetInvestigatorsError,
    undefined,
    {},
    InvestigatorResourceGetInvestigatorsQueryParams,
    InvestigatorResourceGetInvestigatorsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "get",
    ...variables,
    signal,
  });

export const useInvestigatorResourceGetInvestigators = <
  TData = InvestigatorResourceGetInvestigatorsResponse
>(
  variables: InvestigatorResourceGetInvestigatorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      InvestigatorResourceGetInvestigatorsResponse,
      InvestigatorResourceGetInvestigatorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    InvestigatorResourceGetInvestigatorsResponse,
    InvestigatorResourceGetInvestigatorsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators",
      operationId: "investigatorResourceGetInvestigators",
      variables,
    }),
    ({ signal }) =>
      fetchInvestigatorResourceGetInvestigators(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InvestigatorResourceAddPersonAsInvestigatorPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceAddPersonAsInvestigatorError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceAddPersonAsInvestigatorVariables = {
  body?: Schemas.Investigator;
  pathParams: InvestigatorResourceAddPersonAsInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceAddPersonAsInvestigator = (
  variables: InvestigatorResourceAddPersonAsInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Investigator,
    InvestigatorResourceAddPersonAsInvestigatorError,
    Schemas.Investigator,
    {},
    {},
    InvestigatorResourceAddPersonAsInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "post",
    ...variables,
    signal,
  });

export const useInvestigatorResourceAddPersonAsInvestigator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Investigator,
      InvestigatorResourceAddPersonAsInvestigatorError,
      InvestigatorResourceAddPersonAsInvestigatorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Investigator,
    InvestigatorResourceAddPersonAsInvestigatorError,
    InvestigatorResourceAddPersonAsInvestigatorVariables
  >(
    (variables: InvestigatorResourceAddPersonAsInvestigatorVariables) =>
      fetchInvestigatorResourceAddPersonAsInvestigator({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InvestigatorResourceGetInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceGetInvestigatorError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceGetInvestigatorVariables = {
  pathParams: InvestigatorResourceGetInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceGetInvestigator = (
  variables: InvestigatorResourceGetInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Investigator,
    InvestigatorResourceGetInvestigatorError,
    undefined,
    {},
    {},
    InvestigatorResourceGetInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "get",
    ...variables,
    signal,
  });

export const useInvestigatorResourceGetInvestigator = <
  TData = Schemas.Investigator
>(
  variables: InvestigatorResourceGetInvestigatorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Investigator,
      InvestigatorResourceGetInvestigatorError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Investigator,
    InvestigatorResourceGetInvestigatorError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
      operationId: "investigatorResourceGetInvestigator",
      variables,
    }),
    ({ signal }) =>
      fetchInvestigatorResourceGetInvestigator(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type InvestigatorResourceRemoveInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceRemoveInvestigatorError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceRemoveInvestigatorVariables = {
  pathParams: InvestigatorResourceRemoveInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceRemoveInvestigator = (
  variables: InvestigatorResourceRemoveInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InvestigatorResourceRemoveInvestigatorError,
    undefined,
    {},
    {},
    InvestigatorResourceRemoveInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useInvestigatorResourceRemoveInvestigator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InvestigatorResourceRemoveInvestigatorError,
      InvestigatorResourceRemoveInvestigatorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InvestigatorResourceRemoveInvestigatorError,
    InvestigatorResourceRemoveInvestigatorVariables
  >(
    (variables: InvestigatorResourceRemoveInvestigatorVariables) =>
      fetchInvestigatorResourceRemoveInvestigator({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InvestigatorResourceChangeInvestigatorForPhDPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceChangeInvestigatorForPhDError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceChangeInvestigatorForPhDVariables = {
  body?: boolean;
  pathParams: InvestigatorResourceChangeInvestigatorForPhDPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceChangeInvestigatorForPhD = (
  variables: InvestigatorResourceChangeInvestigatorForPhDVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InvestigatorResourceChangeInvestigatorForPhDError,
    boolean,
    {},
    {},
    InvestigatorResourceChangeInvestigatorForPhDPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/forPhD",
    method: "put",
    ...variables,
    signal,
  });

export const useInvestigatorResourceChangeInvestigatorForPhD = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InvestigatorResourceChangeInvestigatorForPhDError,
      InvestigatorResourceChangeInvestigatorForPhDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InvestigatorResourceChangeInvestigatorForPhDError,
    InvestigatorResourceChangeInvestigatorForPhDVariables
  >(
    (variables: InvestigatorResourceChangeInvestigatorForPhDVariables) =>
      fetchInvestigatorResourceChangeInvestigatorForPhD({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type InvestigatorResourceChangeInvestigatorKindPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type InvestigatorResourceChangeInvestigatorKindError =
  Fetcher.ErrorWrapper<undefined>;

export type InvestigatorResourceChangeInvestigatorKindVariables = {
  body?: Schemas.InvestigatorKind;
  pathParams: InvestigatorResourceChangeInvestigatorKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchInvestigatorResourceChangeInvestigatorKind = (
  variables: InvestigatorResourceChangeInvestigatorKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    InvestigatorResourceChangeInvestigatorKindError,
    Schemas.InvestigatorKind,
    {},
    {},
    InvestigatorResourceChangeInvestigatorKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useInvestigatorResourceChangeInvestigatorKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      InvestigatorResourceChangeInvestigatorKindError,
      InvestigatorResourceChangeInvestigatorKindVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    InvestigatorResourceChangeInvestigatorKindError,
    InvestigatorResourceChangeInvestigatorKindVariables
  >(
    (variables: InvestigatorResourceChangeInvestigatorKindVariables) =>
      fetchInvestigatorResourceChangeInvestigatorKind({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceGetJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type ProposalResourceGetJustificationError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetJustificationVariables = {
  pathParams: ProposalResourceGetJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetJustification = (
  variables: ProposalResourceGetJustificationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Justification,
    ProposalResourceGetJustificationError,
    undefined,
    {},
    {},
    ProposalResourceGetJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetJustification = <
  TData = Schemas.Justification
>(
  variables: ProposalResourceGetJustificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Justification,
      ProposalResourceGetJustificationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Justification,
    ProposalResourceGetJustificationError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/justifications/{which}",
      operationId: "proposalResourceGetJustification",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetJustification(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceUpdateJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type ProposalResourceUpdateJustificationError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceUpdateJustificationVariables = {
  body?: Schemas.Justification;
  pathParams: ProposalResourceUpdateJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceUpdateJustification = (
  variables: ProposalResourceUpdateJustificationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Justification,
    ProposalResourceUpdateJustificationError,
    Schemas.Justification,
    {},
    {},
    ProposalResourceUpdateJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceUpdateJustification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Justification,
      ProposalResourceUpdateJustificationError,
      ProposalResourceUpdateJustificationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Justification,
    ProposalResourceUpdateJustificationError,
    ProposalResourceUpdateJustificationVariables
  >(
    (variables: ProposalResourceUpdateJustificationVariables) =>
      fetchProposalResourceUpdateJustification({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceGetObservingProposalKindPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetObservingProposalKindError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetObservingProposalKindVariables = {
  pathParams: ProposalResourceGetObservingProposalKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetObservingProposalKind = (
  variables: ProposalResourceGetObservingProposalKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ProposalKind,
    ProposalResourceGetObservingProposalKindError,
    undefined,
    {},
    {},
    ProposalResourceGetObservingProposalKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/kind",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetObservingProposalKind = <
  TData = Schemas.ProposalKind
>(
  variables: ProposalResourceGetObservingProposalKindVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalKind,
      ProposalResourceGetObservingProposalKindError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalKind,
    ProposalResourceGetObservingProposalKindError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/kind",
      operationId: "proposalResourceGetObservingProposalKind",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetObservingProposalKind(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceChangeKindPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceChangeKindError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceChangeKindVariables = {
  pathParams: ProposalResourceChangeKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceChangeKind = (
  variables: ProposalResourceChangeKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceChangeKindError,
    undefined,
    {},
    {},
    ProposalResourceChangeKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceChangeKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceChangeKindError,
      ProposalResourceChangeKindVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceChangeKindError,
    ProposalResourceChangeKindVariables
  >(
    (variables: ProposalResourceChangeKindVariables) =>
      fetchProposalResourceChangeKind({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ObservationResourceGetObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceGetObservationsQueryParams = {
  srcName?: string;
  type?: Schemas.ObsType;
};

export type ObservationResourceGetObservationsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceGetObservationsResponse =
  Schemas.ObjectIdentifier[];

export type ObservationResourceGetObservationsVariables = {
  pathParams: ObservationResourceGetObservationsPathParams;
  queryParams?: ObservationResourceGetObservationsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceGetObservations = (
  variables: ObservationResourceGetObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ObservationResourceGetObservationsResponse,
    ObservationResourceGetObservationsError,
    undefined,
    {},
    ObservationResourceGetObservationsQueryParams,
    ObservationResourceGetObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "get",
    ...variables,
    signal,
  });

export const useObservationResourceGetObservations = <
  TData = ObservationResourceGetObservationsResponse
>(
  variables: ObservationResourceGetObservationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservationResourceGetObservationsResponse,
      ObservationResourceGetObservationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservationResourceGetObservationsResponse,
    ObservationResourceGetObservationsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations",
      operationId: "observationResourceGetObservations",
      variables,
    }),
    ({ signal }) =>
      fetchObservationResourceGetObservations(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservationResourceAddObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceAddObservationError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceAddObservationVariables = {
  pathParams: ObservationResourceAddObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceAddObservation = (
  variables: ObservationResourceAddObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceAddObservationError,
    undefined,
    {},
    {},
    ObservationResourceAddObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceAddObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceAddObservationError,
      ObservationResourceAddObservationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceAddObservationError,
    ObservationResourceAddObservationVariables
  >(
    (variables: ObservationResourceAddObservationVariables) =>
      fetchObservationResourceAddObservation({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservationResourceAddNewObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceAddNewObservationError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceAddNewObservationVariables = {
  body?: Schemas.Observation;
  pathParams: ObservationResourceAddNewObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceAddNewObservation = (
  variables: ObservationResourceAddNewObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observation,
    ObservationResourceAddNewObservationError,
    Schemas.Observation,
    {},
    {},
    ObservationResourceAddNewObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "post",
    ...variables,
    signal,
  });

export const useObservationResourceAddNewObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Observation,
      ObservationResourceAddNewObservationError,
      ObservationResourceAddNewObservationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Observation,
    ObservationResourceAddNewObservationError,
    ObservationResourceAddNewObservationVariables
  >(
    (variables: ObservationResourceAddNewObservationVariables) =>
      fetchObservationResourceAddNewObservation({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservationResourceRemoveObservationPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceRemoveObservationError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceRemoveObservationVariables = {
  pathParams: ObservationResourceRemoveObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceRemoveObservation = (
  variables: ObservationResourceRemoveObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceRemoveObservationError,
    undefined,
    {},
    {},
    ObservationResourceRemoveObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useObservationResourceRemoveObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceRemoveObservationError,
      ObservationResourceRemoveObservationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceRemoveObservationError,
    ObservationResourceRemoveObservationVariables
  >(
    (variables: ObservationResourceRemoveObservationVariables) =>
      fetchObservationResourceRemoveObservation({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservationResourceGetConstraintsPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceGetConstraintsError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceGetConstraintsResponse = Schemas.Constraint[];

export type ObservationResourceGetConstraintsVariables = {
  pathParams: ObservationResourceGetConstraintsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceGetConstraints = (
  variables: ObservationResourceGetConstraintsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ObservationResourceGetConstraintsResponse,
    ObservationResourceGetConstraintsError,
    undefined,
    {},
    {},
    ObservationResourceGetConstraintsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "get",
    ...variables,
    signal,
  });

export const useObservationResourceGetConstraints = <
  TData = ObservationResourceGetConstraintsResponse
>(
  variables: ObservationResourceGetConstraintsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ObservationResourceGetConstraintsResponse,
      ObservationResourceGetConstraintsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ObservationResourceGetConstraintsResponse,
    ObservationResourceGetConstraintsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
      operationId: "observationResourceGetConstraints",
      variables,
    }),
    ({ signal }) =>
      fetchObservationResourceGetConstraints(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ObservationResourceAddNewConstraintPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceAddNewConstraintError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceAddNewConstraintVariables = {
  body?: Schemas.Constraint;
  pathParams: ObservationResourceAddNewConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceAddNewConstraint = (
  variables: ObservationResourceAddNewConstraintVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceAddNewConstraintError,
    Schemas.Constraint,
    {},
    {},
    ObservationResourceAddNewConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "post",
    ...variables,
    signal,
  });

export const useObservationResourceAddNewConstraint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceAddNewConstraintError,
      ObservationResourceAddNewConstraintVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceAddNewConstraintError,
    ObservationResourceAddNewConstraintVariables
  >(
    (variables: ObservationResourceAddNewConstraintVariables) =>
      fetchObservationResourceAddNewConstraint({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservationResourceRemoveConstraintPathParams = {
  /**
   * @format int64
   */
  constraintId: number;
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceRemoveConstraintError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceRemoveConstraintVariables = {
  pathParams: ObservationResourceRemoveConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceRemoveConstraint = (
  variables: ObservationResourceRemoveConstraintVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceRemoveConstraintError,
    undefined,
    {},
    {},
    ObservationResourceRemoveConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useObservationResourceRemoveConstraint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceRemoveConstraintError,
      ObservationResourceRemoveConstraintVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceRemoveConstraintError,
    ObservationResourceRemoveConstraintVariables
  >(
    (variables: ObservationResourceRemoveConstraintVariables) =>
      fetchObservationResourceRemoveConstraint({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservationResourceReplaceFieldPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceFieldError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceFieldVariables = {
  body?: Schemas.Field;
  pathParams: ObservationResourceReplaceFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceField = (
  variables: ObservationResourceReplaceFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceFieldError,
    Schemas.Field,
    {},
    {},
    ObservationResourceReplaceFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/field",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceFieldError,
      ObservationResourceReplaceFieldVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceFieldError,
    ObservationResourceReplaceFieldVariables
  >(
    (variables: ObservationResourceReplaceFieldVariables) =>
      fetchObservationResourceReplaceField({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ObservationResourceReplaceTargetPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceTargetError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceTargetVariables = {
  body?: Schemas.Target;
  pathParams: ObservationResourceReplaceTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceTarget = (
  variables: ObservationResourceReplaceTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceTargetError,
    Schemas.Target,
    {},
    {},
    ObservationResourceReplaceTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/target",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceTargetError,
      ObservationResourceReplaceTargetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceTargetError,
    ObservationResourceReplaceTargetVariables
  >(
    (variables: ObservationResourceReplaceTargetVariables) =>
      fetchObservationResourceReplaceTarget({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ObservationResourceReplaceTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ObservationResourceReplaceTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type ObservationResourceReplaceTechnicalGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: ObservationResourceReplaceTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchObservationResourceReplaceTechnicalGoal = (
  variables: ObservationResourceReplaceTechnicalGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ObservationResourceReplaceTechnicalGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    ObservationResourceReplaceTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/technicalGoal",
    method: "put",
    ...variables,
    signal,
  });

export const useObservationResourceReplaceTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ObservationResourceReplaceTechnicalGoalError,
      ObservationResourceReplaceTechnicalGoalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ObservationResourceReplaceTechnicalGoalError,
    ObservationResourceReplaceTechnicalGoalVariables
  >(
    (variables: ObservationResourceReplaceTechnicalGoalVariables) =>
      fetchObservationResourceReplaceTechnicalGoal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceAddRelatedProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddRelatedProposalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddRelatedProposalVariables = {
  pathParams: ProposalResourceAddRelatedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddRelatedProposal = (
  variables: ProposalResourceAddRelatedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceAddRelatedProposalError,
    undefined,
    {},
    {},
    ProposalResourceAddRelatedProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/relatedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceAddRelatedProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceAddRelatedProposalError,
      ProposalResourceAddRelatedProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceAddRelatedProposalError,
    ProposalResourceAddRelatedProposalVariables
  >(
    (variables: ProposalResourceAddRelatedProposalVariables) =>
      fetchProposalResourceAddRelatedProposal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceReplaceSummaryPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceReplaceSummaryError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceReplaceSummaryVariables = {
  pathParams: ProposalResourceReplaceSummaryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceReplaceSummary = (
  variables: ProposalResourceReplaceSummaryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceReplaceSummaryError,
    undefined,
    {},
    {},
    ProposalResourceReplaceSummaryPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/summary",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceReplaceSummary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceReplaceSummaryError,
      ProposalResourceReplaceSummaryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceReplaceSummaryError,
    ProposalResourceReplaceSummaryVariables
  >(
    (variables: ProposalResourceReplaceSummaryVariables) =>
      fetchProposalResourceReplaceSummary({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SupportingDocumentResourceGetSupportingDocumentsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceGetSupportingDocumentsQueryParams = {
  title?: string;
};

export type SupportingDocumentResourceGetSupportingDocumentsError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceGetSupportingDocumentsResponse =
  Schemas.ObjectIdentifier[];

export type SupportingDocumentResourceGetSupportingDocumentsVariables = {
  pathParams: SupportingDocumentResourceGetSupportingDocumentsPathParams;
  queryParams?: SupportingDocumentResourceGetSupportingDocumentsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceGetSupportingDocuments = (
  variables: SupportingDocumentResourceGetSupportingDocumentsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    SupportingDocumentResourceGetSupportingDocumentsResponse,
    SupportingDocumentResourceGetSupportingDocumentsError,
    undefined,
    {},
    SupportingDocumentResourceGetSupportingDocumentsQueryParams,
    SupportingDocumentResourceGetSupportingDocumentsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "get",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceGetSupportingDocuments = <
  TData = SupportingDocumentResourceGetSupportingDocumentsResponse
>(
  variables: SupportingDocumentResourceGetSupportingDocumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SupportingDocumentResourceGetSupportingDocumentsResponse,
      SupportingDocumentResourceGetSupportingDocumentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    SupportingDocumentResourceGetSupportingDocumentsResponse,
    SupportingDocumentResourceGetSupportingDocumentsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments",
      operationId: "supportingDocumentResourceGetSupportingDocuments",
      variables,
    }),
    ({ signal }) =>
      fetchSupportingDocumentResourceGetSupportingDocuments(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SupportingDocumentResourceAddNewSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceAddNewSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceAddNewSupportingDocumentVariables = {
  body?: Schemas.SupportingDocument;
  pathParams: SupportingDocumentResourceAddNewSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceAddNewSupportingDocument = (
  variables: SupportingDocumentResourceAddNewSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SupportingDocumentResourceAddNewSupportingDocumentError,
    Schemas.SupportingDocument,
    {},
    {},
    SupportingDocumentResourceAddNewSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "post",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceAddNewSupportingDocument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SupportingDocumentResourceAddNewSupportingDocumentError,
      SupportingDocumentResourceAddNewSupportingDocumentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SupportingDocumentResourceAddNewSupportingDocumentError,
    SupportingDocumentResourceAddNewSupportingDocumentVariables
  >(
    (variables: SupportingDocumentResourceAddNewSupportingDocumentVariables) =>
      fetchSupportingDocumentResourceAddNewSupportingDocument({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type SupportingDocumentResourceGetSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceGetSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceGetSupportingDocumentVariables = {
  pathParams: SupportingDocumentResourceGetSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceGetSupportingDocument = (
  variables: SupportingDocumentResourceGetSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SupportingDocument,
    SupportingDocumentResourceGetSupportingDocumentError,
    undefined,
    {},
    {},
    SupportingDocumentResourceGetSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceGetSupportingDocument = <
  TData = Schemas.SupportingDocument
>(
  variables: SupportingDocumentResourceGetSupportingDocumentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SupportingDocument,
      SupportingDocumentResourceGetSupportingDocumentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SupportingDocument,
    SupportingDocumentResourceGetSupportingDocumentError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
      operationId: "supportingDocumentResourceGetSupportingDocument",
      variables,
    }),
    ({ signal }) =>
      fetchSupportingDocumentResourceGetSupportingDocument(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SupportingDocumentResourceRemoveSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type SupportingDocumentResourceRemoveSupportingDocumentError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceRemoveSupportingDocumentVariables = {
  pathParams: SupportingDocumentResourceRemoveSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceRemoveSupportingDocument = (
  variables: SupportingDocumentResourceRemoveSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SupportingDocumentResourceRemoveSupportingDocumentError,
    undefined,
    {},
    {},
    SupportingDocumentResourceRemoveSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceRemoveSupportingDocument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SupportingDocumentResourceRemoveSupportingDocumentError,
      SupportingDocumentResourceRemoveSupportingDocumentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SupportingDocumentResourceRemoveSupportingDocumentError,
    SupportingDocumentResourceRemoveSupportingDocumentVariables
  >(
    (variables: SupportingDocumentResourceRemoveSupportingDocumentVariables) =>
      fetchSupportingDocumentResourceRemoveSupportingDocument({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type SupportingDocumentResourceReplaceSupportingDocumentLocationPathParams =
  {
    /**
     * @format int64
     */
    id: number;
    /**
     * @format int64
     */
    proposalCode: number;
  };

export type SupportingDocumentResourceReplaceSupportingDocumentLocationError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceReplaceSupportingDocumentLocationVariables =
  {
    pathParams: SupportingDocumentResourceReplaceSupportingDocumentLocationPathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceReplaceSupportingDocumentLocation =
  (
    variables: SupportingDocumentResourceReplaceSupportingDocumentLocationVariables,
    signal?: AbortSignal
  ) =>
    proposalToolFetch<
      undefined,
      SupportingDocumentResourceReplaceSupportingDocumentLocationError,
      undefined,
      {},
      {},
      SupportingDocumentResourceReplaceSupportingDocumentLocationPathParams
    >({
      url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/location",
      method: "put",
      ...variables,
      signal,
    });

export const useSupportingDocumentResourceReplaceSupportingDocumentLocation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SupportingDocumentResourceReplaceSupportingDocumentLocationError,
      SupportingDocumentResourceReplaceSupportingDocumentLocationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SupportingDocumentResourceReplaceSupportingDocumentLocationError,
    SupportingDocumentResourceReplaceSupportingDocumentLocationVariables
  >(
    (
      variables: SupportingDocumentResourceReplaceSupportingDocumentLocationVariables
    ) =>
      fetchSupportingDocumentResourceReplaceSupportingDocumentLocation({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type SupportingDocumentResourceReplaceSupportingDocumentTitlePathParams =
  {
    /**
     * @format int64
     */
    id: number;
    /**
     * @format int64
     */
    proposalCode: number;
  };

export type SupportingDocumentResourceReplaceSupportingDocumentTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type SupportingDocumentResourceReplaceSupportingDocumentTitleVariables =
  {
    pathParams: SupportingDocumentResourceReplaceSupportingDocumentTitlePathParams;
  } & ProposalToolContext["fetcherOptions"];

export const fetchSupportingDocumentResourceReplaceSupportingDocumentTitle = (
  variables: SupportingDocumentResourceReplaceSupportingDocumentTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SupportingDocumentResourceReplaceSupportingDocumentTitleError,
    undefined,
    {},
    {},
    SupportingDocumentResourceReplaceSupportingDocumentTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useSupportingDocumentResourceReplaceSupportingDocumentTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SupportingDocumentResourceReplaceSupportingDocumentTitleError,
      SupportingDocumentResourceReplaceSupportingDocumentTitleVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SupportingDocumentResourceReplaceSupportingDocumentTitleError,
    SupportingDocumentResourceReplaceSupportingDocumentTitleVariables
  >(
    (
      variables: SupportingDocumentResourceReplaceSupportingDocumentTitleVariables
    ) =>
      fetchSupportingDocumentResourceReplaceSupportingDocumentTitle({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceGetTargetsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetTargetsQueryParams = {
  sourceName?: string;
};

export type ProposalResourceGetTargetsError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetTargetsResponse = Schemas.ObjectIdentifier[];

export type ProposalResourceGetTargetsVariables = {
  pathParams: ProposalResourceGetTargetsPathParams;
  queryParams?: ProposalResourceGetTargetsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetTargets = (
  variables: ProposalResourceGetTargetsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalResourceGetTargetsResponse,
    ProposalResourceGetTargetsError,
    undefined,
    {},
    ProposalResourceGetTargetsQueryParams,
    ProposalResourceGetTargetsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetTargets = <
  TData = ProposalResourceGetTargetsResponse
>(
  variables: ProposalResourceGetTargetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetTargetsResponse,
      ProposalResourceGetTargetsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetTargetsResponse,
    ProposalResourceGetTargetsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/targets",
      operationId: "proposalResourceGetTargets",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetTargets(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceAddNewTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddNewTargetError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddNewTargetVariables = {
  body?: Schemas.Target;
  pathParams: ProposalResourceAddNewTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddNewTarget = (
  variables: ProposalResourceAddNewTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Target,
    ProposalResourceAddNewTargetError,
    Schemas.Target,
    {},
    {},
    ProposalResourceAddNewTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceAddNewTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Target,
      ProposalResourceAddNewTargetError,
      ProposalResourceAddNewTargetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Target,
    ProposalResourceAddNewTargetError,
    ProposalResourceAddNewTargetVariables
  >(
    (variables: ProposalResourceAddNewTargetVariables) =>
      fetchProposalResourceAddNewTarget({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProposalResourceGetTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  targetId: number;
};

export type ProposalResourceGetTargetError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetTargetVariables = {
  pathParams: ProposalResourceGetTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetTarget = (
  variables: ProposalResourceGetTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Target,
    ProposalResourceGetTargetError,
    undefined,
    {},
    {},
    ProposalResourceGetTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets/{targetId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetTarget = <TData = Schemas.Target>(
  variables: ProposalResourceGetTargetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Target,
      ProposalResourceGetTargetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Target,
    ProposalResourceGetTargetError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/targets/{targetId}",
      operationId: "proposalResourceGetTarget",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetTarget(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceRemoveTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  targetId: number;
};

export type ProposalResourceRemoveTargetError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceRemoveTargetVariables = {
  pathParams: ProposalResourceRemoveTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceRemoveTarget = (
  variables: ProposalResourceRemoveTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceRemoveTargetError,
    undefined,
    {},
    {},
    ProposalResourceRemoveTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/targets/{targetId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceRemoveTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceRemoveTargetError,
      ProposalResourceRemoveTargetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceRemoveTargetError,
    ProposalResourceRemoveTargetVariables
  >(
    (variables: ProposalResourceRemoveTargetVariables) =>
      fetchProposalResourceRemoveTarget({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ProposalResourceGetTechnicalGoalsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetTechnicalGoalsError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetTechnicalGoalsResponse = Schemas.TechnicalGoal[];

export type ProposalResourceGetTechnicalGoalsVariables = {
  pathParams: ProposalResourceGetTechnicalGoalsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetTechnicalGoals = (
  variables: ProposalResourceGetTechnicalGoalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    ProposalResourceGetTechnicalGoalsResponse,
    ProposalResourceGetTechnicalGoalsError,
    undefined,
    {},
    {},
    ProposalResourceGetTechnicalGoalsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetTechnicalGoals = <
  TData = ProposalResourceGetTechnicalGoalsResponse
>(
  variables: ProposalResourceGetTechnicalGoalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ProposalResourceGetTechnicalGoalsResponse,
      ProposalResourceGetTechnicalGoalsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    ProposalResourceGetTechnicalGoalsResponse,
    ProposalResourceGetTechnicalGoalsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/technicalGoals",
      operationId: "proposalResourceGetTechnicalGoals",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetTechnicalGoals(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceAddNewTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceAddNewTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceAddNewTechnicalGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: ProposalResourceAddNewTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceAddNewTechnicalGoal = (
  variables: ProposalResourceAddNewTechnicalGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.TechnicalGoal,
    ProposalResourceAddNewTechnicalGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    ProposalResourceAddNewTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals",
    method: "post",
    ...variables,
    signal,
  });

export const useProposalResourceAddNewTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TechnicalGoal,
      ProposalResourceAddNewTechnicalGoalError,
      ProposalResourceAddNewTechnicalGoalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.TechnicalGoal,
    ProposalResourceAddNewTechnicalGoalError,
    ProposalResourceAddNewTechnicalGoalVariables
  >(
    (variables: ProposalResourceAddNewTechnicalGoalVariables) =>
      fetchProposalResourceAddNewTechnicalGoal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceRemoveTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  techGoalId: number;
};

export type ProposalResourceRemoveTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceRemoveTechnicalGoalVariables = {
  pathParams: ProposalResourceRemoveTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceRemoveTechnicalGoal = (
  variables: ProposalResourceRemoveTechnicalGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceRemoveTechnicalGoalError,
    undefined,
    {},
    {},
    ProposalResourceRemoveTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{techGoalId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useProposalResourceRemoveTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceRemoveTechnicalGoalError,
      ProposalResourceRemoveTechnicalGoalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceRemoveTechnicalGoalError,
    ProposalResourceRemoveTechnicalGoalVariables
  >(
    (variables: ProposalResourceRemoveTechnicalGoalVariables) =>
      fetchProposalResourceRemoveTechnicalGoal({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ProposalResourceGetTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  technicalGoalId: number;
};

export type ProposalResourceGetTechnicalGoalError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetTechnicalGoalVariables = {
  pathParams: ProposalResourceGetTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetTechnicalGoal = (
  variables: ProposalResourceGetTechnicalGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.TechnicalGoal,
    ProposalResourceGetTechnicalGoalError,
    undefined,
    {},
    {},
    ProposalResourceGetTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetTechnicalGoal = <
  TData = Schemas.TechnicalGoal
>(
  variables: ProposalResourceGetTechnicalGoalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TechnicalGoal,
      ProposalResourceGetTechnicalGoalError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.TechnicalGoal,
    ProposalResourceGetTechnicalGoalError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}",
      operationId: "proposalResourceGetTechnicalGoal",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetTechnicalGoal(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceGetObservingProposalTitlePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceGetObservingProposalTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceGetObservingProposalTitleVariables = {
  pathParams: ProposalResourceGetObservingProposalTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceGetObservingProposalTitle = (
  variables: ProposalResourceGetObservingProposalTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceGetObservingProposalTitleError,
    undefined,
    {},
    {},
    ProposalResourceGetObservingProposalTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/title",
    method: "get",
    ...variables,
    signal,
  });

export const useProposalResourceGetObservingProposalTitle = <TData = undefined>(
  variables: ProposalResourceGetObservingProposalTitleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      ProposalResourceGetObservingProposalTitleError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    undefined,
    ProposalResourceGetObservingProposalTitleError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/title",
      operationId: "proposalResourceGetObservingProposalTitle",
      variables,
    }),
    ({ signal }) =>
      fetchProposalResourceGetObservingProposalTitle(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ProposalResourceReplaceTitlePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ProposalResourceReplaceTitleError = Fetcher.ErrorWrapper<undefined>;

export type ProposalResourceReplaceTitleVariables = {
  pathParams: ProposalResourceReplaceTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchProposalResourceReplaceTitle = (
  variables: ProposalResourceReplaceTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ProposalResourceReplaceTitleError,
    undefined,
    {},
    {},
    ProposalResourceReplaceTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useProposalResourceReplaceTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProposalResourceReplaceTitleError,
      ProposalResourceReplaceTitleVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ProposalResourceReplaceTitleError,
    ProposalResourceReplaceTitleVariables
  >(
    (variables: ProposalResourceReplaceTitleVariables) =>
      fetchProposalResourceReplaceTitle({ ...fetcherOptions, ...variables }),
    options
  );
};

export type SimbadResourceSimbadFindTargetQueryParams = {
  targetName?: string;
};

export type SimbadResourceSimbadFindTargetError =
  Fetcher.ErrorWrapper<undefined>;

export type SimbadResourceSimbadFindTargetVariables = {
  queryParams?: SimbadResourceSimbadFindTargetQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSimbadResourceSimbadFindTarget = (
  variables: SimbadResourceSimbadFindTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Target,
    SimbadResourceSimbadFindTargetError,
    undefined,
    {},
    SimbadResourceSimbadFindTargetQueryParams,
    {}
  >({ url: "/pst/api/simbad", method: "get", ...variables, signal });

export const useSimbadResourceSimbadFindTarget = <TData = Schemas.Target>(
  variables: SimbadResourceSimbadFindTargetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Target,
      SimbadResourceSimbadFindTargetError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Target,
    SimbadResourceSimbadFindTargetError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/simbad",
      operationId: "simbadResourceSimbadFindTarget",
      variables,
    }),
    ({ signal }) =>
      fetchSimbadResourceSimbadFindTarget(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SpaceFrameResourceGetSpaceFramePathParams = {
  frameCode: string;
};

export type SpaceFrameResourceGetSpaceFrameError =
  Fetcher.ErrorWrapper<undefined>;

export type SpaceFrameResourceGetSpaceFrameVariables = {
  pathParams: SpaceFrameResourceGetSpaceFramePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSpaceFrameResourceGetSpaceFrame = (
  variables: SpaceFrameResourceGetSpaceFrameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SpaceFrame,
    SpaceFrameResourceGetSpaceFrameError,
    undefined,
    {},
    {},
    SpaceFrameResourceGetSpaceFramePathParams
  >({
    url: "/pst/api/spaceFrames/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useSpaceFrameResourceGetSpaceFrame = <TData = Schemas.SpaceFrame>(
  variables: SpaceFrameResourceGetSpaceFrameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SpaceFrame,
      SpaceFrameResourceGetSpaceFrameError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SpaceFrame,
    SpaceFrameResourceGetSpaceFrameError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/spaceFrames/{frameCode}",
      operationId: "spaceFrameResourceGetSpaceFrame",
      variables,
    }),
    ({ signal }) =>
      fetchSpaceFrameResourceGetSpaceFrame(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SpaceSystemResourceGetSpaceSystemPathParams = {
  frameCode: string;
};

export type SpaceSystemResourceGetSpaceSystemError =
  Fetcher.ErrorWrapper<undefined>;

export type SpaceSystemResourceGetSpaceSystemVariables = {
  pathParams: SpaceSystemResourceGetSpaceSystemPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSpaceSystemResourceGetSpaceSystem = (
  variables: SpaceSystemResourceGetSpaceSystemVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SpaceSys,
    SpaceSystemResourceGetSpaceSystemError,
    undefined,
    {},
    {},
    SpaceSystemResourceGetSpaceSystemPathParams
  >({
    url: "/pst/api/spaceSystems/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useSpaceSystemResourceGetSpaceSystem = <TData = Schemas.SpaceSys>(
  variables: SpaceSystemResourceGetSpaceSystemVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SpaceSys,
      SpaceSystemResourceGetSpaceSystemError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SpaceSys,
    SpaceSystemResourceGetSpaceSystemError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/spaceSystems/{frameCode}",
      operationId: "spaceSystemResourceGetSpaceSystem",
      variables,
    }),
    ({ signal }) =>
      fetchSpaceSystemResourceGetSpaceSystem(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SubjectMapResourceSubjectMapPathParams = {
  id: string;
};

export type SubjectMapResourceSubjectMapError = Fetcher.ErrorWrapper<undefined>;

export type SubjectMapResourceSubjectMapVariables = {
  pathParams: SubjectMapResourceSubjectMapPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMapResourceSubjectMap = (
  variables: SubjectMapResourceSubjectMapVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SubjectMap,
    SubjectMapResourceSubjectMapError,
    undefined,
    {},
    {},
    SubjectMapResourceSubjectMapPathParams
  >({ url: "/pst/api/subjectMap/{id}", method: "get", ...variables, signal });

export const useSubjectMapResourceSubjectMap = <TData = Schemas.SubjectMap>(
  variables: SubjectMapResourceSubjectMapVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SubjectMap,
      SubjectMapResourceSubjectMapError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SubjectMap,
    SubjectMapResourceSubjectMapError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/subjectMap/{id}",
      operationId: "subjectMapResourceSubjectMap",
      variables,
    }),
    ({ signal }) =>
      fetchSubjectMapResourceSubjectMap(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/pst/api/observatories";
      operationId: "observatoryResourceGetObservatories";
      variables: ObservatoryResourceGetObservatoriesVariables;
    }
  | {
      path: "/pst/api/observatories/{id}";
      operationId: "observatoryResourceGetObservatory";
      variables: ObservatoryResourceGetObservatoryVariables;
    }
  | {
      path: "/pst/api/observatories/{id}/backend";
      operationId: "observatoryResourceGetObservatoryBackends";
      variables: ObservatoryResourceGetObservatoryBackendsVariables;
    }
  | {
      path: "/pst/api/observatories/{id}/backend/{subId}";
      operationId: "observatoryResourceGetObservatoryBackend";
      variables: ObservatoryResourceGetObservatoryBackendVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/instruments";
      operationId: "instrumentResourceGetObservatoryInstruments";
      variables: InstrumentResourceGetObservatoryInstrumentsVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/telescopes";
      operationId: "telescopeResourceGetObservatoryTelescopes";
      variables: TelescopeResourceGetObservatoryTelescopesVariables;
    }
  | {
      path: "/pst/api/observatories/{observatoryId}/telescopes/{telescopeId}";
      operationId: "telescopeResourceGetTelescope";
      variables: TelescopeResourceGetTelescopeVariables;
    }
  | {
      path: "/pst/api/organizations";
      operationId: "organizationResourceGetOrganizations";
      variables: OrganizationResourceGetOrganizationsVariables;
    }
  | {
      path: "/pst/api/organizations/{id}";
      operationId: "organizationResourceGetOrganization";
      variables: OrganizationResourceGetOrganizationVariables;
    }
  | {
      path: "/pst/api/people";
      operationId: "personResourceGetPeople";
      variables: PersonResourceGetPeopleVariables;
    }
  | {
      path: "/pst/api/people/{id}";
      operationId: "personResourceGetPerson";
      variables: PersonResourceGetPersonVariables;
    }
  | {
      path: "/pst/api/proposalCycles";
      operationId: "proposalCyclesResourceGetProposalCycles";
      variables: ProposalCyclesResourceGetProposalCyclesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}";
      operationId: "proposalCyclesResourceGetProposalCycle";
      variables: ProposalCyclesResourceGetProposalCycleVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/TAC";
      operationId: "proposalCyclesResourceGetTAC";
      variables: ProposalCyclesResourceGetTACVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/allocatedProposals";
      operationId: "proposalCyclesResourceGetAllocatedProposalsFromCycle";
      variables: ProposalCyclesResourceGetAllocatedProposalsFromCycleVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/grades";
      operationId: "proposalCyclesResourceGetCycleAllocationGrades";
      variables: ProposalCyclesResourceGetCycleAllocationGradesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/grades/{gradeId}";
      operationId: "proposalCyclesResourceGetCycleAllocatedGrade";
      variables: ProposalCyclesResourceGetCycleAllocatedGradeVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview";
      operationId: "proposalCyclesResourceGetReviewedProposals";
      variables: ProposalCyclesResourceGetReviewedProposalsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}";
      operationId: "proposalCyclesResourceGetReviewedProposal";
      variables: ProposalCyclesResourceGetReviewedProposalVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals";
      operationId: "proposalCyclesResourceGetSubmittedProposals";
      variables: ProposalCyclesResourceGetSubmittedProposalsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/availableResources";
      operationId: "availableResourcesResourceGetCycleAvailableResources";
      variables: AvailableResourcesResourceGetCycleAvailableResourcesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/availableResources/types";
      operationId: "availableResourcesResourceGetCycleResourceTypes";
      variables: AvailableResourcesResourceGetCycleResourceTypesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/availableResources/types/{typeId}";
      operationId: "availableResourcesResourceGetCycleResourceType";
      variables: AvailableResourcesResourceGetCycleResourceTypeVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/observingModes";
      operationId: "observingModeResourceGetCycleObservingModes";
      variables: ObservingModeResourceGetCycleObservingModesVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleId}/observingModes/{modeId}";
      operationId: "observingModeResourceGetCycleObservingMode";
      variables: ObservingModeResourceGetCycleObservingModeVariables;
    }
  | {
      path: "/pst/api/proposals";
      operationId: "proposalResourceGetProposals";
      variables: ProposalResourceGetProposalsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}";
      operationId: "proposalResourceGetObservingProposal";
      variables: ProposalResourceGetObservingProposalVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/fields";
      operationId: "proposalResourceGetFields";
      variables: ProposalResourceGetFieldsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators";
      operationId: "investigatorResourceGetInvestigators";
      variables: InvestigatorResourceGetInvestigatorsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}";
      operationId: "investigatorResourceGetInvestigator";
      variables: InvestigatorResourceGetInvestigatorVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/justifications/{which}";
      operationId: "proposalResourceGetJustification";
      variables: ProposalResourceGetJustificationVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/kind";
      operationId: "proposalResourceGetObservingProposalKind";
      variables: ProposalResourceGetObservingProposalKindVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations";
      operationId: "observationResourceGetObservations";
      variables: ObservationResourceGetObservationsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints";
      operationId: "observationResourceGetConstraints";
      variables: ObservationResourceGetConstraintsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments";
      operationId: "supportingDocumentResourceGetSupportingDocuments";
      variables: SupportingDocumentResourceGetSupportingDocumentsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}";
      operationId: "supportingDocumentResourceGetSupportingDocument";
      variables: SupportingDocumentResourceGetSupportingDocumentVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/targets";
      operationId: "proposalResourceGetTargets";
      variables: ProposalResourceGetTargetsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/targets/{targetId}";
      operationId: "proposalResourceGetTarget";
      variables: ProposalResourceGetTargetVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/technicalGoals";
      operationId: "proposalResourceGetTechnicalGoals";
      variables: ProposalResourceGetTechnicalGoalsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}";
      operationId: "proposalResourceGetTechnicalGoal";
      variables: ProposalResourceGetTechnicalGoalVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/title";
      operationId: "proposalResourceGetObservingProposalTitle";
      variables: ProposalResourceGetObservingProposalTitleVariables;
    }
  | {
      path: "/pst/api/simbad";
      operationId: "simbadResourceSimbadFindTarget";
      variables: SimbadResourceSimbadFindTargetVariables;
    }
  | {
      path: "/pst/api/spaceFrames/{frameCode}";
      operationId: "spaceFrameResourceGetSpaceFrame";
      variables: SpaceFrameResourceGetSpaceFrameVariables;
    }
  | {
      path: "/pst/api/spaceSystems/{frameCode}";
      operationId: "spaceSystemResourceGetSpaceSystem";
      variables: SpaceSystemResourceGetSpaceSystemVariables;
    }
  | {
      path: "/pst/api/subjectMap/{id}";
      operationId: "subjectMapResourceSubjectMap";
      variables: SubjectMapResourceSubjectMapVariables;
    };
