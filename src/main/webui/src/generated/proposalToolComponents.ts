/**
 * Generated by @openapi-codegen
 *
 * @version 0.1
 */
import * as reactQuery from "@tanstack/react-query";
import {
  useProposalToolContext,
  ProposalToolContext,
} from "./proposalToolContext";
import type * as Fetcher from "./proposalToolFetcher";
import { proposalToolFetch } from "./proposalToolFetcher";
import type * as Schemas from "./proposalToolSchemas";

export type GetObservatoriesQueryParams = {
  name?: string;
};

export type GetObservatoriesError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoriesResponse = Schemas.ObjectIdentifier[];

export type GetObservatoriesVariables = {
  queryParams?: GetObservatoriesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetObservatories = (
  variables: GetObservatoriesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetObservatoriesResponse,
    GetObservatoriesError,
    undefined,
    {},
    GetObservatoriesQueryParams,
    {}
  >({ url: "/pst/api/observatories", method: "get", ...variables, signal });

export const useGetObservatories = <TData = GetObservatoriesResponse>(
  variables: GetObservatoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetObservatoriesResponse,
      GetObservatoriesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetObservatoriesResponse,
    GetObservatoriesError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories",
      operationId: "getObservatories",
      variables,
    }),
    ({ signal }) =>
      fetchGetObservatories({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateObservatoryError = Fetcher.ErrorWrapper<undefined>;

export type CreateObservatoryVariables = {
  body?: Schemas.Observatory;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateObservatory = (
  variables: CreateObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateObservatoryError,
    Schemas.Observatory,
    {},
    {},
    {}
  >({ url: "/pst/api/observatories", method: "post", ...variables, signal });

export const useCreateObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateObservatoryError,
      CreateObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateObservatoryError,
    CreateObservatoryVariables
  >(
    (variables: CreateObservatoryVariables) =>
      fetchCreateObservatory({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetObservatoryError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoryVariables = {
  pathParams: GetObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetObservatory = (
  variables: GetObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observatory,
    GetObservatoryError,
    undefined,
    {},
    {},
    GetObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetObservatory = <TData = Schemas.Observatory>(
  variables: GetObservatoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Observatory, GetObservatoryError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Observatory, GetObservatoryError, TData>(
    queryKeyFn({
      path: "/pst/api/observatories/{id}",
      operationId: "getObservatory",
      variables,
    }),
    ({ signal }) =>
      fetchGetObservatory({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeleteObservatoryPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteObservatoryError = Fetcher.ErrorWrapper<undefined>;

export type DeleteObservatoryVariables = {
  pathParams: DeleteObservatoryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchDeleteObservatory = (
  variables: DeleteObservatoryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteObservatoryError,
    undefined,
    {},
    {},
    DeleteObservatoryPathParams
  >({
    url: "/pst/api/observatories/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeleteObservatory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteObservatoryError,
      DeleteObservatoryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    DeleteObservatoryError,
    DeleteObservatoryVariables
  >(
    (variables: DeleteObservatoryVariables) =>
      fetchDeleteObservatory({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateAddressError = Fetcher.ErrorWrapper<undefined>;

export type UpdateAddressVariables = {
  pathParams: UpdateAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateAddress = (
  variables: UpdateAddressVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateAddressError,
    undefined,
    {},
    {},
    UpdateAddressPathParams
  >({
    url: "/pst/api/observatories/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateAddressError,
      UpdateAddressVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateAddressError,
    UpdateAddressVariables
  >(
    (variables: UpdateAddressVariables) =>
      fetchUpdateAddress({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddArrayError = Fetcher.ErrorWrapper<undefined>;

export type AddArrayVariables = {
  pathParams: AddArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddArray = (
  variables: AddArrayVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddArrayError,
    undefined,
    {},
    {},
    AddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "put",
    ...variables,
    signal,
  });

export const useAddArray = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, AddArrayError, AddArrayVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<undefined, AddArrayError, AddArrayVariables>(
    (variables: AddArrayVariables) =>
      fetchAddArray({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CreateAndAddArrayPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddArrayError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddArrayVariables = {
  body?: Schemas.TelescopeArray;
  pathParams: CreateAndAddArrayPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateAndAddArray = (
  variables: CreateAndAddArrayVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddArrayError,
    Schemas.TelescopeArray,
    {},
    {},
    CreateAndAddArrayPathParams
  >({
    url: "/pst/api/observatories/{id}/array",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateAndAddArray = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateAndAddArrayError,
      CreateAndAddArrayVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateAndAddArrayError,
    CreateAndAddArrayVariables
  >(
    (variables: CreateAndAddArrayVariables) =>
      fetchCreateAndAddArray({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetObservatoryBackendsPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetObservatoryBackendsError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoryBackendsResponse = Schemas.Backend[];

export type GetObservatoryBackendsVariables = {
  pathParams: GetObservatoryBackendsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetObservatoryBackends = (
  variables: GetObservatoryBackendsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetObservatoryBackendsResponse,
    GetObservatoryBackendsError,
    undefined,
    {},
    {},
    GetObservatoryBackendsPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "get",
    ...variables,
    signal,
  });

export const useGetObservatoryBackends = <
  TData = GetObservatoryBackendsResponse
>(
  variables: GetObservatoryBackendsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetObservatoryBackendsResponse,
      GetObservatoryBackendsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetObservatoryBackendsResponse,
    GetObservatoryBackendsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{id}/backend",
      operationId: "getObservatoryBackends",
      variables,
    }),
    ({ signal }) =>
      fetchGetObservatoryBackends({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddBackendError = Fetcher.ErrorWrapper<undefined>;

export type AddBackendVariables = {
  pathParams: AddBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddBackend = (
  variables: AddBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddBackendError,
    undefined,
    {},
    {},
    AddBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "put",
    ...variables,
    signal,
  });

export const useAddBackend = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddBackendError,
      AddBackendVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddBackendError,
    AddBackendVariables
  >(
    (variables: AddBackendVariables) =>
      fetchAddBackend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CreateAndAddBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddBackendError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddBackendVariables = {
  body?: Schemas.Backend;
  pathParams: CreateAndAddBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateAndAddBackend = (
  variables: CreateAndAddBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddBackendError,
    Schemas.Backend,
    {},
    {},
    CreateAndAddBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateAndAddBackend = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateAndAddBackendError,
      CreateAndAddBackendVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateAndAddBackendError,
    CreateAndAddBackendVariables
  >(
    (variables: CreateAndAddBackendVariables) =>
      fetchCreateAndAddBackend({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetObservatoryBackendPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type GetObservatoryBackendError = Fetcher.ErrorWrapper<undefined>;

export type GetObservatoryBackendVariables = {
  pathParams: GetObservatoryBackendPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetObservatoryBackend = (
  variables: GetObservatoryBackendVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Backend,
    GetObservatoryBackendError,
    undefined,
    {},
    {},
    GetObservatoryBackendPathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetObservatoryBackend = <TData = Schemas.Backend>(
  variables: GetObservatoryBackendVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Backend,
      GetObservatoryBackendError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Backend,
    GetObservatoryBackendError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/observatories/{id}/backend/{subId}",
      operationId: "getObservatoryBackend",
      variables,
    }),
    ({ signal }) =>
      fetchGetObservatoryBackend({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type ReplaceBackendNamePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceBackendNameError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceBackendNameVariables = {
  pathParams: ReplaceBackendNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceBackendName = (
  variables: ReplaceBackendNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceBackendNameError,
    undefined,
    {},
    {},
    ReplaceBackendNamePathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceBackendName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceBackendNameError,
      ReplaceBackendNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceBackendNameError,
    ReplaceBackendNameVariables
  >(
    (variables: ReplaceBackendNameVariables) =>
      fetchReplaceBackendName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateBackendParallelPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type UpdateBackendParallelError = Fetcher.ErrorWrapper<undefined>;

export type UpdateBackendParallelVariables = {
  body?: boolean;
  pathParams: UpdateBackendParallelPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateBackendParallel = (
  variables: UpdateBackendParallelVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateBackendParallelError,
    boolean,
    {},
    {},
    UpdateBackendParallelPathParams
  >({
    url: "/pst/api/observatories/{id}/backend/{subId}/parallel",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateBackendParallel = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateBackendParallelError,
      UpdateBackendParallelVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateBackendParallelError,
    UpdateBackendParallelVariables
  >(
    (variables: UpdateBackendParallelVariables) =>
      fetchUpdateBackendParallel({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddInstrumentPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddInstrumentError = Fetcher.ErrorWrapper<undefined>;

export type AddInstrumentVariables = {
  pathParams: AddInstrumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddInstrument = (
  variables: AddInstrumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddInstrumentError,
    undefined,
    {},
    {},
    AddInstrumentPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument",
    method: "put",
    ...variables,
    signal,
  });

export const useAddInstrument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddInstrumentError,
      AddInstrumentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddInstrumentError,
    AddInstrumentVariables
  >(
    (variables: AddInstrumentVariables) =>
      fetchAddInstrument({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CreateAndAddInstrumentPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddInstrumentError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddInstrumentVariables = {
  body?: Schemas.Instrument;
  pathParams: CreateAndAddInstrumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateAndAddInstrument = (
  variables: CreateAndAddInstrumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddInstrumentError,
    Schemas.Instrument,
    {},
    {},
    CreateAndAddInstrumentPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateAndAddInstrument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateAndAddInstrumentError,
      CreateAndAddInstrumentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateAndAddInstrumentError,
    CreateAndAddInstrumentVariables
  >(
    (variables: CreateAndAddInstrumentVariables) =>
      fetchCreateAndAddInstrument({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceInstrumentDescriptionPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentDescriptionError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentDescriptionVariables = {
  pathParams: ReplaceInstrumentDescriptionPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceInstrumentDescription = (
  variables: ReplaceInstrumentDescriptionVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentDescriptionError,
    undefined,
    {},
    {},
    ReplaceInstrumentDescriptionPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/description",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceInstrumentDescription = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceInstrumentDescriptionError,
      ReplaceInstrumentDescriptionVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceInstrumentDescriptionError,
    ReplaceInstrumentDescriptionVariables
  >(
    (variables: ReplaceInstrumentDescriptionVariables) =>
      fetchReplaceInstrumentDescription({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceInstrumentFrequencyCoveragePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentFrequencyCoverageError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentFrequencyCoverageVariables = {
  body?: Schemas.SpectralWindowSetup;
  pathParams: ReplaceInstrumentFrequencyCoveragePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceInstrumentFrequencyCoverage = (
  variables: ReplaceInstrumentFrequencyCoverageVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentFrequencyCoverageError,
    Schemas.SpectralWindowSetup,
    {},
    {},
    ReplaceInstrumentFrequencyCoveragePathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/frequencyCoverage",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceInstrumentFrequencyCoverage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceInstrumentFrequencyCoverageError,
      ReplaceInstrumentFrequencyCoverageVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceInstrumentFrequencyCoverageError,
    ReplaceInstrumentFrequencyCoverageVariables
  >(
    (variables: ReplaceInstrumentFrequencyCoverageVariables) =>
      fetchReplaceInstrumentFrequencyCoverage({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReplaceInstrumentKindPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentKindError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentKindVariables = {
  pathParams: ReplaceInstrumentKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceInstrumentKind = (
  variables: ReplaceInstrumentKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentKindError,
    undefined,
    {},
    {},
    ReplaceInstrumentKindPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceInstrumentKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceInstrumentKindError,
      ReplaceInstrumentKindVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceInstrumentKindError,
    ReplaceInstrumentKindVariables
  >(
    (variables: ReplaceInstrumentKindVariables) =>
      fetchReplaceInstrumentKind({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceInstrumentNamePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentNameError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentNameVariables = {
  pathParams: ReplaceInstrumentNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceInstrumentName = (
  variables: ReplaceInstrumentNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentNameError,
    undefined,
    {},
    {},
    ReplaceInstrumentNamePathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceInstrumentName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceInstrumentNameError,
      ReplaceInstrumentNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceInstrumentNameError,
    ReplaceInstrumentNameVariables
  >(
    (variables: ReplaceInstrumentNameVariables) =>
      fetchReplaceInstrumentName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceInstrumentReferencePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentReferenceError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentReferenceVariables = {
  pathParams: ReplaceInstrumentReferencePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceInstrumentReference = (
  variables: ReplaceInstrumentReferenceVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentReferenceError,
    undefined,
    {},
    {},
    ReplaceInstrumentReferencePathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/reference",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceInstrumentReference = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceInstrumentReferenceError,
      ReplaceInstrumentReferenceVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceInstrumentReferenceError,
    ReplaceInstrumentReferenceVariables
  >(
    (variables: ReplaceInstrumentReferenceVariables) =>
      fetchReplaceInstrumentReference({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceInstrumentWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceInstrumentWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceInstrumentWikiIdVariables = {
  pathParams: ReplaceInstrumentWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceInstrumentWikiId = (
  variables: ReplaceInstrumentWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceInstrumentWikiIdError,
    undefined,
    {},
    {},
    ReplaceInstrumentWikiIdPathParams
  >({
    url: "/pst/api/observatories/{id}/instrument/{subId}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceInstrumentWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceInstrumentWikiIdError,
      ReplaceInstrumentWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceInstrumentWikiIdError,
    ReplaceInstrumentWikiIdVariables
  >(
    (variables: ReplaceInstrumentWikiIdVariables) =>
      fetchReplaceInstrumentWikiId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateObservatoryIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateObservatoryIvoIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateObservatoryIvoIdVariables = {
  pathParams: UpdateObservatoryIvoIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateObservatoryIvoId = (
  variables: UpdateObservatoryIvoIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateObservatoryIvoIdError,
    undefined,
    {},
    {},
    UpdateObservatoryIvoIdPathParams
  >({
    url: "/pst/api/observatories/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateObservatoryIvoId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateObservatoryIvoIdError,
      UpdateObservatoryIvoIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateObservatoryIvoIdError,
    UpdateObservatoryIvoIdVariables
  >(
    (variables: UpdateObservatoryIvoIdVariables) =>
      fetchUpdateObservatoryIvoId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateObservatoryNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateObservatoryNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateObservatoryNameVariables = {
  pathParams: UpdateObservatoryNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateObservatoryName = (
  variables: UpdateObservatoryNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateObservatoryNameError,
    undefined,
    {},
    {},
    UpdateObservatoryNamePathParams
  >({
    url: "/pst/api/observatories/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateObservatoryName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateObservatoryNameError,
      UpdateObservatoryNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateObservatoryNameError,
    UpdateObservatoryNameVariables
  >(
    (variables: UpdateObservatoryNameVariables) =>
      fetchUpdateObservatoryName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type AddTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type AddTelescopeVariables = {
  pathParams: AddTelescopePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddTelescope = (
  variables: AddTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddTelescopeError,
    undefined,
    {},
    {},
    AddTelescopePathParams
  >({
    url: "/pst/api/observatories/{id}/telescope",
    method: "put",
    ...variables,
    signal,
  });

export const useAddTelescope = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddTelescopeError,
      AddTelescopeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddTelescopeError,
    AddTelescopeVariables
  >(
    (variables: AddTelescopeVariables) =>
      fetchAddTelescope({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CreateAndAddTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type CreateAndAddTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type CreateAndAddTelescopeVariables = {
  body?: Schemas.Telescope;
  pathParams: CreateAndAddTelescopePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateAndAddTelescope = (
  variables: CreateAndAddTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateAndAddTelescopeError,
    Schemas.Telescope,
    {},
    {},
    CreateAndAddTelescopePathParams
  >({
    url: "/pst/api/observatories/{id}/telescope",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateAndAddTelescope = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateAndAddTelescopeError,
      CreateAndAddTelescopeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateAndAddTelescopeError,
    CreateAndAddTelescopeVariables
  >(
    (variables: CreateAndAddTelescopeVariables) =>
      fetchCreateAndAddTelescope({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTelescopeXPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeXError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeXVariables = {
  pathParams: ReplaceTelescopeXPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTelescopeX = (
  variables: ReplaceTelescopeXVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeXError,
    undefined,
    {},
    {},
    ReplaceTelescopeXPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/x",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTelescopeX = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTelescopeXError,
      ReplaceTelescopeXVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTelescopeXError,
    ReplaceTelescopeXVariables
  >(
    (variables: ReplaceTelescopeXVariables) =>
      fetchReplaceTelescopeX({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTelescopeXYZPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeXYZError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeXYZVariables = {
  pathParams: ReplaceTelescopeXYZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTelescopeXYZ = (
  variables: ReplaceTelescopeXYZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeXYZError,
    undefined,
    {},
    {},
    ReplaceTelescopeXYZPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/xyz",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTelescopeXYZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTelescopeXYZError,
      ReplaceTelescopeXYZVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTelescopeXYZError,
    ReplaceTelescopeXYZVariables
  >(
    (variables: ReplaceTelescopeXYZVariables) =>
      fetchReplaceTelescopeXYZ({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTelescopeYPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeYError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeYVariables = {
  pathParams: ReplaceTelescopeYPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTelescopeY = (
  variables: ReplaceTelescopeYVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeYError,
    undefined,
    {},
    {},
    ReplaceTelescopeYPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/y",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTelescopeY = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTelescopeYError,
      ReplaceTelescopeYVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTelescopeYError,
    ReplaceTelescopeYVariables
  >(
    (variables: ReplaceTelescopeYVariables) =>
      fetchReplaceTelescopeY({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTelescopeZPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeZError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeZVariables = {
  pathParams: ReplaceTelescopeZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTelescopeZ = (
  variables: ReplaceTelescopeZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeZError,
    undefined,
    {},
    {},
    ReplaceTelescopeZPathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/location/z",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTelescopeZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTelescopeZError,
      ReplaceTelescopeZVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTelescopeZError,
    ReplaceTelescopeZVariables
  >(
    (variables: ReplaceTelescopeZVariables) =>
      fetchReplaceTelescopeZ({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTelescopeNamePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  subId: number;
};

export type ReplaceTelescopeNameError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTelescopeNameVariables = {
  pathParams: ReplaceTelescopeNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTelescopeName = (
  variables: ReplaceTelescopeNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTelescopeNameError,
    undefined,
    {},
    {},
    ReplaceTelescopeNamePathParams
  >({
    url: "/pst/api/observatories/{id}/telescope/{subId}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTelescopeName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTelescopeNameError,
      ReplaceTelescopeNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTelescopeNameError,
    ReplaceTelescopeNameVariables
  >(
    (variables: ReplaceTelescopeNameVariables) =>
      fetchReplaceTelescopeName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateObservatoryWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateObservatoryWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateObservatoryWikiIdVariables = {
  pathParams: UpdateObservatoryWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateObservatoryWikiId = (
  variables: UpdateObservatoryWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateObservatoryWikiIdError,
    undefined,
    {},
    {},
    UpdateObservatoryWikiIdPathParams
  >({
    url: "/pst/api/observatories/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateObservatoryWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateObservatoryWikiIdError,
      UpdateObservatoryWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateObservatoryWikiIdError,
    UpdateObservatoryWikiIdVariables
  >(
    (variables: UpdateObservatoryWikiIdVariables) =>
      fetchUpdateObservatoryWikiId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganizationsError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganizationsResponse = Schemas.ObjectIdentifier[];

export type GetOrganizationsVariables = ProposalToolContext["fetcherOptions"];

export const fetchGetOrganizations = (
  variables: GetOrganizationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetOrganizationsResponse,
    GetOrganizationsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "get", ...variables, signal });

export const useGetOrganizations = <TData = GetOrganizationsResponse>(
  variables: GetOrganizationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetOrganizationsResponse,
      GetOrganizationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetOrganizationsResponse,
    GetOrganizationsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/organizations",
      operationId: "getOrganizations",
      variables,
    }),
    ({ signal }) =>
      fetchGetOrganizations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateOrganizationError = Fetcher.ErrorWrapper<undefined>;

export type CreateOrganizationVariables = {
  body?: Schemas.Organization;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateOrganization = (
  variables: CreateOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateOrganizationError,
    Schemas.Organization,
    {},
    {},
    {}
  >({ url: "/pst/api/organizations", method: "post", ...variables, signal });

export const useCreateOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateOrganizationError,
      CreateOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateOrganizationError,
    CreateOrganizationVariables
  >(
    (variables: CreateOrganizationVariables) =>
      fetchCreateOrganization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetOrganizationError = Fetcher.ErrorWrapper<undefined>;

export type GetOrganizationVariables = {
  pathParams: GetOrganizationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetOrganization = (
  variables: GetOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Organization,
    GetOrganizationError,
    undefined,
    {},
    {},
    GetOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetOrganization = <TData = Schemas.Organization>(
  variables: GetOrganizationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Organization,
      GetOrganizationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Organization, GetOrganizationError, TData>(
    queryKeyFn({
      path: "/pst/api/organizations/{id}",
      operationId: "getOrganization",
      variables,
    }),
    ({ signal }) =>
      fetchGetOrganization({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeleteOrganizationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteOrganizationError = Fetcher.ErrorWrapper<undefined>;

export type DeleteOrganizationVariables = {
  pathParams: DeleteOrganizationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchDeleteOrganization = (
  variables: DeleteOrganizationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteOrganizationError,
    undefined,
    {},
    {},
    DeleteOrganizationPathParams
  >({
    url: "/pst/api/organizations/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeleteOrganization = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteOrganizationError,
      DeleteOrganizationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    DeleteOrganizationError,
    DeleteOrganizationVariables
  >(
    (variables: DeleteOrganizationVariables) =>
      fetchDeleteOrganization({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateOrganisationAddressPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationAddressError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationAddressVariables = {
  pathParams: UpdateOrganisationAddressPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateOrganisationAddress = (
  variables: UpdateOrganisationAddressVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationAddressError,
    undefined,
    {},
    {},
    UpdateOrganisationAddressPathParams
  >({
    url: "/pst/api/organizations/{id}/address",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateOrganisationAddress = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateOrganisationAddressError,
      UpdateOrganisationAddressVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateOrganisationAddressError,
    UpdateOrganisationAddressVariables
  >(
    (variables: UpdateOrganisationAddressVariables) =>
      fetchUpdateOrganisationAddress({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateOrganisationIvoIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationIvoIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationIvoIdVariables = {
  pathParams: UpdateOrganisationIvoIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateOrganisationIvoId = (
  variables: UpdateOrganisationIvoIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationIvoIdError,
    undefined,
    {},
    {},
    UpdateOrganisationIvoIdPathParams
  >({
    url: "/pst/api/organizations/{id}/ivoId",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateOrganisationIvoId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateOrganisationIvoIdError,
      UpdateOrganisationIvoIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateOrganisationIvoIdError,
    UpdateOrganisationIvoIdVariables
  >(
    (variables: UpdateOrganisationIvoIdVariables) =>
      fetchUpdateOrganisationIvoId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateOrganisationNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationNameVariables = {
  pathParams: UpdateOrganisationNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateOrganisationName = (
  variables: UpdateOrganisationNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationNameError,
    undefined,
    {},
    {},
    UpdateOrganisationNamePathParams
  >({
    url: "/pst/api/organizations/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateOrganisationName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateOrganisationNameError,
      UpdateOrganisationNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateOrganisationNameError,
    UpdateOrganisationNameVariables
  >(
    (variables: UpdateOrganisationNameVariables) =>
      fetchUpdateOrganisationName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateOrganisationWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrganisationWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrganisationWikiIdVariables = {
  pathParams: UpdateOrganisationWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateOrganisationWikiId = (
  variables: UpdateOrganisationWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrganisationWikiIdError,
    undefined,
    {},
    {},
    UpdateOrganisationWikiIdPathParams
  >({
    url: "/pst/api/organizations/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateOrganisationWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateOrganisationWikiIdError,
      UpdateOrganisationWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateOrganisationWikiIdError,
    UpdateOrganisationWikiIdVariables
  >(
    (variables: UpdateOrganisationWikiIdVariables) =>
      fetchUpdateOrganisationWikiId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPeopleQueryParams = {
  name?: string;
};

export type GetPeopleError = Fetcher.ErrorWrapper<undefined>;

export type GetPeopleResponse = Schemas.ObjectIdentifier[];

export type GetPeopleVariables = {
  queryParams?: GetPeopleQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetPeople = (
  variables: GetPeopleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetPeopleResponse,
    GetPeopleError,
    undefined,
    {},
    GetPeopleQueryParams,
    {}
  >({ url: "/pst/api/people", method: "get", ...variables, signal });

export const useGetPeople = <TData = GetPeopleResponse>(
  variables: GetPeopleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetPeopleResponse, GetPeopleError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<GetPeopleResponse, GetPeopleError, TData>(
    queryKeyFn({
      path: "/pst/api/people",
      operationId: "getPeople",
      variables,
    }),
    ({ signal }) => fetchGetPeople({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreatePersonError = Fetcher.ErrorWrapper<undefined>;

export type CreatePersonVariables = {
  body?: Schemas.Person;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreatePerson = (
  variables: CreatePersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<undefined, CreatePersonError, Schemas.Person, {}, {}, {}>({
    url: "/pst/api/people",
    method: "post",
    ...variables,
    signal,
  });

export const useCreatePerson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreatePersonError,
      CreatePersonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreatePersonError,
    CreatePersonVariables
  >(
    (variables: CreatePersonVariables) =>
      fetchCreatePerson({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetPersonError = Fetcher.ErrorWrapper<undefined>;

export type GetPersonVariables = {
  pathParams: GetPersonPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetPerson = (
  variables: GetPersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Person,
    GetPersonError,
    undefined,
    {},
    {},
    GetPersonPathParams
  >({ url: "/pst/api/people/{id}", method: "get", ...variables, signal });

export const useGetPerson = <TData = Schemas.Person>(
  variables: GetPersonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Person, GetPersonError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Person, GetPersonError, TData>(
    queryKeyFn({
      path: "/pst/api/people/{id}",
      operationId: "getPerson",
      variables,
    }),
    ({ signal }) => fetchGetPerson({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeletePersonPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeletePersonError = Fetcher.ErrorWrapper<undefined>;

export type DeletePersonVariables = {
  pathParams: DeletePersonPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchDeletePerson = (
  variables: DeletePersonVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeletePersonError,
    undefined,
    {},
    {},
    DeletePersonPathParams
  >({ url: "/pst/api/people/{id}", method: "delete", ...variables, signal });

export const useDeletePerson = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeletePersonError,
      DeletePersonVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    DeletePersonError,
    DeletePersonVariables
  >(
    (variables: DeletePersonVariables) =>
      fetchDeletePerson({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateEMailPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateEMailError = Fetcher.ErrorWrapper<undefined>;

export type UpdateEMailVariables = {
  pathParams: UpdateEMailPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateEMail = (
  variables: UpdateEMailVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateEMailError,
    undefined,
    {},
    {},
    UpdateEMailPathParams
  >({ url: "/pst/api/people/{id}/eMail", method: "put", ...variables, signal });

export const useUpdateEMail = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateEMailError,
      UpdateEMailVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateEMailError,
    UpdateEMailVariables
  >(
    (variables: UpdateEMailVariables) =>
      fetchUpdateEMail({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateFullNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateFullNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateFullNameVariables = {
  pathParams: UpdateFullNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateFullName = (
  variables: UpdateFullNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateFullNameError,
    undefined,
    {},
    {},
    UpdateFullNamePathParams
  >({
    url: "/pst/api/people/{id}/fullName",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateFullName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateFullNameError,
      UpdateFullNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateFullNameError,
    UpdateFullNameVariables
  >(
    (variables: UpdateFullNameVariables) =>
      fetchUpdateFullName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateOrcidIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateOrcidIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateOrcidIdVariables = {
  pathParams: UpdateOrcidIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateOrcidId = (
  variables: UpdateOrcidIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateOrcidIdError,
    undefined,
    {},
    {},
    UpdateOrcidIdPathParams
  >({
    url: "/pst/api/people/{id}/orcidId",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateOrcidId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateOrcidIdError,
      UpdateOrcidIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateOrcidIdError,
    UpdateOrcidIdVariables
  >(
    (variables: UpdateOrcidIdVariables) =>
      fetchUpdateOrcidId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProposalCyclessQueryParams = {
  includeClosed?: boolean;
};

export type GetProposalCyclessError = Fetcher.ErrorWrapper<undefined>;

export type GetProposalCyclessResponse = Schemas.ObjectIdentifier[];

export type GetProposalCyclessVariables = {
  queryParams?: GetProposalCyclessQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetProposalCycless = (
  variables: GetProposalCyclessVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetProposalCyclessResponse,
    GetProposalCyclessError,
    undefined,
    {},
    GetProposalCyclessQueryParams,
    {}
  >({ url: "/pst/api/proposalCycles", method: "get", ...variables, signal });

export const useGetProposalCycless = <TData = GetProposalCyclessResponse>(
  variables: GetProposalCyclessVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetProposalCyclessResponse,
      GetProposalCyclessError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetProposalCyclessResponse,
    GetProposalCyclessError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles",
      operationId: "getProposalCycless",
      variables,
    }),
    ({ signal }) =>
      fetchGetProposalCycless({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetProposalCyclePathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetProposalCycleError = Fetcher.ErrorWrapper<undefined>;

export type GetProposalCycleVariables = {
  pathParams: GetProposalCyclePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetProposalCycle = (
  variables: GetProposalCycleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ProposalCycle,
    GetProposalCycleError,
    undefined,
    {},
    {},
    GetProposalCyclePathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetProposalCycle = <TData = Schemas.ProposalCycle>(
  variables: GetProposalCycleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ProposalCycle,
      GetProposalCycleError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ProposalCycle,
    GetProposalCycleError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}",
      operationId: "getProposalCycle",
      variables,
    }),
    ({ signal }) =>
      fetchGetProposalCycle({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetTACPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetTACError = Fetcher.ErrorWrapper<undefined>;

export type GetTACVariables = {
  pathParams: GetTACPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetTAC = (variables: GetTACVariables, signal?: AbortSignal) =>
  proposalToolFetch<
    Schemas.Tac,
    GetTACError,
    undefined,
    {},
    {},
    GetTACPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/TAC",
    method: "get",
    ...variables,
    signal,
  });

export const useGetTAC = <TData = Schemas.Tac>(
  variables: GetTACVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Tac, GetTACError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Tac, GetTACError, TData>(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/TAC",
      operationId: "getTAC",
      variables,
    }),
    ({ signal }) => fetchGetTAC({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetReviewedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetReviewedProposalsQueryParams = {
  title?: string;
};

export type GetReviewedProposalsError = Fetcher.ErrorWrapper<undefined>;

export type GetReviewedProposalsResponse = Schemas.ObjectIdentifier[];

export type GetReviewedProposalsVariables = {
  pathParams: GetReviewedProposalsPathParams;
  queryParams?: GetReviewedProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetReviewedProposals = (
  variables: GetReviewedProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetReviewedProposalsResponse,
    GetReviewedProposalsError,
    undefined,
    {},
    GetReviewedProposalsQueryParams,
    GetReviewedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
    method: "get",
    ...variables,
    signal,
  });

export const useGetReviewedProposals = <TData = GetReviewedProposalsResponse>(
  variables: GetReviewedProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetReviewedProposalsResponse,
      GetReviewedProposalsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetReviewedProposalsResponse,
    GetReviewedProposalsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
      operationId: "getReviewedProposals",
      variables,
    }),
    ({ signal }) =>
      fetchGetReviewedProposals({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SubmitProposalForReviewPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmitProposalForReviewError = Fetcher.ErrorWrapper<undefined>;

export type SubmitProposalForReviewVariables = {
  body?: Schemas.ReviewedProposal;
  pathParams: SubmitProposalForReviewPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmitProposalForReview = (
  variables: SubmitProposalForReviewVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SubmitProposalForReviewError,
    Schemas.ReviewedProposal,
    {},
    {},
    SubmitProposalForReviewPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview",
    method: "put",
    ...variables,
    signal,
  });

export const useSubmitProposalForReview = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmitProposalForReviewError,
      SubmitProposalForReviewVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmitProposalForReviewError,
    SubmitProposalForReviewVariables
  >(
    (variables: SubmitProposalForReviewVariables) =>
      fetchSubmitProposalForReview({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetReviewedProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewCode: number;
};

export type GetReviewedProposalError = Fetcher.ErrorWrapper<undefined>;

export type GetReviewedProposalVariables = {
  pathParams: GetReviewedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetReviewedProposal = (
  variables: GetReviewedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ReviewedProposal,
    GetReviewedProposalError,
    undefined,
    {},
    {},
    GetReviewedProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetReviewedProposal = <TData = Schemas.ReviewedProposal>(
  variables: GetReviewedProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ReviewedProposal,
      GetReviewedProposalError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ReviewedProposal,
    GetReviewedProposalError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}",
      operationId: "getReviewedProposal",
      variables,
    }),
    ({ signal }) =>
      fetchGetReviewedProposal({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SubmitReviewOfProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
  /**
   * @format int64
   */
  reviewCode: number;
};

export type SubmitReviewOfProposalError = Fetcher.ErrorWrapper<undefined>;

export type SubmitReviewOfProposalVariables = {
  body?: Schemas.ProposalReview;
  pathParams: SubmitReviewOfProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmitReviewOfProposal = (
  variables: SubmitReviewOfProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SubmitReviewOfProposalError,
    Schemas.ProposalReview,
    {},
    {},
    SubmitReviewOfProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}/reviews",
    method: "post",
    ...variables,
    signal,
  });

export const useSubmitReviewOfProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmitReviewOfProposalError,
      SubmitReviewOfProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmitReviewOfProposalError,
    SubmitReviewOfProposalVariables
  >(
    (variables: SubmitReviewOfProposalVariables) =>
      fetchSubmitReviewOfProposal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSubmittedProposalsPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type GetSubmittedProposalsQueryParams = {
  title?: string;
};

export type GetSubmittedProposalsError = Fetcher.ErrorWrapper<undefined>;

export type GetSubmittedProposalsResponse = Schemas.ObjectIdentifier[];

export type GetSubmittedProposalsVariables = {
  pathParams: GetSubmittedProposalsPathParams;
  queryParams?: GetSubmittedProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetSubmittedProposals = (
  variables: GetSubmittedProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetSubmittedProposalsResponse,
    GetSubmittedProposalsError,
    undefined,
    {},
    GetSubmittedProposalsQueryParams,
    GetSubmittedProposalsPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "get",
    ...variables,
    signal,
  });

export const useGetSubmittedProposals = <TData = GetSubmittedProposalsResponse>(
  variables: GetSubmittedProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetSubmittedProposalsResponse,
      GetSubmittedProposalsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetSubmittedProposalsResponse,
    GetSubmittedProposalsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
      operationId: "getSubmittedProposals",
      variables,
    }),
    ({ signal }) =>
      fetchGetSubmittedProposals({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SubmitProposalPathParams = {
  /**
   * @format int64
   */
  cycleCode: number;
};

export type SubmitProposalError = Fetcher.ErrorWrapper<undefined>;

export type SubmitProposalVariables = {
  pathParams: SubmitProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubmitProposal = (
  variables: SubmitProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    SubmitProposalError,
    undefined,
    {},
    {},
    SubmitProposalPathParams
  >({
    url: "/pst/api/proposalCycles/{cycleCode}/submittedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useSubmitProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SubmitProposalError,
      SubmitProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    SubmitProposalError,
    SubmitProposalVariables
  >(
    (variables: SubmitProposalVariables) =>
      fetchSubmitProposal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetProposalsQueryParams = {
  title?: string;
};

export type GetProposalsError = Fetcher.ErrorWrapper<undefined>;

export type GetProposalsResponse = Schemas.ObjectIdentifier[];

export type GetProposalsVariables = {
  queryParams?: GetProposalsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetProposals = (
  variables: GetProposalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetProposalsResponse,
    GetProposalsError,
    undefined,
    {},
    GetProposalsQueryParams,
    {}
  >({ url: "/pst/api/proposals", method: "get", ...variables, signal });

export const useGetProposals = <TData = GetProposalsResponse>(
  variables: GetProposalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetProposalsResponse, GetProposalsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<GetProposalsResponse, GetProposalsError, TData>(
    queryKeyFn({
      path: "/pst/api/proposals",
      operationId: "getProposals",
      variables,
    }),
    ({ signal }) =>
      fetchGetProposals({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateObservingProposalError = Fetcher.ErrorWrapper<undefined>;

export type CreateObservingProposalVariables = {
  body?: Schemas.ObservingProposal;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateObservingProposal = (
  variables: CreateObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateObservingProposalError,
    Schemas.ObservingProposal,
    {},
    {},
    {}
  >({ url: "/pst/api/proposals", method: "post", ...variables, signal });

export const useCreateObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateObservingProposalError,
      CreateObservingProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateObservingProposalError,
    CreateObservingProposalVariables
  >(
    (variables: CreateObservingProposalVariables) =>
      fetchCreateObservingProposal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetObservingProposalError = Fetcher.ErrorWrapper<undefined>;

export type GetObservingProposalVariables = {
  pathParams: GetObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetObservingProposal = (
  variables: GetObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.ObservingProposal,
    GetObservingProposalError,
    undefined,
    {},
    {},
    GetObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetObservingProposal = <TData = Schemas.ObservingProposal>(
  variables: GetObservingProposalVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObservingProposal,
      GetObservingProposalError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.ObservingProposal,
    GetObservingProposalError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}",
      operationId: "getObservingProposal",
      variables,
    }),
    ({ signal }) =>
      fetchGetObservingProposal({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeleteObservingProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type DeleteObservingProposalError = Fetcher.ErrorWrapper<undefined>;

export type DeleteObservingProposalVariables = {
  pathParams: DeleteObservingProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchDeleteObservingProposal = (
  variables: DeleteObservingProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteObservingProposalError,
    undefined,
    {},
    {},
    DeleteObservingProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeleteObservingProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteObservingProposalError,
      DeleteObservingProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    DeleteObservingProposalError,
    DeleteObservingProposalVariables
  >(
    (variables: DeleteObservingProposalVariables) =>
      fetchDeleteObservingProposal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetInvestigatorsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetInvestigatorsQueryParams = {
  fullName?: string;
};

export type GetInvestigatorsError = Fetcher.ErrorWrapper<undefined>;

export type GetInvestigatorsResponse = Schemas.ObjectIdentifier[];

export type GetInvestigatorsVariables = {
  pathParams: GetInvestigatorsPathParams;
  queryParams?: GetInvestigatorsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetInvestigators = (
  variables: GetInvestigatorsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetInvestigatorsResponse,
    GetInvestigatorsError,
    undefined,
    {},
    GetInvestigatorsQueryParams,
    GetInvestigatorsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "get",
    ...variables,
    signal,
  });

export const useGetInvestigators = <TData = GetInvestigatorsResponse>(
  variables: GetInvestigatorsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetInvestigatorsResponse,
      GetInvestigatorsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetInvestigatorsResponse,
    GetInvestigatorsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators",
      operationId: "getInvestigators",
      variables,
    }),
    ({ signal }) =>
      fetchGetInvestigators({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddPersonAsInvestigatorPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddPersonAsInvestigatorError = Fetcher.ErrorWrapper<undefined>;

export type AddPersonAsInvestigatorVariables = {
  body?: Schemas.Investigator;
  pathParams: AddPersonAsInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddPersonAsInvestigator = (
  variables: AddPersonAsInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Investigator,
    AddPersonAsInvestigatorError,
    Schemas.Investigator,
    {},
    {},
    AddPersonAsInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators",
    method: "post",
    ...variables,
    signal,
  });

export const useAddPersonAsInvestigator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Investigator,
      AddPersonAsInvestigatorError,
      AddPersonAsInvestigatorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Investigator,
    AddPersonAsInvestigatorError,
    AddPersonAsInvestigatorVariables
  >(
    (variables: AddPersonAsInvestigatorVariables) =>
      fetchAddPersonAsInvestigator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetInvestigatorError = Fetcher.ErrorWrapper<undefined>;

export type GetInvestigatorVariables = {
  pathParams: GetInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetInvestigator = (
  variables: GetInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Investigator,
    GetInvestigatorError,
    undefined,
    {},
    {},
    GetInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetInvestigator = <TData = Schemas.Investigator>(
  variables: GetInvestigatorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Investigator,
      GetInvestigatorError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Investigator, GetInvestigatorError, TData>(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
      operationId: "getInvestigator",
      variables,
    }),
    ({ signal }) =>
      fetchGetInvestigator({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type RemoveInvestigatorPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveInvestigatorError = Fetcher.ErrorWrapper<undefined>;

export type RemoveInvestigatorVariables = {
  pathParams: RemoveInvestigatorPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveInvestigator = (
  variables: RemoveInvestigatorVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveInvestigatorError,
    undefined,
    {},
    {},
    RemoveInvestigatorPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveInvestigator = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveInvestigatorError,
      RemoveInvestigatorVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveInvestigatorError,
    RemoveInvestigatorVariables
  >(
    (variables: RemoveInvestigatorVariables) =>
      fetchRemoveInvestigator({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChangeInvestigatorForPhDPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ChangeInvestigatorForPhDError = Fetcher.ErrorWrapper<undefined>;

export type ChangeInvestigatorForPhDVariables = {
  body?: boolean;
  pathParams: ChangeInvestigatorForPhDPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchChangeInvestigatorForPhD = (
  variables: ChangeInvestigatorForPhDVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ChangeInvestigatorForPhDError,
    boolean,
    {},
    {},
    ChangeInvestigatorForPhDPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/forPhD",
    method: "put",
    ...variables,
    signal,
  });

export const useChangeInvestigatorForPhD = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChangeInvestigatorForPhDError,
      ChangeInvestigatorForPhDVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ChangeInvestigatorForPhDError,
    ChangeInvestigatorForPhDVariables
  >(
    (variables: ChangeInvestigatorForPhDVariables) =>
      fetchChangeInvestigatorForPhD({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChangeInvestigatorKindPathParams = {
  /**
   * @format int64
   */
  investigatorId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ChangeInvestigatorKindError = Fetcher.ErrorWrapper<undefined>;

export type ChangeInvestigatorKindVariables = {
  body?: Schemas.InvestigatorKind;
  pathParams: ChangeInvestigatorKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchChangeInvestigatorKind = (
  variables: ChangeInvestigatorKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ChangeInvestigatorKindError,
    Schemas.InvestigatorKind,
    {},
    {},
    ChangeInvestigatorKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useChangeInvestigatorKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChangeInvestigatorKindError,
      ChangeInvestigatorKindVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ChangeInvestigatorKindError,
    ChangeInvestigatorKindVariables
  >(
    (variables: ChangeInvestigatorKindVariables) =>
      fetchChangeInvestigatorKind({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type GetJustificationError = Fetcher.ErrorWrapper<undefined>;

export type GetJustificationVariables = {
  pathParams: GetJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetJustification = (
  variables: GetJustificationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Justification,
    GetJustificationError,
    undefined,
    {},
    {},
    GetJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetJustification = <TData = Schemas.Justification>(
  variables: GetJustificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Justification,
      GetJustificationError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.Justification,
    GetJustificationError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/justifications/{which}",
      operationId: "getJustification",
      variables,
    }),
    ({ signal }) =>
      fetchGetJustification({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UpdateJustificationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  which: string;
};

export type UpdateJustificationError = Fetcher.ErrorWrapper<undefined>;

export type UpdateJustificationVariables = {
  body?: Schemas.Justification;
  pathParams: UpdateJustificationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateJustification = (
  variables: UpdateJustificationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateJustificationError,
    Schemas.Justification,
    {},
    {},
    UpdateJustificationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/justifications/{which}",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateJustification = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateJustificationError,
      UpdateJustificationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateJustificationError,
    UpdateJustificationVariables
  >(
    (variables: UpdateJustificationVariables) =>
      fetchUpdateJustification({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ChangeKindPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ChangeKindError = Fetcher.ErrorWrapper<undefined>;

export type ChangeKindVariables = {
  pathParams: ChangeKindPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchChangeKind = (
  variables: ChangeKindVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ChangeKindError,
    undefined,
    {},
    {},
    ChangeKindPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/kind",
    method: "put",
    ...variables,
    signal,
  });

export const useChangeKind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ChangeKindError,
      ChangeKindVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ChangeKindError,
    ChangeKindVariables
  >(
    (variables: ChangeKindVariables) =>
      fetchChangeKind({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetObservationsQueryParams = {
  fieldName?: string;
};

export type GetObservationsError = Fetcher.ErrorWrapper<undefined>;

export type GetObservationsResponse = Schemas.ObjectIdentifier[];

export type GetObservationsVariables = {
  pathParams: GetObservationsPathParams;
  queryParams?: GetObservationsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetObservations = (
  variables: GetObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetObservationsResponse,
    GetObservationsError,
    undefined,
    {},
    GetObservationsQueryParams,
    GetObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "get",
    ...variables,
    signal,
  });

export const useGetObservations = <TData = GetObservationsResponse>(
  variables: GetObservationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetObservationsResponse,
      GetObservationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetObservationsResponse,
    GetObservationsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations",
      operationId: "getObservations",
      variables,
    }),
    ({ signal }) =>
      fetchGetObservations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddObservationError = Fetcher.ErrorWrapper<undefined>;

export type AddObservationVariables = {
  pathParams: AddObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddObservation = (
  variables: AddObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddObservationError,
    undefined,
    {},
    {},
    AddObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "put",
    ...variables,
    signal,
  });

export const useAddObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddObservationError,
      AddObservationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddObservationError,
    AddObservationVariables
  >(
    (variables: AddObservationVariables) =>
      fetchAddObservation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddNewObservationPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewObservationError = Fetcher.ErrorWrapper<undefined>;

export type AddNewObservationVariables = {
  body?: Schemas.Observation;
  pathParams: AddNewObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddNewObservation = (
  variables: AddNewObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Observation,
    AddNewObservationError,
    Schemas.Observation,
    {},
    {},
    AddNewObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations",
    method: "post",
    ...variables,
    signal,
  });

export const useAddNewObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Observation,
      AddNewObservationError,
      AddNewObservationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Observation,
    AddNewObservationError,
    AddNewObservationVariables
  >(
    (variables: AddNewObservationVariables) =>
      fetchAddNewObservation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetCalibrationObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetCalibrationObservationsError = Fetcher.ErrorWrapper<undefined>;

export type GetCalibrationObservationsResponse = Schemas.ObjectIdentifier[];

export type GetCalibrationObservationsVariables = {
  pathParams: GetCalibrationObservationsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetCalibrationObservations = (
  variables: GetCalibrationObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetCalibrationObservationsResponse,
    GetCalibrationObservationsError,
    undefined,
    {},
    {},
    GetCalibrationObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/calibrationObservations",
    method: "get",
    ...variables,
    signal,
  });

export const useGetCalibrationObservations = <
  TData = GetCalibrationObservationsResponse
>(
  variables: GetCalibrationObservationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetCalibrationObservationsResponse,
      GetCalibrationObservationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetCalibrationObservationsResponse,
    GetCalibrationObservationsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/calibrationObservations",
      operationId: "getCalibrationObservations",
      variables,
    }),
    ({ signal }) =>
      fetchGetCalibrationObservations(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetFieldsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetFieldsQueryParams = {
  fieldName?: string;
};

export type GetFieldsError = Fetcher.ErrorWrapper<undefined>;

export type GetFieldsResponse = Schemas.ObjectIdentifier[];

export type GetFieldsVariables = {
  pathParams: GetFieldsPathParams;
  queryParams?: GetFieldsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetFields = (
  variables: GetFieldsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetFieldsResponse,
    GetFieldsError,
    undefined,
    {},
    GetFieldsQueryParams,
    GetFieldsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/fields",
    method: "get",
    ...variables,
    signal,
  });

export const useGetFields = <TData = GetFieldsResponse>(
  variables: GetFieldsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetFieldsResponse, GetFieldsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<GetFieldsResponse, GetFieldsError, TData>(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/fields",
      operationId: "getFields",
      variables,
    }),
    ({ signal }) => fetchGetFields({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddNewFieldPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewFieldError = Fetcher.ErrorWrapper<undefined>;

export type AddNewFieldVariables = {
  body?: Schemas.Field;
  pathParams: AddNewFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddNewField = (
  variables: AddNewFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Field,
    AddNewFieldError,
    Schemas.Field,
    {},
    {},
    AddNewFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/fields",
    method: "post",
    ...variables,
    signal,
  });

export const useAddNewField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Field,
      AddNewFieldError,
      AddNewFieldVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Field,
    AddNewFieldError,
    AddNewFieldVariables
  >(
    (variables: AddNewFieldVariables) =>
      fetchAddNewField({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RemoveFieldPathParams = {
  /**
   * @format int64
   */
  fieldId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveFieldError = Fetcher.ErrorWrapper<undefined>;

export type RemoveFieldVariables = {
  pathParams: RemoveFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveField = (
  variables: RemoveFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveFieldError,
    undefined,
    {},
    {},
    RemoveFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/fields/{fieldId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveFieldError,
      RemoveFieldVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveFieldError,
    RemoveFieldVariables
  >(
    (variables: RemoveFieldVariables) =>
      fetchRemoveField({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTargetObservationsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetTargetObservationsError = Fetcher.ErrorWrapper<undefined>;

export type GetTargetObservationsResponse = Schemas.ObjectIdentifier[];

export type GetTargetObservationsVariables = {
  pathParams: GetTargetObservationsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetTargetObservations = (
  variables: GetTargetObservationsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTargetObservationsResponse,
    GetTargetObservationsError,
    undefined,
    {},
    {},
    GetTargetObservationsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targetObservations",
    method: "get",
    ...variables,
    signal,
  });

export const useGetTargetObservations = <TData = GetTargetObservationsResponse>(
  variables: GetTargetObservationsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTargetObservationsResponse,
      GetTargetObservationsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetTargetObservationsResponse,
    GetTargetObservationsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/targetObservations",
      operationId: "getTargetObservations",
      variables,
    }),
    ({ signal }) =>
      fetchGetTargetObservations({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetTargetsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetTargetsQueryParams = {
  sourceName?: string;
};

export type GetTargetsError = Fetcher.ErrorWrapper<undefined>;

export type GetTargetsResponse = Schemas.ObjectIdentifier[];

export type GetTargetsVariables = {
  pathParams: GetTargetsPathParams;
  queryParams?: GetTargetsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetTargets = (
  variables: GetTargetsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTargetsResponse,
    GetTargetsError,
    undefined,
    {},
    GetTargetsQueryParams,
    GetTargetsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targets",
    method: "get",
    ...variables,
    signal,
  });

export const useGetTargets = <TData = GetTargetsResponse>(
  variables: GetTargetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTargetsResponse, GetTargetsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<GetTargetsResponse, GetTargetsError, TData>(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/targets",
      operationId: "getTargets",
      variables,
    }),
    ({ signal }) =>
      fetchGetTargets({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddNewTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewTargetError = Fetcher.ErrorWrapper<undefined>;

export type AddNewTargetVariables = {
  body?: Schemas.Target;
  pathParams: AddNewTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddNewTarget = (
  variables: AddNewTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Target,
    AddNewTargetError,
    Schemas.Target,
    {},
    {},
    AddNewTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targets",
    method: "post",
    ...variables,
    signal,
  });

export const useAddNewTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Target,
      AddNewTargetError,
      AddNewTargetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.Target,
    AddNewTargetError,
    AddNewTargetVariables
  >(
    (variables: AddNewTargetVariables) =>
      fetchAddNewTarget({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RemoveTargetPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  targetId: number;
};

export type RemoveTargetError = Fetcher.ErrorWrapper<undefined>;

export type RemoveTargetVariables = {
  pathParams: RemoveTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveTarget = (
  variables: RemoveTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveTargetError,
    undefined,
    {},
    {},
    RemoveTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/targets/{targetId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveTargetError,
      RemoveTargetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveTargetError,
    RemoveTargetVariables
  >(
    (variables: RemoveTargetVariables) =>
      fetchRemoveTarget({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTechGoalsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetTechGoalsError = Fetcher.ErrorWrapper<undefined>;

export type GetTechGoalsResponse = Schemas.TechnicalGoal[];

export type GetTechGoalsVariables = {
  pathParams: GetTechGoalsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetTechGoals = (
  variables: GetTechGoalsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTechGoalsResponse,
    GetTechGoalsError,
    undefined,
    {},
    {},
    GetTechGoalsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/technicalGoals",
    method: "get",
    ...variables,
    signal,
  });

export const useGetTechGoals = <TData = GetTechGoalsResponse>(
  variables: GetTechGoalsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTechGoalsResponse, GetTechGoalsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<GetTechGoalsResponse, GetTechGoalsError, TData>(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/technicalGoals",
      operationId: "getTechGoals",
      variables,
    }),
    ({ signal }) =>
      fetchGetTechGoals({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddNewTechGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewTechGoalError = Fetcher.ErrorWrapper<undefined>;

export type AddNewTechGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: AddNewTechGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddNewTechGoal = (
  variables: AddNewTechGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.TechnicalGoal,
    AddNewTechGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    AddNewTechGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/technicalGoals",
    method: "post",
    ...variables,
    signal,
  });

export const useAddNewTechGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TechnicalGoal,
      AddNewTechGoalError,
      AddNewTechGoalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    Schemas.TechnicalGoal,
    AddNewTechGoalError,
    AddNewTechGoalVariables
  >(
    (variables: AddNewTechGoalVariables) =>
      fetchAddNewTechGoal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RemoveTechGoalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
  /**
   * @format int64
   */
  techGoalId: number;
};

export type RemoveTechGoalError = Fetcher.ErrorWrapper<undefined>;

export type RemoveTechGoalVariables = {
  pathParams: RemoveTechGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveTechGoal = (
  variables: RemoveTechGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveTechGoalError,
    undefined,
    {},
    {},
    RemoveTechGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/technicalGoals/{techGoalId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveTechGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveTechGoalError,
      RemoveTechGoalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveTechGoalError,
    RemoveTechGoalVariables
  >(
    (variables: RemoveTechGoalVariables) =>
      fetchRemoveTechGoal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RemoveObservationPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveObservationError = Fetcher.ErrorWrapper<undefined>;

export type RemoveObservationVariables = {
  pathParams: RemoveObservationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveObservation = (
  variables: RemoveObservationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveObservationError,
    undefined,
    {},
    {},
    RemoveObservationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveObservation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveObservationError,
      RemoveObservationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveObservationError,
    RemoveObservationVariables
  >(
    (variables: RemoveObservationVariables) =>
      fetchRemoveObservation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetConstraintsPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetConstraintsError = Fetcher.ErrorWrapper<undefined>;

export type GetConstraintsResponse = Schemas.Constraint[];

export type GetConstraintsVariables = {
  pathParams: GetConstraintsPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetConstraints = (
  variables: GetConstraintsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetConstraintsResponse,
    GetConstraintsError,
    undefined,
    {},
    {},
    GetConstraintsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "get",
    ...variables,
    signal,
  });

export const useGetConstraints = <TData = GetConstraintsResponse>(
  variables: GetConstraintsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetConstraintsResponse,
      GetConstraintsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetConstraintsResponse,
    GetConstraintsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
      operationId: "getConstraints",
      variables,
    }),
    ({ signal }) =>
      fetchGetConstraints({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddNewConstraintPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewConstraintError = Fetcher.ErrorWrapper<undefined>;

export type AddNewConstraintVariables = {
  body?: Schemas.Constraint;
  pathParams: AddNewConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddNewConstraint = (
  variables: AddNewConstraintVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddNewConstraintError,
    Schemas.Constraint,
    {},
    {},
    AddNewConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints",
    method: "post",
    ...variables,
    signal,
  });

export const useAddNewConstraint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddNewConstraintError,
      AddNewConstraintVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddNewConstraintError,
    AddNewConstraintVariables
  >(
    (variables: AddNewConstraintVariables) =>
      fetchAddNewConstraint({ ...fetcherOptions, ...variables }),
    options
  );
};

export type RemoveConstraintPathParams = {
  /**
   * @format int64
   */
  constraintId: number;
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveConstraintError = Fetcher.ErrorWrapper<undefined>;

export type RemoveConstraintVariables = {
  pathParams: RemoveConstraintPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveConstraint = (
  variables: RemoveConstraintVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveConstraintError,
    undefined,
    {},
    {},
    RemoveConstraintPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveConstraint = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveConstraintError,
      RemoveConstraintVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveConstraintError,
    RemoveConstraintVariables
  >(
    (variables: RemoveConstraintVariables) =>
      fetchRemoveConstraint({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceFieldPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceFieldError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceFieldVariables = {
  body?: Schemas.Field;
  pathParams: ReplaceFieldPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceField = (
  variables: ReplaceFieldVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceFieldError,
    Schemas.Field,
    {},
    {},
    ReplaceFieldPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/field",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceField = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceFieldError,
      ReplaceFieldVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceFieldError,
    ReplaceFieldVariables
  >(
    (variables: ReplaceFieldVariables) =>
      fetchReplaceField({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTargetPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceTargetError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTargetVariables = {
  body?: Schemas.Target;
  pathParams: ReplaceTargetPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTarget = (
  variables: ReplaceTargetVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTargetError,
    Schemas.Target,
    {},
    {},
    ReplaceTargetPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/target",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTarget = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTargetError,
      ReplaceTargetVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTargetError,
    ReplaceTargetVariables
  >(
    (variables: ReplaceTargetVariables) =>
      fetchReplaceTarget({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTechnicalGoalPathParams = {
  /**
   * @format int64
   */
  observationId: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceTechnicalGoalError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTechnicalGoalVariables = {
  body?: Schemas.TechnicalGoal;
  pathParams: ReplaceTechnicalGoalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTechnicalGoal = (
  variables: ReplaceTechnicalGoalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTechnicalGoalError,
    Schemas.TechnicalGoal,
    {},
    {},
    ReplaceTechnicalGoalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/observations/{observationId}/technicalGoal",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTechnicalGoal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTechnicalGoalError,
      ReplaceTechnicalGoalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTechnicalGoalError,
    ReplaceTechnicalGoalVariables
  >(
    (variables: ReplaceTechnicalGoalVariables) =>
      fetchReplaceTechnicalGoal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type AddRelatedProposalPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddRelatedProposalError = Fetcher.ErrorWrapper<undefined>;

export type AddRelatedProposalVariables = {
  pathParams: AddRelatedProposalPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddRelatedProposal = (
  variables: AddRelatedProposalVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddRelatedProposalError,
    undefined,
    {},
    {},
    AddRelatedProposalPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/relatedProposals",
    method: "put",
    ...variables,
    signal,
  });

export const useAddRelatedProposal = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddRelatedProposalError,
      AddRelatedProposalVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddRelatedProposalError,
    AddRelatedProposalVariables
  >(
    (variables: AddRelatedProposalVariables) =>
      fetchAddRelatedProposal({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceSummaryPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceSummaryError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceSummaryVariables = {
  pathParams: ReplaceSummaryPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceSummary = (
  variables: ReplaceSummaryVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceSummaryError,
    undefined,
    {},
    {},
    ReplaceSummaryPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/summary",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceSummary = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceSummaryError,
      ReplaceSummaryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceSummaryError,
    ReplaceSummaryVariables
  >(
    (variables: ReplaceSummaryVariables) =>
      fetchReplaceSummary({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSupportingDocumentsPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetSupportingDocumentsQueryParams = {
  title?: string;
};

export type GetSupportingDocumentsError = Fetcher.ErrorWrapper<undefined>;

export type GetSupportingDocumentsResponse = Schemas.ObjectIdentifier[];

export type GetSupportingDocumentsVariables = {
  pathParams: GetSupportingDocumentsPathParams;
  queryParams?: GetSupportingDocumentsQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetSupportingDocuments = (
  variables: GetSupportingDocumentsVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetSupportingDocumentsResponse,
    GetSupportingDocumentsError,
    undefined,
    {},
    GetSupportingDocumentsQueryParams,
    GetSupportingDocumentsPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "get",
    ...variables,
    signal,
  });

export const useGetSupportingDocuments = <
  TData = GetSupportingDocumentsResponse
>(
  variables: GetSupportingDocumentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetSupportingDocumentsResponse,
      GetSupportingDocumentsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    GetSupportingDocumentsResponse,
    GetSupportingDocumentsError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments",
      operationId: "getSupportingDocuments",
      variables,
    }),
    ({ signal }) =>
      fetchGetSupportingDocuments({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type AddNewSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type AddNewSupportingDocumentError = Fetcher.ErrorWrapper<undefined>;

export type AddNewSupportingDocumentVariables = {
  body?: Schemas.SupportingDocument;
  pathParams: AddNewSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchAddNewSupportingDocument = (
  variables: AddNewSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    AddNewSupportingDocumentError,
    Schemas.SupportingDocument,
    {},
    {},
    AddNewSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments",
    method: "post",
    ...variables,
    signal,
  });

export const useAddNewSupportingDocument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AddNewSupportingDocumentError,
      AddNewSupportingDocumentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    AddNewSupportingDocumentError,
    AddNewSupportingDocumentVariables
  >(
    (variables: AddNewSupportingDocumentVariables) =>
      fetchAddNewSupportingDocument({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type GetSupportingDocumentError = Fetcher.ErrorWrapper<undefined>;

export type GetSupportingDocumentVariables = {
  pathParams: GetSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetSupportingDocument = (
  variables: GetSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SupportingDocument,
    GetSupportingDocumentError,
    undefined,
    {},
    {},
    GetSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetSupportingDocument = <TData = Schemas.SupportingDocument>(
  variables: GetSupportingDocumentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SupportingDocument,
      GetSupportingDocumentError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<
    Schemas.SupportingDocument,
    GetSupportingDocumentError,
    TData
  >(
    queryKeyFn({
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
      operationId: "getSupportingDocument",
      variables,
    }),
    ({ signal }) =>
      fetchGetSupportingDocument({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type RemoveSupportingDocumentPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type RemoveSupportingDocumentError = Fetcher.ErrorWrapper<undefined>;

export type RemoveSupportingDocumentVariables = {
  pathParams: RemoveSupportingDocumentPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchRemoveSupportingDocument = (
  variables: RemoveSupportingDocumentVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    RemoveSupportingDocumentError,
    undefined,
    {},
    {},
    RemoveSupportingDocumentPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useRemoveSupportingDocument = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      RemoveSupportingDocumentError,
      RemoveSupportingDocumentVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    RemoveSupportingDocumentError,
    RemoveSupportingDocumentVariables
  >(
    (variables: RemoveSupportingDocumentVariables) =>
      fetchRemoveSupportingDocument({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceSupportingDocumentLocationPathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceSupportingDocumentLocationError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceSupportingDocumentLocationVariables = {
  pathParams: ReplaceSupportingDocumentLocationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceSupportingDocumentLocation = (
  variables: ReplaceSupportingDocumentLocationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceSupportingDocumentLocationError,
    undefined,
    {},
    {},
    ReplaceSupportingDocumentLocationPathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/location",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceSupportingDocumentLocation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceSupportingDocumentLocationError,
      ReplaceSupportingDocumentLocationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceSupportingDocumentLocationError,
    ReplaceSupportingDocumentLocationVariables
  >(
    (variables: ReplaceSupportingDocumentLocationVariables) =>
      fetchReplaceSupportingDocumentLocation({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type ReplaceSupportingDocumentTitlePathParams = {
  /**
   * @format int64
   */
  id: number;
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceSupportingDocumentTitleError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceSupportingDocumentTitleVariables = {
  pathParams: ReplaceSupportingDocumentTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceSupportingDocumentTitle = (
  variables: ReplaceSupportingDocumentTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceSupportingDocumentTitleError,
    undefined,
    {},
    {},
    ReplaceSupportingDocumentTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceSupportingDocumentTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceSupportingDocumentTitleError,
      ReplaceSupportingDocumentTitleVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceSupportingDocumentTitleError,
    ReplaceSupportingDocumentTitleVariables
  >(
    (variables: ReplaceSupportingDocumentTitleVariables) =>
      fetchReplaceSupportingDocumentTitle({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceTitlePathParams = {
  /**
   * @format int64
   */
  proposalCode: number;
};

export type ReplaceTitleError = Fetcher.ErrorWrapper<undefined>;

export type ReplaceTitleVariables = {
  pathParams: ReplaceTitlePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchReplaceTitle = (
  variables: ReplaceTitleVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    ReplaceTitleError,
    undefined,
    {},
    {},
    ReplaceTitlePathParams
  >({
    url: "/pst/api/proposals/{proposalCode}/title",
    method: "put",
    ...variables,
    signal,
  });

export const useReplaceTitle = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ReplaceTitleError,
      ReplaceTitleVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    ReplaceTitleError,
    ReplaceTitleVariables
  >(
    (variables: ReplaceTitleVariables) =>
      fetchReplaceTitle({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetSpaceFramePathParams = {
  frameCode: string;
};

export type GetSpaceFrameError = Fetcher.ErrorWrapper<undefined>;

export type GetSpaceFrameVariables = {
  pathParams: GetSpaceFramePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetSpaceFrame = (
  variables: GetSpaceFrameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SpaceFrame,
    GetSpaceFrameError,
    undefined,
    {},
    {},
    GetSpaceFramePathParams
  >({
    url: "/pst/api/spaceFrames/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetSpaceFrame = <TData = Schemas.SpaceFrame>(
  variables: GetSpaceFrameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SpaceFrame, GetSpaceFrameError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.SpaceFrame, GetSpaceFrameError, TData>(
    queryKeyFn({
      path: "/pst/api/spaceFrames/{frameCode}",
      operationId: "getSpaceFrame",
      variables,
    }),
    ({ signal }) =>
      fetchGetSpaceFrame({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetSpaceSystemPathParams = {
  frameCode: string;
};

export type GetSpaceSystemError = Fetcher.ErrorWrapper<undefined>;

export type GetSpaceSystemVariables = {
  pathParams: GetSpaceSystemPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetSpaceSystem = (
  variables: GetSpaceSystemVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SpaceSys,
    GetSpaceSystemError,
    undefined,
    {},
    {},
    GetSpaceSystemPathParams
  >({
    url: "/pst/api/spaceSystems/{frameCode}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetSpaceSystem = <TData = Schemas.SpaceSys>(
  variables: GetSpaceSystemVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SpaceSys, GetSpaceSystemError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.SpaceSys, GetSpaceSystemError, TData>(
    queryKeyFn({
      path: "/pst/api/spaceSystems/{frameCode}",
      operationId: "getSpaceSystem",
      variables,
    }),
    ({ signal }) =>
      fetchGetSpaceSystem({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type SubjectMapPathParams = {
  id: string;
};

export type SubjectMapError = Fetcher.ErrorWrapper<undefined>;

export type SubjectMapVariables = {
  pathParams: SubjectMapPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchSubjectMap = (
  variables: SubjectMapVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.SubjectMap,
    SubjectMapError,
    undefined,
    {},
    {},
    SubjectMapPathParams
  >({ url: "/pst/api/subjectMap/{id}", method: "get", ...variables, signal });

export const useSubjectMap = <TData = Schemas.SubjectMap>(
  variables: SubjectMapVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SubjectMap, SubjectMapError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.SubjectMap, SubjectMapError, TData>(
    queryKeyFn({
      path: "/pst/api/subjectMap/{id}",
      operationId: "subjectMap",
      variables,
    }),
    ({ signal }) =>
      fetchSubjectMap({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetTelescopesQueryParams = {
  name?: string;
};

export type GetTelescopesError = Fetcher.ErrorWrapper<undefined>;

export type GetTelescopesResponse = Schemas.ObjectIdentifier[];

export type GetTelescopesVariables = {
  queryParams?: GetTelescopesQueryParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetTelescopes = (
  variables: GetTelescopesVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    GetTelescopesResponse,
    GetTelescopesError,
    undefined,
    {},
    GetTelescopesQueryParams,
    {}
  >({ url: "/pst/api/telescopes", method: "get", ...variables, signal });

export const useGetTelescopes = <TData = GetTelescopesResponse>(
  variables: GetTelescopesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetTelescopesResponse,
      GetTelescopesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<GetTelescopesResponse, GetTelescopesError, TData>(
    queryKeyFn({
      path: "/pst/api/telescopes",
      operationId: "getTelescopes",
      variables,
    }),
    ({ signal }) =>
      fetchGetTelescopes({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type CreateTelescopeVariables = {
  body?: Schemas.Telescope;
} & ProposalToolContext["fetcherOptions"];

export const fetchCreateTelescope = (
  variables: CreateTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    CreateTelescopeError,
    Schemas.Telescope,
    {},
    {},
    {}
  >({ url: "/pst/api/telescopes", method: "post", ...variables, signal });

export const useCreateTelescope = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CreateTelescopeError,
      CreateTelescopeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    CreateTelescopeError,
    CreateTelescopeVariables
  >(
    (variables: CreateTelescopeVariables) =>
      fetchCreateTelescope({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type GetTelescopeVariables = {
  pathParams: GetTelescopePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchGetTelescope = (
  variables: GetTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    Schemas.Telescope,
    GetTelescopeError,
    undefined,
    {},
    {},
    GetTelescopePathParams
  >({ url: "/pst/api/telescopes/{id}", method: "get", ...variables, signal });

export const useGetTelescope = <TData = Schemas.Telescope>(
  variables: GetTelescopeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Telescope, GetTelescopeError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useProposalToolContext(options);
  return reactQuery.useQuery<Schemas.Telescope, GetTelescopeError, TData>(
    queryKeyFn({
      path: "/pst/api/telescopes/{id}",
      operationId: "getTelescope",
      variables,
    }),
    ({ signal }) =>
      fetchGetTelescope({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type DeleteTelescopePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteTelescopeError = Fetcher.ErrorWrapper<undefined>;

export type DeleteTelescopeVariables = {
  pathParams: DeleteTelescopePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchDeleteTelescope = (
  variables: DeleteTelescopeVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    DeleteTelescopeError,
    undefined,
    {},
    {},
    DeleteTelescopePathParams
  >({
    url: "/pst/api/telescopes/{id}",
    method: "delete",
    ...variables,
    signal,
  });

export const useDeleteTelescope = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteTelescopeError,
      DeleteTelescopeVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    DeleteTelescopeError,
    DeleteTelescopeVariables
  >(
    (variables: DeleteTelescopeVariables) =>
      fetchDeleteTelescope({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateLocationPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationVariables = {
  body?: Schemas.GeocentricPoint;
  pathParams: UpdateLocationPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateLocation = (
  variables: UpdateLocationVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationError,
    Schemas.GeocentricPoint,
    {},
    {},
    UpdateLocationPathParams
  >({
    url: "/pst/api/telescopes/{id}/location",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateLocation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateLocationError,
      UpdateLocationVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateLocationError,
    UpdateLocationVariables
  >(
    (variables: UpdateLocationVariables) =>
      fetchUpdateLocation({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateLocationCoordinateSystemPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationCoordinateSystemError =
  Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationCoordinateSystemVariables = {
  pathParams: UpdateLocationCoordinateSystemPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateLocationCoordinateSystem = (
  variables: UpdateLocationCoordinateSystemVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationCoordinateSystemError,
    undefined,
    {},
    {},
    UpdateLocationCoordinateSystemPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/coordinateSystem",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateLocationCoordinateSystem = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateLocationCoordinateSystemError,
      UpdateLocationCoordinateSystemVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateLocationCoordinateSystemError,
    UpdateLocationCoordinateSystemVariables
  >(
    (variables: UpdateLocationCoordinateSystemVariables) =>
      fetchUpdateLocationCoordinateSystem({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateLocationXPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationXError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationXVariables = {
  body?: Schemas.RealQuantity;
  pathParams: UpdateLocationXPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateLocationX = (
  variables: UpdateLocationXVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationXError,
    Schemas.RealQuantity,
    {},
    {},
    UpdateLocationXPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/x",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateLocationX = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateLocationXError,
      UpdateLocationXVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateLocationXError,
    UpdateLocationXVariables
  >(
    (variables: UpdateLocationXVariables) =>
      fetchUpdateLocationX({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateLocationXYZPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationXYZError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationXYZRequestBody = Schemas.RealQuantity[];

export type UpdateLocationXYZVariables = {
  body?: UpdateLocationXYZRequestBody;
  pathParams: UpdateLocationXYZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateLocationXYZ = (
  variables: UpdateLocationXYZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationXYZError,
    UpdateLocationXYZRequestBody,
    {},
    {},
    UpdateLocationXYZPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/xyz",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateLocationXYZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateLocationXYZError,
      UpdateLocationXYZVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateLocationXYZError,
    UpdateLocationXYZVariables
  >(
    (variables: UpdateLocationXYZVariables) =>
      fetchUpdateLocationXYZ({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateLocationYPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationYError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationYVariables = {
  body?: Schemas.RealQuantity;
  pathParams: UpdateLocationYPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateLocationY = (
  variables: UpdateLocationYVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationYError,
    Schemas.RealQuantity,
    {},
    {},
    UpdateLocationYPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/y",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateLocationY = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateLocationYError,
      UpdateLocationYVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateLocationYError,
    UpdateLocationYVariables
  >(
    (variables: UpdateLocationYVariables) =>
      fetchUpdateLocationY({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateLocationZPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateLocationZError = Fetcher.ErrorWrapper<undefined>;

export type UpdateLocationZVariables = {
  body?: Schemas.RealQuantity;
  pathParams: UpdateLocationZPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateLocationZ = (
  variables: UpdateLocationZVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateLocationZError,
    Schemas.RealQuantity,
    {},
    {},
    UpdateLocationZPathParams
  >({
    url: "/pst/api/telescopes/{id}/location/z",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateLocationZ = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateLocationZError,
      UpdateLocationZVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateLocationZError,
    UpdateLocationZVariables
  >(
    (variables: UpdateLocationZVariables) =>
      fetchUpdateLocationZ({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateTelescopeNamePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateTelescopeNameError = Fetcher.ErrorWrapper<undefined>;

export type UpdateTelescopeNameVariables = {
  pathParams: UpdateTelescopeNamePathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateTelescopeName = (
  variables: UpdateTelescopeNameVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateTelescopeNameError,
    undefined,
    {},
    {},
    UpdateTelescopeNamePathParams
  >({
    url: "/pst/api/telescopes/{id}/name",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateTelescopeName = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateTelescopeNameError,
      UpdateTelescopeNameVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateTelescopeNameError,
    UpdateTelescopeNameVariables
  >(
    (variables: UpdateTelescopeNameVariables) =>
      fetchUpdateTelescopeName({ ...fetcherOptions, ...variables }),
    options
  );
};

export type UpdateTelescopeWikiIdPathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type UpdateTelescopeWikiIdError = Fetcher.ErrorWrapper<undefined>;

export type UpdateTelescopeWikiIdVariables = {
  pathParams: UpdateTelescopeWikiIdPathParams;
} & ProposalToolContext["fetcherOptions"];

export const fetchUpdateTelescopeWikiId = (
  variables: UpdateTelescopeWikiIdVariables,
  signal?: AbortSignal
) =>
  proposalToolFetch<
    undefined,
    UpdateTelescopeWikiIdError,
    undefined,
    {},
    {},
    UpdateTelescopeWikiIdPathParams
  >({
    url: "/pst/api/telescopes/{id}/wikiId",
    method: "put",
    ...variables,
    signal,
  });

export const useUpdateTelescopeWikiId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UpdateTelescopeWikiIdError,
      UpdateTelescopeWikiIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useProposalToolContext();
  return reactQuery.useMutation<
    undefined,
    UpdateTelescopeWikiIdError,
    UpdateTelescopeWikiIdVariables
  >(
    (variables: UpdateTelescopeWikiIdVariables) =>
      fetchUpdateTelescopeWikiId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/pst/api/observatories";
      operationId: "getObservatories";
      variables: GetObservatoriesVariables;
    }
  | {
      path: "/pst/api/observatories/{id}";
      operationId: "getObservatory";
      variables: GetObservatoryVariables;
    }
  | {
      path: "/pst/api/observatories/{id}/backend";
      operationId: "getObservatoryBackends";
      variables: GetObservatoryBackendsVariables;
    }
  | {
      path: "/pst/api/observatories/{id}/backend/{subId}";
      operationId: "getObservatoryBackend";
      variables: GetObservatoryBackendVariables;
    }
  | {
      path: "/pst/api/organizations";
      operationId: "getOrganizations";
      variables: GetOrganizationsVariables;
    }
  | {
      path: "/pst/api/organizations/{id}";
      operationId: "getOrganization";
      variables: GetOrganizationVariables;
    }
  | {
      path: "/pst/api/people";
      operationId: "getPeople";
      variables: GetPeopleVariables;
    }
  | {
      path: "/pst/api/people/{id}";
      operationId: "getPerson";
      variables: GetPersonVariables;
    }
  | {
      path: "/pst/api/proposalCycles";
      operationId: "getProposalCycless";
      variables: GetProposalCyclessVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}";
      operationId: "getProposalCycle";
      variables: GetProposalCycleVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/TAC";
      operationId: "getTAC";
      variables: GetTACVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview";
      operationId: "getReviewedProposals";
      variables: GetReviewedProposalsVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}";
      operationId: "getReviewedProposal";
      variables: GetReviewedProposalVariables;
    }
  | {
      path: "/pst/api/proposalCycles/{cycleCode}/submittedProposals";
      operationId: "getSubmittedProposals";
      variables: GetSubmittedProposalsVariables;
    }
  | {
      path: "/pst/api/proposals";
      operationId: "getProposals";
      variables: GetProposalsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}";
      operationId: "getObservingProposal";
      variables: GetObservingProposalVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators";
      operationId: "getInvestigators";
      variables: GetInvestigatorsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/investigators/{investigatorId}";
      operationId: "getInvestigator";
      variables: GetInvestigatorVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/justifications/{which}";
      operationId: "getJustification";
      variables: GetJustificationVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations";
      operationId: "getObservations";
      variables: GetObservationsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/calibrationObservations";
      operationId: "getCalibrationObservations";
      variables: GetCalibrationObservationsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/fields";
      operationId: "getFields";
      variables: GetFieldsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/targetObservations";
      operationId: "getTargetObservations";
      variables: GetTargetObservationsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/targets";
      operationId: "getTargets";
      variables: GetTargetsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/technicalGoals";
      operationId: "getTechGoals";
      variables: GetTechGoalsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/observations/{observationId}/constraints";
      operationId: "getConstraints";
      variables: GetConstraintsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments";
      operationId: "getSupportingDocuments";
      variables: GetSupportingDocumentsVariables;
    }
  | {
      path: "/pst/api/proposals/{proposalCode}/supportingDocuments/{id}";
      operationId: "getSupportingDocument";
      variables: GetSupportingDocumentVariables;
    }
  | {
      path: "/pst/api/spaceFrames/{frameCode}";
      operationId: "getSpaceFrame";
      variables: GetSpaceFrameVariables;
    }
  | {
      path: "/pst/api/spaceSystems/{frameCode}";
      operationId: "getSpaceSystem";
      variables: GetSpaceSystemVariables;
    }
  | {
      path: "/pst/api/subjectMap/{id}";
      operationId: "subjectMap";
      variables: SubjectMapVariables;
    }
  | {
      path: "/pst/api/telescopes";
      operationId: "getTelescopes";
      variables: GetTelescopesVariables;
    }
  | {
      path: "/pst/api/telescopes/{id}";
      operationId: "getTelescope";
      variables: GetTelescopeVariables;
    };
