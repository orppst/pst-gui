--- proposalToolSchemas.ts.orig	2024-04-24 10:15:03
+++ proposalToolSchemas.ts	2024-06-14 08:55:06
@@ -129,6 +129,7 @@
  * An observation that is intended for calibration
  */
 export type CalibrationObservation = {
+  "@type"?: string;
   /**
    * any constraints on the observation
    */
@@ -149,19 +150,20 @@
 };
 
 export type CalibrationTargetIntendedUse =
-  | "AMPLITUDE"
-  | "ATMOSPHERIC"
-  | "BANDPASS"
-  | "PHASE"
-  | "POINTING"
-  | "FOCUS"
-  | "POLARIZATION"
-  | "DELAY";
+  | "Amplitude"
+  | "Atmospheric"
+  | "Bandpass"
+  | "Phase"
+  | "Pointing"
+  | "Focus"
+  | "Polarization"
+  | "Delay";
 
 /**
  * Spatial domain, three-dimensional cartesian coordinate space. The particulars of the axis descriptions depend on the physical constraints of the instance. In Appendix B, we provide the description of a Standard Cartesian Coordinate Space instance which applies to many Astronomical cases, and may be referenced in serializations.
  */
 export type CartesianCoordSpace = {
+  "@type"?: string; // coords:CartesianCoordSpace
   axis?: Axis[];
 };
 
@@ -188,6 +190,7 @@
  */
 export type CelestialTarget = {
   xmlId?: string;
+  "@type"?: string; // proposal:CelestialTarget
   /**
    * A common name for the source
    */
@@ -197,7 +200,7 @@
    */
   sourceCoordinates?: EquatorialPoint;
   /**
-   * We define epoch as a primitive data type with the expected form '{type}{year}' where type = 'J' or 'B' for Julian or Besselian respectively, and year is expressed as a decimal year. e.g.: 'B1950', 'J2000.0'
+   * We define epoch as a primitive data type with the expected form '$type$year' where type = 'J' or 'B' for Julian or Besselian respectively, and year is expressed as a decimal year. e.g.: 'B1950', 'J2000.0'
    */
   positionEpoch?: Epoch;
   /**
@@ -288,9 +291,7 @@
 /**
  * Abstract head of the coordinate system object tree.
  */
-export type CoordSys = {
-  xmlId?: string;
-};
+export type CoordSys = Record<string, any>;
 
 /**
  * Abstract base class for the Coordinate data types which represent an absolute location within a coordinate space. Coordinates MUST refer to a coordinate system, providing additional metadata relevant to interpreting the coordinate value, and its representation.
@@ -425,6 +426,8 @@
  * A Point on the Unit Sphere
  */
 export type EquatorialPoint = {
+  "@type": string; // coords:EquatorialPoint
+  coordSys: CoordSys;
   /**
    * A real value with a unit.
    */
@@ -471,8 +474,10 @@
  * Definition of an observing field pointing
  */
 export type Field = {
+  "@type"?: string;
   name?: string;
   xmlId?: string;
+  _id?: number;
 };
 
 export type FileUpload = Record<string, any>;
@@ -563,7 +568,7 @@
   xmlId?: string;
 };
 
-export type InstrumentKind = "CONTINUUM" | "SPECTROSCOPIC";
+export type InstrumentKind = "continuum" | "spectroscopic";
 
 /**
  * an integer identifier that can be used as a key for lookup of an entity that is *outside this datamodel*
@@ -684,6 +689,8 @@
 export type ObsType = "TargetObservation" | "CalibrationObservation";
 
 export type Observation = {
+  "@type"?: string; //ObsType (see above)
+  _id?: number;
   /**
    * any constraints on the observation
    */
@@ -706,6 +713,9 @@
  * An organisation that can perform astronomical observations
  */
 export type Observatory = {
+  "@type"?: string;
+  "_id"?: number;
+
   xmlId?: string;
   /**
    * The name of the organization
@@ -772,6 +782,7 @@
  * a complete proposal
  */
 export type ObservingProposal = {
+  "_id"?: number;
   /**
    * the proposal title
    */
@@ -829,6 +840,8 @@
  * An institution that is a collection of people
  */
 export type Organization = {
+  "@type"?: string; // proposal:Organization
+  _id?: number;
   /**
    * The name of the organization
    */
@@ -1053,6 +1066,8 @@
  * Defines collection of resources and proposals for a particular observing season
  */
 export type ProposalCycle = {
+  _id?: number
+
   /**
    * a human readable description of the cycle
    */
@@ -1099,10 +1114,6 @@
    */
   submittedProposals?: SubmittedProposal[];
   /**
-   * the proposals that have been reviewed in this cycle
-   */
-  reviewedProposals?: ReviewedProposal[];
-  /**
    * the proposals that have been successful and allocated time
    */
   allocatedProposals?: AllocatedProposal[];
@@ -1119,12 +1130,13 @@
   observationSessionEnd?: Date;
 };
 
-export type ProposalKind = "STANDARD" | "TOO" | "SURVEY";
+export type ProposalKind = "Standard" | "ToO" | "Survey";
 
 /**
  * A review of a proposal
  */
 export type ProposalReview = {
+  _id?: number;
   /**
    * Description
    */
@@ -1207,6 +1219,7 @@
  * A real value with a unit.
  */
 export type RealQuantity = {
+  "@type"?: string; // ivoa:RealQuantity
   /**
    * Must conform to definition of unit in VOUnit spec.
    */
@@ -1238,6 +1251,8 @@
  * A resource that will be consumed by allocating an observation from a proposal
  */
 export type Resource = {
+  _id?: number;
+
   /**
    * The amount of the resource
    *
@@ -1268,6 +1283,7 @@
  * a type of resource
  */
 export type ResourceType = {
+  _id?: number;
   /**
    * the name of the resource type
    */
@@ -1277,52 +1293,10 @@
 };
 
 /**
- * an instance of a proposal that is in review
- */
-export type ReviewedProposal = {
-  /**
-   * the proposal can go on to allocation
-   */
-  successful?: boolean;
-  /**
-   * the date when all the proposals are due
-   *
-   * @format date
-   * @example "2022-03-10T00:00:00.000Z"
-   */
-  reviewsCompleteDate?: Date;
-  /**
-   * the reviews
-   */
-  reviews?: ProposalReview[];
-  /**
-   * an instance of a proposal that has been submitted
-   */
-  submitted?: SubmittedProposal;
-};
-
-export type ReviewedProposalSynopsis = {
-  /**
-   * @format int64
-   */
-  dbId?: number;
-  completedDate?: Date;
-  successStatus?: boolean;
-  /**
-   * @format int64
-   */
-  numberOfReviewers?: number;
-  /**
-   * @format int64
-   */
-  reviewsCompleted?: number;
-  proposalTitle?: string;
-};
-
-/**
  * assigned to review the proposal
  */
 export type Reviewer = {
+  _id?: number;
   /**
    * person connected with the proposal
    */
@@ -1354,6 +1328,8 @@
   /**
    * Science oriented definition of a spectral window.
    */
+  _id?: number;
+
   spectralWindowSetup?: SpectralWindowSetup;
   expectedSpectralLine?: ExpectedSpectralLine[];
 };
@@ -1398,6 +1374,7 @@
  * A SpaceFrame is specified by its reference frame (orientation), and a reference position (origin). Currently only standard reference frames are allowed. An equinox MUST be provided for pre-ICRS reference frames. A planetary ephemeris MAY be provided if relevant. If needed, but not provided, it is assumed to be 'DE405'.
  */
 export type SpaceFrame = {
+  "@type": string; // coords:SpaceFrame
   /**
    * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
    */
@@ -1420,6 +1397,7 @@
  * Specialized coordinate system for the Spatial domain. This object SHOULD include an appropriate SpaceFrame. In Appendix B, we define two standard spatial coordinate space instances (Spherical and Cartesian), which may be referenced in serializations. If a CoordSpace is not provided, it is assumed to be represented by a Standard Spherical Coordinate Space.
  */
 export type SpaceSys = {
+  "@type": string; // coords:SpaceSys
   xmlId?: string;
   /**
    * Abstract head of coordinate spaces related to physical properties.
@@ -1503,7 +1481,7 @@
   /**
    * person connected with the proposal
    */
-  person?: Person | Person;
+  person?: Person;
   uid?: string;
   inKeycloakRealm?: boolean;
 };
@@ -1512,6 +1490,7 @@
  * an instance of a proposal that has been submitted
  */
 export type SubmittedProposal = {
+  _id?: number;
   /**
    * the date that the proposal was submitted
    *
@@ -1519,6 +1498,21 @@
    * @example "2022-03-10T00:00:00.000Z"
    */
   submissionDate?: Date;
+  /**
+   * the proposal can go on to allocation
+   */
+  successful?: boolean;
+  /**
+   * the date when all the proposals are due
+   *
+   * @format date
+   * @example "2022-03-10T00:00:00.000Z"
+   */
+  reviewsCompleteDate?: Date;
+  /**
+   * the reviews
+   */
+  reviews?: ProposalReview[];
   /**
    * a complete proposal
    */
@@ -1553,23 +1547,26 @@
 /**
  * A role within the timeAllocation committee
  */
-export type TacRole = "TECHNICALREVIEWER" | "SCIENCEREVIEWER" | "CHAIR";
+export type TacRole = "TechnicalReviewer" | "ScienceReviewer" | "Chair";
 
 /**
  * A target source
  */
 export type Target = {
+  "@type"?: string;
   /**
    * A common name for the source
    */
   sourceName?: string;
   xmlId?: string;
+  _id?: number;
 };
 
 /**
  * the field points to the associated target
  */
 export type TargetField = {
+  "@type"?: string;
   xmlId?: string;
   name?: string;
 };
@@ -1578,6 +1575,7 @@
  * an observation of the scientific target
  */
 export type TargetObservation = {
+  "@type"?: string;
   /**
    * any constraints on the observation
    */
@@ -1605,6 +1603,7 @@
    */
   performance?: PerformanceParameters;
   spectrum?: ScienceSpectralWindow[];
+  _id?: number;
   xmlId?: string;
 };
 
@@ -1645,7 +1644,7 @@
 /**
  * acceptable text formats for document submission
  */
-export type TextFormats = "LATEX" | "RST" | "ASCIIDOC";
+export type TextFormats = "latex" | "rst" | "asciidoc";
 
 /**
  * A TimeFrame SHALL include a time scale and reference position. It MAY also include a reference direction.
@@ -1708,6 +1707,10 @@
  * particular time range
  */
 export type TimingWindow = {
+  "@type"?: string; //proposal:TimingWindow
+
+  _id?: number;
+
   note?: string;
   isAvoidConstraint?: boolean;
   /**
