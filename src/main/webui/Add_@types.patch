--- proposalToolSchemas.ts.orig	2025-04-09 15:29:28
+++ proposalToolSchemas.ts	2025-09-24 15:15:38
@@ -1,7 +1,7 @@
 /**
  * Generated by @openapi-codegen
  *
- * @version 0.5
+ * @version 0.7
  */
 /**
  * base proposal
@@ -15,7 +15,6 @@
    * a short summary/abstract of the proposal
    */
   summary?: string;
-  kind?: ProposalKind;
   /**
    * The justification for the proposal. Note that the justification is for reading by humans and is not parsed to extract things like source lists - that sort of information must be entered in the correct place in the model.
    */
@@ -28,6 +27,7 @@
    * the person(s) making the proposal
    */
   investigators?: Investigator[];
+  kind?: ProposalKind;
   relatedProposals?: RelatedProposal[];
   /**
    * any additional documents
@@ -56,15 +56,17 @@
  * A block of resources that have been allocated
  */
 export type AllocatedBlock = {
+  _id?: number;
+  "@type"?: string; //proposalManagement:AllocatedBlock
   /**
-   * A resource that will be consumed by allocating an observation from a proposal
-   */
-  resource?: Resource;
-  /**
    * a configuration can be used to observe with.
    */
   mode?: ObservingMode;
   /**
+   * A resource that will be consumed by allocating an observation from a proposal
+   */
+  resource?: Resource;
+  /**
    * The final grade given by the TAC
    */
   grade?: AllocationGrade;
@@ -74,20 +76,22 @@
  * an instance of a proposal that is allocated observing time
  */
 export type AllocatedProposal = {
+  _id?: number;
   /**
-   * what is allocated to the proposal
-   */
-  allocation?: AllocatedBlock[];
-  /**
    * an instance of a proposal that has been submitted
    */
   submitted?: SubmittedProposal;
+  /**
+   * what is allocated to the proposal
+   */
+  allocation?: AllocatedBlock[];
 };
 
 /**
  * The final grade given by the TAC
  */
 export type AllocationGrade = {
+  _id?: number;
   /**
    * the name of the grade
    */
@@ -131,6 +135,7 @@
  * a processing backend /pipeline- e.g. correlator
  */
 export type Backend = {
+  _id?: number
   /**
    * the backend name
    */
@@ -179,11 +184,8 @@
  */
 export type CalibrationObservation = {
   xmlId?: string;
+  "@type"?: string;
   /**
-   * any constraints on the observation
-   */
-  constraints?: ObservingConstraint[];
-  /**
    * A reference to - The actual target of the observation
    */
   target?: Target[];
@@ -195,6 +197,10 @@
    * collects together the technical goals of the proposal
    */
   technicalGoal?: TechnicalGoal;
+  /**
+   * any constraints on the observation
+   */
+  constraints?: ObservingConstraint[];
   intent?: CalibrationTargetIntendedUse;
 };
 
@@ -212,6 +218,7 @@
  * Spatial domain, three-dimensional cartesian coordinate space. The particulars of the axis descriptions depend on the physical constraints of the instance. In Appendix B, we provide the description of a Standard Cartesian Coordinate Space instance which applies to many Astronomical cases, and may be referenced in serializations.
  */
 export type CartesianCoordSpace = {
+  "@type"?: string; // coords:CartesianCoordSpace
   axis?: Axis[];
 };
 
@@ -220,17 +227,17 @@
  */
 export type CartesianPoint = {
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  x?: Quantity;
+  x?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  y?: Quantity;
+  y?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  z?: Quantity;
+  z?: RealQuantity;
 };
 
 /**
@@ -238,6 +245,7 @@
  */
 export type CelestialTarget = {
   xmlId?: string;
+  "@type"?: string; // proposal:CelestialTarget
   /**
    * A common name for the source
    */
@@ -273,13 +281,13 @@
  */
 export type CommitteeMember = {
   /**
-   * A role within the timeAllocation committee
-   */
-  role?: TacRole;
-  /**
    * assigned to review the proposal
    */
   member?: Reviewer;
+  /**
+   * A role within the timeAllocation committee
+   */
+  role?: TacRole;
 };
 
 export type Composites = {
@@ -307,13 +315,13 @@
    */
   name?: string;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  domainMin?: Quantity;
+  domainMin?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  domainMax?: Quantity;
+  domainMax?: RealQuantity;
   /**
    * Flag indicating if the axis is cyclic in nature. If not provided, it is assumed to be FALSE.
    */
@@ -339,7 +347,9 @@
  * Abstract head of the coordinate system object tree.
  */
 export type CoordSys = {
+  "@type"?: string;
   xmlId?: string;
+  frame?: CoordFrame;
 };
 
 /**
@@ -454,6 +464,13 @@
 };
 
 /**
+ * Represents a time duration - string serialization to conform to ISO 8601
+ */
+export type Duration = {
+  value?: string;
+};
+
+/**
  * Specialization of a Field for an elliptical map.
  */
 export type Ellipse = {
@@ -484,6 +501,8 @@
  * A Point on the Unit Sphere
  */
 export type EquatorialPoint = {
+  "@type": string; // coords:EquatorialPoint
+  coordSys: CoordSys;
   /**
    * A real value with a unit.
    */
@@ -530,8 +549,10 @@
  * Definition of an observing field pointing
  */
 export type Field = {
+  "@type"?: string;
   name?: string;
   xmlId?: string;
+  _id?: number;
 };
 
 export type FileUpload = Record<string, any>;
@@ -540,6 +561,7 @@
  * Available filters /bandpasses for intruments
  */
 export type Filter = {
+  _id?: number
   /**
    * human readable name
    */
@@ -569,13 +591,13 @@
  */
 export type GenericFrame = {
   /**
-   * A planetary ephemeris MAY be provided, and SHOULD be provided whenever appropriate, to indicate which solar system ephemeris was used. If needed, but not provided, it is assumed to be 'DE405'
-   */
-  planetaryEphem?: string;
-  /**
    * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
    */
   refPosition?: RefLocation;
+  /**
+   * A planetary ephemeris MAY be provided, and SHOULD be provided whenever appropriate, to indicate which solar system ephemeris was used. If needed, but not provided, it is assumed to be 'DE405'
+   */
+  planetaryEphem?: string;
 };
 
 /**
@@ -583,17 +605,17 @@
  */
 export type GenericPoint = {
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  axis1?: Quantity;
+  axis1?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  axis2?: Quantity;
+  axis2?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  axis3?: Quantity;
+  axis3?: RealQuantity;
 };
 
 /**
@@ -616,6 +638,7 @@
  * An instrument that can be attached to a telescope - e.g. CCD, Radio Receiver
  */
 export type Instrument = {
+  _id?: number
   /**
    * the instrument name - human readable
    */
@@ -665,15 +688,16 @@
 };
 
 export type Investigator = {
+  _id?: number;
+    /**
+     * person connected with the proposal
+     */
+    person?: Person;
   type?: InvestigatorKind;
   /**
    * is the investigator making proposal for their PhD
    */
   forPhD?: boolean;
-  /**
-   * person connected with the proposal
-   */
-  person?: Person;
 };
 
 export type InvestigatorKind = "PI" | "COI";
@@ -716,17 +740,17 @@
  */
 export type LonLatPoint = {
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  lon?: Quantity;
+  lon?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  lat?: Quantity;
+  lat?: RealQuantity;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  dist?: Quantity;
+  dist?: RealQuantity;
 };
 
 /**
@@ -760,10 +784,8 @@
  * An observation - a pointing of the telescope at a part of the sky, occurs in a single non-overlapping time period
  */
 export type Observation = {
-  /**
-   * any constraints on the observation
-   */
-  constraints?: ObservingConstraint[];
+  "@type"?: string; //ObsType (see above)
+  _id?: number;
   /**
    * A reference to - The actual target of the observation
    */
@@ -776,6 +798,10 @@
    * collects together the technical goals of the proposal
    */
   technicalGoal?: TechnicalGoal;
+  /**
+   * any constraints on the observation
+   */
+  constraints?: ObservingConstraint[];
   xmlId?: string;
 };
 
@@ -808,6 +834,9 @@
  * An organisation that can perform astronomical observations
  */
 export type Observatory = {
+  "@type"?: string;
+  "_id"?: number;
+
   xmlId?: string;
   /**
    * The name of the organization
@@ -853,6 +882,7 @@
  * a configuration can be used to observe with.
  */
 export type ObservingMode = {
+  _id?: number;
   /**
    * human readable name for the mode
    */
@@ -862,10 +892,6 @@
    */
   description?: string;
   /**
-   * Available filters /bandpasses for intruments
-   */
-  filter?: Filter;
-  /**
    * base type of a telescope or array of telescopes
    */
   telescope?: ObservingPlatform;
@@ -874,6 +900,10 @@
    */
   instrument?: Instrument;
   /**
+   * Available filters /bandpasses for intruments
+   */
+  filter?: Filter;
+  /**
    * a processing backend /pipeline- e.g. correlator
    */
   backend?: Backend;
@@ -884,6 +914,7 @@
  * base type of a telescope or array of telescopes
  */
 export type ObservingPlatform = {
+  _id?: number
   xmlId?: string;
 };
 
@@ -891,6 +922,7 @@
  * a complete proposal
  */
 export type ObservingProposal = {
+  _id?: number;
   xmlId?: string;
   /**
    * the proposal title
@@ -900,7 +932,6 @@
    * a short summary/abstract of the proposal
    */
   summary?: string;
-  kind?: ProposalKind;
   /**
    * The justification for the proposal. Note that the justification is for reading by humans and is not parsed to extract things like source lists - that sort of information must be entered in the correct place in the model.
    */
@@ -913,6 +944,7 @@
    * the person(s) making the proposal
    */
   investigators?: Investigator[];
+  kind?: ProposalKind;
   relatedProposals?: RelatedProposal[];
   /**
    * any additional documents
@@ -940,6 +972,8 @@
  * An institution that is a collection of people
  */
 export type Organization = {
+  "@type"?: string; // proposal:Organization
+  _id?: number;
   /**
    * The name of the organization
    */
@@ -995,14 +1029,15 @@
    */
   eMail?: string;
   /**
-   * a string identifier that can be used as a key for lookup of an entity that is *outside this datamodel*
-   */
-  orcidId?: StringIdentifier;
-  /**
    * An institution that is a collection of people
    */
   homeInstitute?: Organization;
+  /**
+   * a string identifier that can be used as a key for lookup of an entity that is *outside this datamodel*
+   */
+  orcidId?: StringIdentifier;
   xmlId?: string;
+  _id?: number;
 };
 
 /**
@@ -1031,7 +1066,7 @@
 };
 
 /**
- * The most common type of coordinate value. This type is appropriate for any data whose values can be described by an ivoa:Quantity (numeric, with unit).
+ * The most common type of coordinate value. This type is appropriate for any data whose values can be described by an ivoa:RealQuantity (numeric, with unit).
  */
 export type PhysicalCoordinate = {
   /**
@@ -1039,9 +1074,9 @@
    */
   coordSys?: CoordSys;
   /**
-   * Meant to represent the value of a numerical physical quantity. Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the @unit attribute of those VOTable elements is assumed to be mapped to the attribute on the Quantity. Ths is only allowed for these predefined ivoa types.
+   * A real value with a unit.
    */
-  cval?: Quantity;
+  cval?: RealQuantity;
 };
 
 /**
@@ -1164,11 +1199,21 @@
  * Defines collection of resources and proposals for a particular observing season
  */
 export type ProposalCycle = {
+  _id?: number
   /**
+  * An organisation that can perform astronomical observations
+  */
+  observatory?: Observatory;
+
+  /**
    * a human readable description of the cycle
    */
   title?: string;
   /**
+   * human readable code for the cycle
+   */
+  code?: string;
+  /**
    * pointer to more detailed instructions about the cycle
    */
   instructions?: string;
@@ -1217,10 +1262,6 @@
    * the proposals that have been successful and allocated time
    */
   allocatedProposals?: AllocatedProposal[];
-  /**
-   * An organisation that can perform astronomical observations
-   */
-  observatory?: Observatory;
 };
 
 export type ProposalCycleDates = {
@@ -1237,6 +1278,11 @@
  * A review of a proposal
  */
 export type ProposalReview = {
+  _id?: number;
+  /**
+   * assigned to review the proposal
+   */
+  reviewer?: Reviewer;
   /**
    * Description
    */
@@ -1258,10 +1304,6 @@
    * @example "2022-03-10T00:00:00.000Z"
    */
   reviewDate?: Date;
-  /**
-   * assigned to review the proposal
-   */
-  reviewer?: Reviewer;
 };
 
 export type ProposalSynopsis = {
@@ -1294,30 +1336,13 @@
    * Must conform to definition of unit in VOUnit spec.
    */
   unit?: Unit;
-};
-
-/**
- * A spatial coordinate in a Cartesian coordinate space. Any associated CoordSpace MUST be a CartesianCoordSpace. If no CoordSpace is provided, a Standard Cartesian CoordSpace is assumed. Real values are used in the cartesian points.
- */
-export type RealCartesianPoint = {
-  /**
-   * A real value with a unit.
-   */
-  x?: RealQuantity;
-  /**
-   * A real value with a unit.
-   */
-  y?: RealQuantity;
-  /**
-   * A real value with a unit.
-   */
-  z?: RealQuantity;
 };
 
 /**
  * A real value with a unit.
  */
 export type RealQuantity = {
+  "@type"?: string; // ivoa:RealQuantity
   /**
    * Must conform to definition of unit in VOUnit spec.
    */
@@ -1349,16 +1374,17 @@
  * A resource that will be consumed by allocating an observation from a proposal
  */
 export type Resource = {
+  _id?: number;
   /**
+   * a type of resource
+   */
+  type?: ResourceType;
+  /**
    * The amount of the resource
    *
    * @format double
    */
   amount?: number;
-  /**
-   * a type of resource
-   */
-  type?: ResourceType;
 };
 
 /**
@@ -1366,19 +1392,20 @@
  */
 export type ResourceBlock = {
   /**
-   * A resource that will be consumed by allocating an observation from a proposal
-   */
-  resource?: Resource;
-  /**
    * a configuration can be used to observe with.
    */
   mode?: ObservingMode;
+  /**
+   * A resource that will be consumed by allocating an observation from a proposal
+   */
+  resource?: Resource;
 };
 
 /**
  * a type of resource
  */
 export type ResourceType = {
+  _id?: number;
   /**
    * the name of the resource type
    */
@@ -1391,6 +1418,7 @@
  * assigned to review the proposal
  */
 export type Reviewer = {
+  _id?: number;
   /**
    * person connected with the proposal
    */
@@ -1422,24 +1450,12 @@
   /**
    * Science oriented definition of a spectral window.
    */
+  _id?: number;
+
   spectralWindowSetup?: SpectralWindowSetup;
   expectedSpectralLine?: ExpectedSpectralLine[];
 };
 
-export type SimbadTargetResult = {
-  targetName?: string;
-  spaceSystemCode?: string;
-  epoch?: string;
-  /**
-   * @format double
-   */
-  raDegrees?: number;
-  /**
-   * @format double
-   */
-  decDegrees?: number;
-};
-
 /**
  * A constraint that requires that two observations occur simultaneously
  */
@@ -1466,7 +1482,12 @@
  * A SpaceFrame is specified by its reference frame (orientation), and a reference position (origin). Currently only standard reference frames are allowed. An equinox MUST be provided for pre-ICRS reference frames. A planetary ephemeris MAY be provided if relevant. If needed, but not provided, it is assumed to be 'DE405'.
  */
 export type SpaceFrame = {
+  "@type": string; // coords:SpaceFrame
   /**
+  * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
+  */
+  refPosition?: RefLocation;
+  /**
    * The spatial reference frame. Values MUST be selected from the controlled vocabulary at the given URL.
    */
   spaceRefFrame?: string;
@@ -1478,16 +1499,13 @@
    * Ephemeris file for solar system objects SHOULD be specified whenever relevant.
    */
   planetaryEphem?: string;
-  /**
-   * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
-   */
-  refPosition?: RefLocation;
 };
 
 /**
  * Specialized coordinate system for the Spatial domain. This object SHOULD include an appropriate SpaceFrame. In Appendix B, we define two standard spatial coordinate space instances (Spherical and Cartesian), which may be referenced in serializations. If a CoordSpace is not provided, it is assumed to be represented by a Standard Spherical Coordinate Space.
  */
 export type SpaceSys = {
+  "@type": string; // coords:SpaceSys
   xmlId?: string;
   /**
    * Abstract head of coordinate spaces related to physical properties.
@@ -1571,7 +1589,7 @@
   /**
    * person connected with the proposal
    */
-  person?: Person | Person;
+  person?: Person;
   uid?: string;
   inKeycloakRealm?: boolean;
 };
@@ -1591,6 +1609,8 @@
  * an instance of a proposal that has been submitted
  */
 export type SubmittedProposal = {
+  _id?: number;
+
   xmlId?: string;
   /**
    * the proposal title
@@ -1600,7 +1620,6 @@
    * a short summary/abstract of the proposal
    */
   summary?: string;
-  kind?: ProposalKind;
   /**
    * The justification for the proposal. Note that the justification is for reading by humans and is not parsed to extract things like source lists - that sort of information must be entered in the correct place in the model.
    */
@@ -1613,6 +1632,7 @@
    * the person(s) making the proposal
    */
   investigators?: Investigator[];
+  kind?: ProposalKind;
   relatedProposals?: RelatedProposal[];
   /**
    * any additional documents
@@ -1635,6 +1655,11 @@
    */
   observations?: Observation[];
   /**
+   * the observatory's code for the proposal
+   */
+  proposalCode?: string;
+  config?: ObservationConfiguration[];
+  /**
    * the date that the proposal was submitted
    *
    * @format date
@@ -1652,7 +1677,6 @@
    * @example "2022-03-10T00:00:00.000Z"
    */
   reviewsCompleteDate?: Date;
-  config?: ObservationConfiguration[];
   /**
    * the reviews
    */
@@ -1712,17 +1736,20 @@
  * A target source
  */
 export type Target = {
+  "@type"?: string;
   /**
    * A common name for the source
    */
   sourceName?: string;
   xmlId?: string;
+  _id?: number;
 };
 
 /**
  * the field points to the associated target
  */
 export type TargetField = {
+  "@type"?: string;
   xmlId?: string;
   name?: string;
 };
@@ -1731,12 +1758,9 @@
  * an observation of the scientific target
  */
 export type TargetObservation = {
+  "@type"?: string;
   xmlId?: string;
   /**
-   * any constraints on the observation
-   */
-  constraints?: ObservingConstraint[];
-  /**
    * A reference to - The actual target of the observation
    */
   target?: Target[];
@@ -1748,6 +1772,10 @@
    * collects together the technical goals of the proposal
    */
   technicalGoal?: TechnicalGoal;
+  /**
+   * any constraints on the observation
+   */
+  constraints?: ObservingConstraint[];
 };
 
 /**
@@ -1759,10 +1787,13 @@
    */
   performance?: PerformanceParameters;
   spectrum?: ScienceSpectralWindow[];
+  _id?: number;
   xmlId?: string;
 };
 
 export type Telescope = {
+  _id?: number
+  "@type"?: string;
   xmlId?: string;
   /**
    * telescope name
@@ -1773,15 +1804,16 @@
    */
   wikiId?: WikiDataId;
   /**
-   * A spatial coordinate in a Cartesian coordinate space. Any associated CoordSpace MUST be a CartesianCoordSpace. If no CoordSpace is provided, a Standard Cartesian CoordSpace is assumed. Real values are used in the cartesian points.
+   * A spatial coordinate in a Cartesian coordinate space. Any associated CoordSpace MUST be a CartesianCoordSpace. If no CoordSpace is provided, a Standard Cartesian CoordSpace is assumed. Values for unused/undefined dimensions need not be provided.
    */
-  location?: RealCartesianPoint;
+  location?: CartesianPoint;
 };
 
 /**
  * a set of telescopes that are operated together for an observation
  */
 export type TelescopeArray = {
+  "@type"?: string;
   xmlId?: string;
   /**
    * the array name
@@ -1807,16 +1839,16 @@
  */
 export type TimeFrame = {
   /**
+   * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
+   */
+  refPosition?: RefLocation;
+  /**
    * The time scale sets the reference frame. The value MUST be selected from the controlled vocabulary at the given URL.
    */
   timescale?: string;
   /**
    * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
    */
-  refPosition?: RefLocation;
-  /**
-   * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
-   */
   refDirection?: RefLocation;
 };
 
@@ -1826,20 +1858,6 @@
 export type TimeInstant = Record<string, any>;
 
 /**
- * Time is given as an offset from a specific point in time (time0).
- */
-export type TimeOffset = {
-  /**
-   * A real value with a unit.
-   */
-  time?: RealQuantity;
-  /**
-   * TimeStamps which specify a specific instant in time. We define three subtypes (FITSTime, JD, MJD), which allow users to explicitly identify the representation and interpretation of the TimeInstant.
-   */
-  time0?: TimeInstant;
-};
-
-/**
  * This is the abstract basis for a set of simple time domain coordinates which are expected to accommodate the vast majority of use cases. All TimeStamps, by definition, exist in a standard 1-D coordinate space, with domainMin|Max of +/-Infinity. All TimeStamps MUST refer to an appropriate TimeSys.
  */
 export type TimeStamp = Record<string, any>;
@@ -1863,6 +1881,10 @@
  * particular time range
  */
 export type TimingWindow = {
+  "@type"?: string; //proposal:TimingWindow
+
+  _id?: number;
+
   note?: string;
   isAvoidConstraint?: boolean;
   /**
@@ -1894,6 +1916,11 @@
  */
 export type UploadLatexResourceSchema = Blob;
 
+/**
+ * @format binary
+ */
+export type UploadTargetList = Blob;
+
 export type UserConsentRepresentation = {
   clientId?: string;
   grantedClientScopes?: string[];
@@ -1996,6 +2023,13 @@
 };
 
 /**
+ * represents a 128-bit binary ID in the canonical ascii UUID format
+ */
+export type Uuid = {
+  value?: string;
+};
+
+/**
  * a WikiData identifier
  */
 export type WikiDataId = {
