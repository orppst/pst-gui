--- proposalToolSchemas.ts.orig	2024-10-30 13:50:57
+++ proposalToolSchemas.ts	2024-10-30 13:55:30
@@ -7,12 +7,14 @@
  * A block of resources that have been allocated
  */
 export type AllocatedBlock = {
+  _id?: number;
+  "@type"?: string; //proposalManagement:AllocatedBlock
   /**
    * A resource that will be consumed by allocating an observation from a proposal
    */
   resource?: Resource;
   /**
-   * a configuration that has been chosen to observe with.
+   * a configuration can be used to observe with.
    */
   mode?: ObservingMode;
   /**
@@ -25,6 +27,7 @@
  * an instance of a proposal that is allocated observing time
  */
 export type AllocatedProposal = {
+  _id?: number
   /**
    * what is allocated to the proposal
    */
@@ -39,6 +42,7 @@
  * The final grade given by the TAC
  */
 export type AllocationGrade = {
+  _id?: number;
   /**
    * the name of the grade
    */
@@ -130,6 +134,7 @@
  */
 export type CalibrationObservation = {
   xmlId?: string;
+  "@type"?: string;
   /**
    * any constraints on the observation
    */
@@ -163,6 +168,7 @@
  * Spatial domain, three-dimensional cartesian coordinate space. The particulars of the axis descriptions depend on the physical constraints of the instance. In Appendix B, we provide the description of a Standard Cartesian Coordinate Space instance which applies to many Astronomical cases, and may be referenced in serializations.
  */
 export type CartesianCoordSpace = {
+  "@type"?: string; // coords:CartesianCoordSpace
   axis?: Axis[];
 };
 
@@ -189,6 +195,7 @@
  */
 export type CelestialTarget = {
   xmlId?: string;
+  "@type"?: string; // proposal:CelestialTarget
   /**
    * A common name for the source
    */
@@ -198,7 +205,7 @@
    */
   sourceCoordinates?: EquatorialPoint;
   /**
-   * We define epoch as a primitive data type with the expected form '{type}{year}' where type = 'J' or 'B' for Julian or Besselian respectively, and year is expressed as a decimal year. e.g.: 'B1950', 'J2000.0'
+   * We define epoch as a primitive data type with the expected form '$type$year' where type = 'J' or 'B' for Julian or Besselian respectively, and year is expressed as a decimal year. e.g.: 'B1950', 'J2000.0'
    */
   positionEpoch?: Epoch;
   /**
@@ -289,9 +296,7 @@
 /**
  * Abstract head of the coordinate system object tree.
  */
-export type CoordSys = {
-  xmlId?: string;
-};
+export type CoordSys = Record<string, any>;
 
 /**
  * Abstract base class for the Coordinate data types which represent an absolute location within a coordinate space. Coordinates MUST refer to a coordinate system, providing additional metadata relevant to interpreting the coordinate value, and its representation.
@@ -426,6 +431,8 @@
  * A Point on the Unit Sphere
  */
 export type EquatorialPoint = {
+  "@type": string; // coords:EquatorialPoint
+  coordSys: CoordSys;
   /**
    * A real value with a unit.
    */
@@ -472,8 +479,10 @@
  * Definition of an observing field pointing
  */
 export type Field = {
+  "@type"?: string;
   name?: string;
   xmlId?: string;
+  _id?: number;
 };
 
 export type FileUpload = Record<string, any>;
@@ -702,6 +711,8 @@
  * An observation - occurs in a single non-overlapping time period
  */
 export type Observation = {
+  "@type"?: string; //ObsType (see above)
+  _id?: number;
   /**
    * any constraints on the observation
    */
@@ -741,7 +752,7 @@
    */
   observation?: Observation[];
   /**
-   * a configuration that has been chosen to observe with.
+   * a configuration can be used to observe with.
    */
   mode?: ObservingMode;
 };
@@ -750,6 +761,9 @@
  * An organisation that can perform astronomical observations
  */
 export type Observatory = {
+  "@type"?: string;
+  "_id"?: number;
+
   xmlId?: string;
   /**
    * The name of the organization
@@ -765,6 +779,10 @@
    */
   wikiId?: WikiDataId;
   /**
+   * the home page for the Observatory
+   */
+  homePage?: string;
+  /**
    * the telescopes that the observatory controls
    */
   telescopes?: Telescope[];
@@ -788,9 +806,10 @@
 export type ObservingConstraint = Record<string, any>;
 
 /**
- * a configuration that has been chosen to observe with.
+ * a configuration can be used to observe with.
  */
 export type ObservingMode = {
+  _id?: number;
   /**
    * human readable name for the mode
    */
@@ -800,17 +819,6 @@
    */
   description?: string;
   /**
-   * A particular observation combination that is possible
-   */
-  configuration?: ObservingModeConfiguration;
-  xmlId?: string;
-};
-
-/**
- * A particular observation combination that is possible
- */
-export type ObservingModeConfiguration = {
-  /**
    * Available filters /bandpasses for intruments
    */
   filter?: Filter;
@@ -840,6 +848,7 @@
  * a complete proposal
  */
 export type ObservingProposal = {
+  "_id"?: number;
   /**
    * the proposal title
    */
@@ -893,6 +902,8 @@
  * An institution that is a collection of people
  */
 export type Organization = {
+  "@type"?: string; // proposal:Organization
+  _id?: number;
   /**
    * The name of the organization
    */
@@ -1117,11 +1128,17 @@
  * Defines collection of resources and proposals for a particular observing season
  */
 export type ProposalCycle = {
+  _id?: number
+
   /**
    * a human readable description of the cycle
    */
   title?: string;
   /**
+   * pointer to more detailed instructions about the cycle
+   */
+  instructions?: string;
+  /**
    * the date by which observing proposals must be submitted to be considered for this cycle
    *
    * @format date
@@ -1186,6 +1203,7 @@
  * A review of a proposal
  */
 export type ProposalReview = {
+  _id?: number;
   /**
    * Description
    */
@@ -1268,6 +1286,7 @@
  * A real value with a unit.
  */
 export type RealQuantity = {
+  "@type"?: string; // ivoa:RealQuantity
   /**
    * Must conform to definition of unit in VOUnit spec.
    */
@@ -1299,6 +1318,8 @@
  * A resource that will be consumed by allocating an observation from a proposal
  */
 export type Resource = {
+  _id?: number;
+
   /**
    * The amount of the resource
    *
@@ -1320,7 +1341,7 @@
    */
   resource?: Resource;
   /**
-   * a configuration that has been chosen to observe with.
+   * a configuration can be used to observe with.
    */
   mode?: ObservingMode;
 };
@@ -1329,6 +1350,7 @@
  * a type of resource
  */
 export type ResourceType = {
+  _id?: number;
   /**
    * the name of the resource type
    */
@@ -1341,6 +1363,7 @@
  * assigned to review the proposal
  */
 export type Reviewer = {
+  _id?: number;
   /**
    * person connected with the proposal
    */
@@ -1372,6 +1395,8 @@
   /**
    * Science oriented definition of a spectral window.
    */
+  _id?: number;
+
   spectralWindowSetup?: SpectralWindowSetup;
   expectedSpectralLine?: ExpectedSpectralLine[];
 };
@@ -1416,6 +1441,7 @@
  * A SpaceFrame is specified by its reference frame (orientation), and a reference position (origin). Currently only standard reference frames are allowed. An equinox MUST be provided for pre-ICRS reference frames. A planetary ephemeris MAY be provided if relevant. If needed, but not provided, it is assumed to be 'DE405'.
  */
 export type SpaceFrame = {
+  "@type": string; // coords:SpaceFrame
   /**
    * RefLocation defines the origin of the spatial coordinate space. This location is represented either by a standard reference position (for which the absolute location in phase space is known by definition), or a specified point in another Spatial frame. This object is used as the origin of the SpaceFrame here, but also to specify the Spatial Reference Position (refPosition) associated with other domain Frames. For example, in the Time domain, the Spatial Reference Position indicates that the 'time' values are the time that the 'event' occured at that location, which might be different from the detector location.
    */
@@ -1438,6 +1464,7 @@
  * Specialized coordinate system for the Spatial domain. This object SHOULD include an appropriate SpaceFrame. In Appendix B, we define two standard spatial coordinate space instances (Spherical and Cartesian), which may be referenced in serializations. If a CoordSpace is not provided, it is assumed to be represented by a Standard Spherical Coordinate Space.
  */
 export type SpaceSys = {
+  "@type": string; // coords:SpaceSys
   xmlId?: string;
   /**
    * Abstract head of coordinate spaces related to physical properties.
@@ -1521,7 +1548,7 @@
   /**
    * person connected with the proposal
    */
-  person?: Person | Person;
+  person?: Person;
   uid?: string;
   inKeycloakRealm?: boolean;
 };
@@ -1541,6 +1568,7 @@
  * an instance of a proposal that has been submitted
  */
 export type SubmittedProposal = {
+  _id?: number;
   /**
    * the date that the proposal was submitted
    *
@@ -1559,15 +1587,15 @@
    * @example "2022-03-10T00:00:00.000Z"
    */
   reviewsCompleteDate?: Date;
-  /**
-   * a complete proposal
-   */
-  proposal?: ObservingProposal;
   config?: ObservationConfiguration[];
   /**
    * the reviews
    */
   reviews?: ProposalReview[];
+  /**
+   * a complete proposal
+   */
+  proposal?: ObservingProposal;
   xmlId?: string;
 };
 
@@ -1604,17 +1632,20 @@
  * A target source
  */
 export type Target = {
+  "@type"?: string;
   /**
    * A common name for the source
    */
   sourceName?: string;
   xmlId?: string;
+  _id?: number;
 };
 
 /**
  * the field points to the associated target
  */
 export type TargetField = {
+  "@type"?: string;
   xmlId?: string;
   name?: string;
 };
@@ -1623,6 +1654,7 @@
  * an observation of the scientific target
  */
 export type TargetObservation = {
+  "@type"?: string;
   xmlId?: string;
   /**
    * any constraints on the observation
@@ -1651,10 +1683,12 @@
    */
   performance?: PerformanceParameters;
   spectrum?: ScienceSpectralWindow[];
+  _id?: number;
   xmlId?: string;
 };
 
 export type Telescope = {
+  "@type"?: string;
   xmlId?: string;
   /**
    * telescope name
@@ -1674,6 +1708,7 @@
  * a set of telescopes that are operated together for an observation
  */
 export type TelescopeArray = {
+  "@type"?: string;
   xmlId?: string;
   /**
    * the array name
@@ -1755,6 +1790,10 @@
  * particular time range
  */
 export type TimingWindow = {
+  "@type"?: string; //proposal:TimingWindow
+
+  _id?: number;
+
   note?: string;
   isAvoidConstraint?: boolean;
   /**
@@ -1777,13 +1816,6 @@
 };
 
 /**
- * Must conform to definition of unit in VOUnit spec.
- */
-export type Unit1 = {
-  value?: string;
-};
-
-/**
  * @format binary
  */
 export type UploadItemSchema = Blob;
