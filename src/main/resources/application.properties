quarkus.application.name=pst-gui
quarkus.http.root-path=/pst/gui/

%dev.quarkus.rest-client.proposal-api.url=http://localhost:8084/pst/api/
%dev.quarkus.rest-client.proposal-api.verify-host=false
quarkus.rest-client.proposal-api.scope=jakarta.inject.Singleton
#below tries to connect directly to the service in k8s
%prod.quarkus.rest-client.proposal-api.url=http://pst-api-service/pst/api/



quarkus.quinoa.package-manager-install=false
#using vite
quarkus.quinoa.dev-server.port=5173
quarkus.quinoa.build-dir=dist
#see https://docs.quarkiverse.io/quarkus-quinoa/dev/index.html#spa-routing - cannot really have this on in production (or development with authentication)
#quarkus.quinoa.enable-spa-routing=true

#want this exposed to outside world
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ports.http.path=/pst

#AAI setup - talk directly via pod network
%prod.quarkus.oidc.auth-server-url=http://keycloak/aai/realms/orppst
%prod.quarkus.oidc.authentication.force-redirect-https-scheme=true
quarkus.keycloak.devservices.port=53536
quarkus.keycloak.devservices.show-logs=true
quarkus.keycloak.devservices.shared=true
quarkus.keycloak.devservices.service-name=pstkeydev

#options to
#quarkus.keycloak.devservices.realm-path=orppst-realm.json

#below is actual deployed image with customizations - alternative to above....
quarkus.keycloak.devservices.image-name=kilburn.jb.man.ac.uk/orppst/keycloak
keycloak.realms=orppst
quarkus.keycloak.devservices.realm-name=orppst
quarkus.keycloak.devservices.create-realm=false
quarkus.keycloak.devservices.start-command=start-dev  --import-realm
#end of deploy actual image options


quarkus.oidc.client-id=pst-gui
#FIXME - need to make this read from secrets store + need to make stronger
quarkus.oidc.credentials.secret=eLt4izrWhxRftFTWTIcMbQsYlbyhfZtU
quarkus.oidc.authentication.pkce-required=true
quarkus.oidc.authentication.pkce-secret=fUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU
quarkus.oidc.application-type=web-app
# see https://quarkus.io/guides/security-oidc-bearer-token-authentication#token-claims-and-securityidentity-roles
#ultimately want this related to roles.
quarkus.oidc.roles.source=accesstoken
quarkus.oidc.token.refresh-token-time-skew=60
quarkus.oidc.token.refresh-expired=true
#quarkus3 now encrypts cookies by default https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.0#session-cookie-is-encrypted-by-default
#quarkus.oidc.token-state-manager.split-tokens=true
# do not do the cookie encryption for now - TODO find way to re-enable encryption and have it work
quarkus.oidc.token-state-manager.encryption-required=false

# https://quarkus.io/guides/security-openid-connect-web-authentication#logout
quarkus.oidc.logout.path=/pst/gui/logout
# Logged-out users should be returned to the /index.html site which will offer an option to re-login:
quarkus.oidc.logout.post-logout-path=/pst/gui/signed-out.html

# authenticated users can get to the app proper:
quarkus.http.auth.permission.authenticated.paths=tool/*,aai/*
quarkus.http.auth.permission.authenticated.policy=authenticated


# All users can see the welcome page and others:
quarkus.http.auth.permission.public.paths=/*
quarkus.http.auth.permission.public.policy=permit

quarkus.http.same-site-cookie.session.value=STRICT
quarkus.oidc.authentication.cookie-same-site=STRICT
quarkus.oidc.authentication.java-script-auto-redirect=false

# quarkus behind reverse proxy https://quarkus.io/guides/security-oidc-code-flow-authentication#running-quarkus-application-behind-a-reverse-proxy
quarkus.http.proxy.proxy-address-forwarding=true
quarkus.http.proxy.allow-forwarded=false
quarkus.http.proxy.enable-forwarded-host=true
quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST


